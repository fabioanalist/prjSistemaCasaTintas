/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package principal;

import java.text.DecimalFormat;
import java.util.LinkedHashMap;
import java.util.Objects;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import lib.jdb.jdbquery.JDBQuery;
import lib.jdb.jdbupdate.JDBUpdate;

/**
 *
 * @author paulo
 */
public class iFrmConfiguracoes extends javax.swing.JInternalFrame {
    JDBQuery qryCliente, qryConfiguracoes;
    sistema.Conexao conexao;
    
    /**
     * Creates new form iFrmConfiguracoes
     */
    public iFrmConfiguracoes(sistema.Conexao conexao) {
        this.conexao = conexao;
        
        qryCliente = new JDBQuery();
        qryConfiguracoes = new JDBQuery();
        
        JDBQuery[] qry = {qryCliente, qryConfiguracoes};
        for(JDBQuery q: qry){
            q.setJDBConnection(conexao.getConexao());
            q.setConcurUpdatable(false);
        }
        
        qryConfiguracoes.setSQL("SELECT id, valor FROM configuracoes");
        
        initComponents();
        
        DecimalFormat decimal = new DecimalFormat("######0.000");        
        NumberFormatter numFormatter = new NumberFormatter(decimal);
        numFormatter.setFormat(decimal);
        numFormatter.setAllowsInvalid(false);
        DefaultFormatterFactory dfFactory = new DefaultFormatterFactory(numFormatter);
        
        txtSimples.setFormatterFactory(dfFactory);
        txtComissao.setFormatterFactory(dfFactory);
        txtQuantProducao.setFormatterFactory(dfFactory);
        
        qryConfiguracoes.execQuery();
        
        qryConfiguracoes.first();
        txtSimples.setValue(qryConfiguracoes.getCurrentFieldValueAsDouble("valor"));
        qryConfiguracoes.next();
        txtComissao.setValue(qryConfiguracoes.getCurrentFieldValueAsDouble("valor"));
        qryConfiguracoes.next();
        cbxModoProducao.setSelectedIndex(qryConfiguracoes.getCurrentFieldValueAsInteger("valor"));
        qryConfiguracoes.next();
        txtQuantProducao.setValue(qryConfiguracoes.getCurrentFieldValueAsDouble("valor"));
        qryConfiguracoes.next();
        txtCliente.setText(qryConfiguracoes.getCurrentFieldValueAsString("valor"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtSimples = new javax.swing.JFormattedTextField();
        txtComissao = new javax.swing.JFormattedTextField();
        cbxModoProducao = new javax.swing.JComboBox();
        txtQuantProducao = new javax.swing.JFormattedTextField();
        txtCliente = new javax.swing.JTextField();
        btnAtribuirSimples = new javax.swing.JButton();
        btnAtribuirComissao = new javax.swing.JButton();
        btnConsultarCliente = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Configurações");

        jLabel1.setText("Simples nacional padrão");

        jLabel2.setText("Comissão padrão");

        jLabel3.setText("Modo padrão de produção de tinta");

        jLabel4.setText("Quant. padrão de produção de tinta");

        jLabel5.setText("Cliente padrão para venda");

        cbxModoProducao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Absoluto", "Acumulado" }));

        txtCliente.setFocusable(false);

        btnAtribuirSimples.setText("Atribuir em produtos");
        btnAtribuirSimples.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtribuirSimplesActionPerformed(evt);
            }
        });

        btnAtribuirComissao.setText("Atribuir em produtos");
        btnAtribuirComissao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtribuirComissaoActionPerformed(evt);
            }
        });

        btnConsultarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/look.png"))); // NOI18N
        btnConsultarCliente.setText("Consultar");
        btnConsultarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarClienteActionPerformed(evt);
            }
        });

        jButton1.setMnemonic('s');
        jButton1.setText("Salvar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtQuantProducao, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtComissao, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                            .addComponent(txtSimples, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCliente, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxModoProducao, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnAtribuirSimples)
                                .addComponent(btnAtribuirComissao, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(btnConsultarCliente)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtSimples, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAtribuirSimples))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtComissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAtribuirComissao))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbxModoProducao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtQuantProducao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConsultarCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarClienteActionPerformed
        // campos para combobox sendo texto visual e o nome campo do banco referente.
        LinkedHashMap<String, String> combo = new LinkedHashMap<>();
        combo.put("CPF/CNPJ", "doc_principal");
        combo.put("Nome","nome");
        
        // titulos para as colunas da tabela, sendo texto visual e nome campo do banco referente.
        LinkedHashMap<String, String> titulo = new LinkedHashMap<>();
        titulo.put("CPF/CNPJ", "doc_principal");
        titulo.put("NOME", "nome");

        // campos que deseja deixar invisível, pode-se omitir.
        String[] invisivel = null;

        // tamanho das colunas visíveis, pode-se omitir.
//        int[] tamanho = {200, 400};
        
        pesquisa.iFrmPesquisa pessoa;
        pessoa = new pesquisa.iFrmPesquisa(this,
                "Pesquisa de Cliente",
                principal.Principal.conexao.getConexao(),
                qryCliente,
                "doc_principal",
                combo,
                titulo,
                "SELECT doc_principal, nome "
                + "FROM vw_clientes_pesquisa_venda",
                invisivel,
                null);

        
        principal.FrmPrincipal.Desktop.add(pessoa);
        pessoa.setVisible(true);
    }//GEN-LAST:event_btnConsultarClienteActionPerformed

    private void btnAtribuirSimplesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtribuirSimplesActionPerformed
        if(FrmLogin.usuario.verificarPermissao(this, 1)){

            if(sistema.Mensagem.showConfirmDialog(this, 
                    "Deseja realmente aplicar este valor de \n"
                    + "simples nacional a todos os produtos?", "Confirmação") == 0){

                JDBUpdate upd = new JDBUpdate();
                upd.setJDBConnection(conexao.getConexao());

                JDBQuery qryProdutos = new JDBQuery();
                qryProdutos.setJDBConnection(conexao.getConexao());
                qryProdutos.setConcurUpdatable(false);
                qryProdutos.setSQL("");

                qryProdutos.setSQL(
                        "SELECT "
                            + "id, "
                            + "preco_custo, "
                            + "ipi, "
                            + "icms_st, "
                            + "diferenca_icms, "
                            + "frete, "
                            + "simples_nacional, "
                            + "comissao, "
                            + "margem "
                        + "FROM produtos");
                qryProdutos.execQuery();

                double precoCustoFinal, precoVenda, somaPorc;

                qryProdutos.first();

                if(qryProdutos.getRow() == 1){
                    do{
                        if(!Objects.equals(
                                Double.valueOf(txtSimples.getValue().toString()),
                                qryProdutos.getCurrentFieldValueAsDouble("simples_nacional"))){

                            precoCustoFinal = estoque.iFrmCadProduto.calcularPrecoCusto(
                                    qryProdutos.getCurrentFieldValueAsDouble("preco_custo"), 
                                    qryProdutos.getCurrentFieldValueAsDouble("ipi"), 
                                    qryProdutos.getCurrentFieldValueAsDouble("icms_st"), 
                                    qryProdutos.getCurrentFieldValueAsDouble("diferenca_icms"), 
                                    qryProdutos.getCurrentFieldValueAsDouble("frete"));

                            somaPorc = Double.valueOf(txtSimples.getValue().toString()) + 
                                    qryProdutos.getCurrentFieldValueAsDouble("comissao") + 
                                    qryProdutos.getCurrentFieldValueAsDouble("margem");
                            precoVenda = estoque.iFrmCadProduto.calcularPrecoVenda(precoCustoFinal, somaPorc);

                            upd.setSQL(String.format(
                                    "UPDATE produtos SET "
                                        + "simples_nacional = '%s',"
                                        + "preco_venda = '%s' "
                                    + "WHERE id = %s",
                                    Double.valueOf(txtSimples.getValue().toString()),
                                    precoVenda,
                                    qryProdutos.getCurrentFieldValueAsInteger("id")) );
                            upd.execUpdate();
                        }

                    }while(qryProdutos.next() != -1);
                }
                
                // registro de log
                FrmLogin.log.gravar(FrmLogin.usuario.getNomeUsuario(),
                        "iFrmConfiguracoes", "Atualizado simples nacional de produtos");
                
                JOptionPane.showMessageDialog(this, 
                        "Atualizado simples nacional em todos os produtos",
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
                
            }
        }
    }//GEN-LAST:event_btnAtribuirSimplesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(FrmLogin.usuario.verificarPermissao(this, 1)){
        
            if(sistema.Mensagem.showConfirmDialog(this, 
                    "Deseja realmente modificar as configurações do sistema", 
                    "Confirmação") == 0){

                JDBUpdate upd = new JDBUpdate();
                upd.setJDBConnection(conexao.getConexao());

                String[] valores = new String[5];
                valores[0] = txtSimples.getValue().toString();
                valores[1] = txtComissao.getValue().toString();
                valores[2] = String.valueOf(cbxModoProducao.getSelectedIndex());
                valores[3] = txtQuantProducao.getValue().toString();
                valores[4] = txtCliente.getText();

                for(int i=0; i < valores.length; i++){
                    upd.setSQL(String.format(
                        "UPDATE configuracoes SET "
                            + "valor = '%s' "
                        + "WHERE id = %s",
                        valores[i],
                        i + 1) );
                    upd.execUpdate();
                    
                }
                // registro de log
                FrmLogin.log.gravar(FrmLogin.usuario.getNomeUsuario(),
                        this, 2);
                

            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnAtribuirComissaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtribuirComissaoActionPerformed
        if(FrmLogin.usuario.verificarPermissao(this, 1)){

            if(sistema.Mensagem.showConfirmDialog(this, 
                    "Deseja realmente aplicar este valor de \n"
                    + "comissão a todos os produtos?", "Confirmação") == 0){

                JDBUpdate upd = new JDBUpdate();
                upd.setJDBConnection(conexao.getConexao());

                JDBQuery qryProdutos = new JDBQuery();
                qryProdutos.setJDBConnection(conexao.getConexao());
                qryProdutos.setConcurUpdatable(false);
                qryProdutos.setSQL("");

                qryProdutos.setSQL(
                        "SELECT "
                            + "id, "
                            + "preco_custo, "
                            + "ipi, "
                            + "icms_st, "
                            + "diferenca_icms, "
                            + "frete, "
                            + "simples_nacional, "
                            + "comissao, "
                            + "margem "
                        + "FROM produtos");
                qryProdutos.execQuery();

                double precoCustoFinal, precoVenda, somaPorc;

                qryProdutos.first();

                if(qryProdutos.getRow() == 1){
                    do{
                        if(!Objects.equals(
                                Double.valueOf(txtComissao.getValue().toString()),
                                qryProdutos.getCurrentFieldValueAsDouble("comissao"))){

                            precoCustoFinal = estoque.iFrmCadProduto.calcularPrecoCusto(
                                    qryProdutos.getCurrentFieldValueAsDouble("preco_custo"), 
                                    qryProdutos.getCurrentFieldValueAsDouble("ipi"), 
                                    qryProdutos.getCurrentFieldValueAsDouble("icms_st"), 
                                    qryProdutos.getCurrentFieldValueAsDouble("diferenca_icms"), 
                                    qryProdutos.getCurrentFieldValueAsDouble("frete"));

                            somaPorc = Double.valueOf(txtComissao.getValue().toString()) + 
                                    qryProdutos.getCurrentFieldValueAsDouble("simples_nacional") + 
                                    qryProdutos.getCurrentFieldValueAsDouble("margem");
                            precoVenda = estoque.iFrmCadProduto.calcularPrecoVenda(precoCustoFinal, somaPorc);

                            upd.setSQL(String.format(
                                    "UPDATE produtos SET "
                                        + "comissao = '%s',"
                                        + "preco_venda = '%s' "
                                    + "WHERE id = %s",
                                    Double.valueOf(txtComissao.getValue().toString()),
                                    precoVenda,
                                    qryProdutos.getCurrentFieldValueAsInteger("id")) );
                            upd.execUpdate();
                        }

                    }while(qryProdutos.next() != -1);
                }
                
                // registro de log
                FrmLogin.log.gravar(FrmLogin.usuario.getNomeUsuario(),
                        "iFrmConfiguracoes", "Atualizado comissão de produtos");
                
                JOptionPane.showMessageDialog(this, 
                        "Atualizado comissão em todos os produtos",
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAtribuirComissaoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtribuirComissao;
    private javax.swing.JButton btnAtribuirSimples;
    private javax.swing.JButton btnConsultarCliente;
    private javax.swing.JComboBox cbxModoProducao;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JFormattedTextField txtComissao;
    private javax.swing.JFormattedTextField txtQuantProducao;
    private javax.swing.JFormattedTextField txtSimples;
    // End of variables declaration//GEN-END:variables
    
    public void atribuirCampos(){
        txtCliente.setText(qryCliente.getCurrentFieldValueAsString("doc_principal"));
    }
    
}
