/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package estoque;

import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import lib.jdb.jdbquery.JDBQuery;
import lib.jdb.jdbupdate.JDBUpdate;
import principal.FrmLogin;

/**
 *
 * @author patri
 */
public class iFrmProdTinta extends javax.swing.JInternalFrame {
    private JDBQuery qryTinta, qryBaseTinta, qryEmbalagem, qryProducaoTinta, qryTemp;
    private JDBUpdate updTransacao;
    private int idTinta;
    private double precoCusto, valorAcumulado;
    /**
     * Creates new form iFrmProdTinta
     */
    public iFrmProdTinta() {
        // criando componentes JDB e alimentando com sql
        updTransacao = new JDBUpdate();
        updTransacao.setJDBConnection(principal.Principal.conexao.getConexao());
        
        qryTinta = new JDBQuery();
        qryBaseTinta = new JDBQuery();    
        qryEmbalagem = new JDBQuery();
        qryProducaoTinta = new JDBQuery();
        qryTemp = new JDBQuery();
        
        JDBQuery[] vetorQry = {qryTinta, qryBaseTinta, qryEmbalagem, qryProducaoTinta, qryTemp};
        for(JDBQuery qry: vetorQry){
            qry.setJDBConnection(principal.Principal.conexao.getConexao());
            qry.setConcurUpdatable(false);
            qry.setTimeStampFormat("dd/MM/YYYY HH:mm:ss");
            qry.setDateFormat("dd/MM/yyyy");
            qry.setLanguage("pt");
            qry.setDecimalFormat("#0.000");
        }
        
        qryEmbalagem.setDecimalFormat("#0.00");
        
        initComponents();
        
        // mascara para decimal
        DecimalFormat decimal = new DecimalFormat("######0.000");        
        NumberFormatter numFormatter = new NumberFormatter(decimal);
        numFormatter.setFormat(decimal);
        numFormatter.setAllowsInvalid(false);
        DefaultFormatterFactory dfFactory = new DefaultFormatterFactory(numFormatter);
        
        txtQuantidade.setFormatterFactory(dfFactory);
        txtQuantidadeBase.setFormatterFactory(dfFactory);
        txtQuantidadeMin.setFormatterFactory(dfFactory);
        
        DecimalFormat decimal2 = new DecimalFormat("######0.00");        
        numFormatter = new NumberFormatter(decimal2);
        numFormatter.setFormat(decimal2);
        numFormatter.setAllowsInvalid(false);
        dfFactory = new DefaultFormatterFactory(numFormatter);
        
        txtValor.setFormatterFactory(dfFactory);
        txtValorMaisEmbalagem.setFormatterFactory(dfFactory);
        
        qryTinta.setSQL(
                "SELECT "
                    + "id, "
                    + "nome, "
                    + "cod_tinta, "
                    + "ano_inicial, "
                    + "ano_final, "
                    + "id_categoria_tinta, "
                    + "categoria, "
                    + "id_tipo_tinta, "
                    + "tipo, "
                    + "sigla_montadora, "
                    + "montadora, "
                    + "quantidade_producao, "
                    + "quantidade_minima, "
                    + "sigla_unidade, "
                    + "unidade "
                + "FROM vw_tintas "
                + "WHERE id = 0");
        qryTinta.execQuery();
        
        limpar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Painel = new javax.swing.JPanel();
        lblNomeTinta = new javax.swing.JLabel();
        txtNomeTinta = new lib.jdb.control.jdbtextfield.JDBTextField();
        pnCodigo = new javax.swing.JPanel();
        txtID = new lib.jdb.control.jdbtextfield.JDBTextField();
        btnPesquisar = new javax.swing.JButton();
        lblMontadora = new javax.swing.JLabel();
        txtMontadora = new lib.jdb.control.jdbtextfield.JDBTextField();
        lblAnoIni = new javax.swing.JLabel();
        lblAnoFin = new javax.swing.JLabel();
        lblQuantidade = new javax.swing.JLabel();
        lblUnidade = new javax.swing.JLabel();
        txtUnidade = new lib.jdb.control.jdbtextfield.JDBTextField();
        lblValor = new javax.swing.JLabel();
        pnBaseTinta = new javax.swing.JPanel();
        scrlBaseTinta = new javax.swing.JScrollPane();
        tbBaseTinta = new lib.jdb.control.jdbtable.JDBTable();
        lblBase = new javax.swing.JLabel();
        txtBase = new lib.jdb.control.jdbtextfield.JDBTextField();
        btnProxBase = new javax.swing.JButton();
        brnProduzir = new javax.swing.JButton();
        lblQuantidadeBase = new javax.swing.JLabel();
        lblUnidadeBase = new javax.swing.JLabel();
        txtUnidadeBase = new lib.jdb.control.jdbtextfield.JDBTextField();
        btnCancelar_Pes1 = new lib.jdb.control.jdbbuttoncancel.JDBButtonCancel();
        txtQuantidadeBase = new javax.swing.JFormattedTextField();
        cbxAbsoluto = new javax.swing.JComboBox();
        lblTipo = new javax.swing.JLabel();
        lblQuantidadeMin = new javax.swing.JLabel();
        txtTipo = new javax.swing.JTextField();
        txtAnoFinal = new javax.swing.JTextField();
        txtAnoInicial = new javax.swing.JTextField();
        cbxEmbalagem = new lib.jdb.control.jdblistcombobox.JDBListComboBox();
        txtQuantidade = new javax.swing.JFormattedTextField();
        txtValor = new javax.swing.JFormattedTextField();
        txtValorMaisEmbalagem = new javax.swing.JFormattedTextField();
        lblValor1 = new javax.swing.JLabel();
        lblValor2 = new javax.swing.JLabel();
        txtCategoria = new lib.jdb.control.jdbtextfield.JDBTextField();
        lblMontadora1 = new javax.swing.JLabel();
        txtQuantidadeMin = new javax.swing.JFormattedTextField();

        setClosable(true);
        setIconifiable(true);
        setTitle("Produção de Tinta");

        Painel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        lblNomeTinta.setFont(principal.FrmLogin.fontePadrao);
        lblNomeTinta.setText("Nome da Tinta:");

        txtNomeTinta.setFocusable(false);
        txtNomeTinta.setFont(principal.FrmLogin.fontePadrao);
        txtNomeTinta.setNextFocusableComponent(btnPesquisar);

        pnCodigo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "Código", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        txtID.setFocusable(false);
        txtID.setFont(principal.FrmLogin.fontePadraoNegrito);
        txtID.setNextFocusableComponent(txtNomeTinta);

        javax.swing.GroupLayout pnCodigoLayout = new javax.swing.GroupLayout(pnCodigo);
        pnCodigo.setLayout(pnCodigoLayout);
        pnCodigoLayout.setHorizontalGroup(
            pnCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCodigoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtID, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnCodigoLayout.setVerticalGroup(
            pnCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCodigoLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        btnPesquisar.setFont(principal.FrmLogin.fontePadrao);
        btnPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/look.png"))); // NOI18N
        btnPesquisar.setText("Pesquisar");
        btnPesquisar.setNextFocusableComponent(txtMontadora);
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        lblMontadora.setFont(principal.FrmLogin.fontePadrao);
        lblMontadora.setText("Montadora:");

        txtMontadora.setFocusable(false);
        txtMontadora.setFont(principal.FrmLogin.fontePadrao);

        lblAnoIni.setFont(principal.FrmLogin.fontePadrao);
        lblAnoIni.setText("Ano inicial:");

        lblAnoFin.setFont(principal.FrmLogin.fontePadrao);
        lblAnoFin.setText("Ano Final:");

        lblQuantidade.setFont(principal.FrmLogin.fontePadraoNegrito);
        lblQuantidade.setText("Quantidade:");

        lblUnidade.setFont(principal.FrmLogin.fontePadrao);
        lblUnidade.setText("Unidade:");

        txtUnidade.setFocusable(false);
        txtUnidade.setFont(principal.FrmLogin.fontePadrao);

        lblValor.setFont(principal.FrmLogin.fontePadrao);
        lblValor.setText("Valor(R$):");

        pnBaseTinta.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "Base da Tinta", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        scrlBaseTinta.setFont(principal.FrmLogin.fontePadrao);

        tbBaseTinta.setEditable(false);
        scrlBaseTinta.setViewportView(tbBaseTinta);

        lblBase.setFont(principal.FrmLogin.fontePadrao);
        lblBase.setText("Base selecionada:");

        txtBase.setFocusable(false);
        txtBase.setFont(principal.FrmLogin.fontePadraoNegrito);

        btnProxBase.setFont(principal.FrmLogin.fontePadrao);
        btnProxBase.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/arrow_right.png"))); // NOI18N
        btnProxBase.setText("Próxima Base");
        btnProxBase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProxBaseActionPerformed(evt);
            }
        });

        brnProduzir.setFont(principal.FrmLogin.fontePadrao);
        brnProduzir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/bucket_color.png"))); // NOI18N
        brnProduzir.setText("Produzir");
        brnProduzir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brnProduzirActionPerformed(evt);
            }
        });

        lblQuantidadeBase.setFont(principal.FrmLogin.fontePadrao);
        lblQuantidadeBase.setText("Quantidade:");

        lblUnidadeBase.setFont(principal.FrmLogin.fontePadrao);
        lblUnidadeBase.setText("Unidade:");

        txtUnidadeBase.setFocusable(false);
        txtUnidadeBase.setFont(principal.FrmLogin.fontePadrao);
        txtUnidadeBase.setNextFocusableComponent(btnProxBase);

        btnCancelar_Pes1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/return2.png"))); // NOI18N
        btnCancelar_Pes1.setMnemonic('l');
        btnCancelar_Pes1.setFont(principal.FrmLogin.fontePadrao);
        btnCancelar_Pes1.setText("Limpar");
        btnCancelar_Pes1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelar_Pes1ActionPerformed(evt);
            }
        });

        txtQuantidadeBase.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtQuantidadeBase.setFocusable(false);
        txtQuantidadeBase.setFont(principal.FrmLogin.fontePadraoNegrito
        );

        cbxAbsoluto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Absoluto", "Acumulado" }));

        javax.swing.GroupLayout pnBaseTintaLayout = new javax.swing.GroupLayout(pnBaseTinta);
        pnBaseTinta.setLayout(pnBaseTintaLayout);
        pnBaseTintaLayout.setHorizontalGroup(
            pnBaseTintaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnBaseTintaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnBaseTintaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrlBaseTinta)
                    .addGroup(pnBaseTintaLayout.createSequentialGroup()
                        .addGroup(pnBaseTintaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblBase)
                            .addComponent(txtBase, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnBaseTintaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblQuantidadeBase)
                            .addComponent(txtQuantidadeBase, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnBaseTintaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUnidadeBase)
                            .addGroup(pnBaseTintaLayout.createSequentialGroup()
                                .addComponent(txtUnidadeBase, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbxAbsoluto, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnBaseTintaLayout.createSequentialGroup()
                        .addComponent(btnProxBase)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancelar_Pes1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(brnProduzir)))
                .addContainerGap())
        );
        pnBaseTintaLayout.setVerticalGroup(
            pnBaseTintaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnBaseTintaLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnBaseTintaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnBaseTintaLayout.createSequentialGroup()
                        .addComponent(lblBase)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnBaseTintaLayout.createSequentialGroup()
                        .addComponent(lblQuantidadeBase)
                        .addGap(33, 33, 33))
                    .addGroup(pnBaseTintaLayout.createSequentialGroup()
                        .addComponent(lblUnidadeBase)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnBaseTintaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUnidadeBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtQuantidadeBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxAbsoluto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(scrlBaseTinta, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnBaseTintaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProxBase)
                    .addComponent(brnProduzir)
                    .addComponent(btnCancelar_Pes1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        lblTipo.setFont(principal.FrmLogin.fontePadrao);
        lblTipo.setText("Tipo:");

        lblQuantidadeMin.setFont(principal.FrmLogin.fontePadrao);
        lblQuantidadeMin.setText("Quant. minima:");

        txtTipo.setFocusable(false);

        txtAnoFinal.setFocusable(false);

        txtAnoInicial.setFocusable(false);

        cbxEmbalagem.setNextFocusableComponent(btnProxBase);
        cbxEmbalagem.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cbxEmbalagemPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        txtQuantidade.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtQuantidade.setToolTipText("ENTER para calcular");
        txtQuantidade.setFont(principal.FrmLogin.fontePadraoNegrito
        );
        txtQuantidade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtQuantidadeFocusLost(evt);
            }
        });
        txtQuantidade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtQuantidadeKeyPressed(evt);
            }
        });

        txtValor.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtValor.setFocusable(false);

        txtValorMaisEmbalagem.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtValorMaisEmbalagem.setFocusable(false);

        lblValor1.setFont(principal.FrmLogin.fontePadrao);
        lblValor1.setText("Valor Total(R$):");

        lblValor2.setFont(principal.FrmLogin.fontePadrao);
        lblValor2.setText("Embalagem");

        txtCategoria.setFocusable(false);
        txtCategoria.setFont(principal.FrmLogin.fontePadrao);

        lblMontadora1.setFont(principal.FrmLogin.fontePadrao);
        lblMontadora1.setText("Categoria");

        txtQuantidadeMin.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtQuantidadeMin.setFocusable(false);
        txtQuantidadeMin.setFont(principal.FrmLogin.fontePadraoNegrito
        );

        javax.swing.GroupLayout PainelLayout = new javax.swing.GroupLayout(Painel);
        Painel.setLayout(PainelLayout);
        PainelLayout.setHorizontalGroup(
            PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addComponent(pnCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addComponent(lblNomeTinta)
                                .addGap(433, 433, 433))
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addComponent(txtNomeTinta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnPesquisar)
                                .addContainerGap())))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PainelLayout.createSequentialGroup()
                        .addComponent(pnBaseTinta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblAnoIni)
                                    .addComponent(txtAnoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblAnoFin)
                                    .addComponent(txtAnoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTipo)
                                    .addComponent(txtTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMontadora)
                                    .addComponent(txtMontadora, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMontadora1)
                                    .addComponent(txtCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblQuantidade)
                                    .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblQuantidadeMin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtQuantidadeMin))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblUnidade)
                                    .addComponent(txtUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblValor))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblValor2)
                                    .addComponent(cbxEmbalagem, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PainelLayout.createSequentialGroup()
                                        .addComponent(lblValor1)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(txtValorMaisEmbalagem))))
                        .addContainerGap())))
        );
        PainelLayout.setVerticalGroup(
            PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addComponent(lblNomeTinta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNomeTinta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPesquisar))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addComponent(lblAnoIni)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAnoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addComponent(lblTipo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addComponent(lblAnoFin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAnoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtMontadora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblMontadora)
                            .addComponent(lblMontadora1))
                        .addGap(28, 28, 28)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addComponent(lblQuantidade)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtQuantidadeMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addComponent(lblQuantidadeMin)
                                .addGap(33, 33, 33)))
                        .addGroup(PainelLayout.createSequentialGroup()
                            .addComponent(lblUnidade)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblValor)
                            .addComponent(lblValor1)
                            .addComponent(lblValor2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbxEmbalagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtValorMaisEmbalagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnBaseTinta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(Painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(Painel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        pesquisa.iFrmPesTinta tinta = new pesquisa.iFrmPesTinta(this, qryTinta);
        principal.FrmPrincipal.Desktop.add(tinta);
        tinta.setVisible(true);
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void btnCancelar_Pes1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelar_Pes1ActionPerformed
        limpar();
    }//GEN-LAST:event_btnCancelar_Pes1ActionPerformed

    private void btnProxBaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProxBaseActionPerformed
            // se a quantidade informada for menor que a quantidade mínima
        if(Double.valueOf(txtQuantidade.getValue().toString()) >= 
                Double.valueOf(txtQuantidadeMin.getValue().toString())){
            // se tem estoque
            if(qryBaseTinta.getRow() == 1 && txtBase.getText().isEmpty()){
                if(verificarEstoqueProduto()){
                    alimentarCamposBaseSelecionada();
                    
                    txtQuantidade.setFocusable(false);
                    cbxEmbalagem.setEnabled(false);
                    btnPesquisar.setEnabled(false);
                    cbxAbsoluto.setEnabled(false);
                }
            }else{
                qryBaseTinta.next();

                alimentarCamposBaseSelecionada();
            }

        }else{
            JOptionPane.showMessageDialog(this, 
                    "Quantidade informada menor que a quantidade mínima da tinta",
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            txtQuantidade.requestFocus();
        }
    }//GEN-LAST:event_btnProxBaseActionPerformed

    private void txtQuantidadeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantidadeKeyPressed
        if(evt.getKeyChar() == '\n'){
            carregarQryBaseTinta(idTinta);
        }
    }//GEN-LAST:event_txtQuantidadeKeyPressed

    private void txtQuantidadeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQuantidadeFocusLost
        carregarQryBaseTinta(idTinta);
    }//GEN-LAST:event_txtQuantidadeFocusLost

    private void cbxEmbalagemPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cbxEmbalagemPopupMenuWillBecomeInvisible
        calcularValorTotal();
    }//GEN-LAST:event_cbxEmbalagemPopupMenuWillBecomeInvisible

    private void brnProduzirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brnProduzirActionPerformed
        if(FrmLogin.usuario.verificarPermissao(this, 1)){
        
            if(idTinta != 0){
                // verificação de produção mínima
                if(Double.valueOf(txtQuantidade.getValue().toString()) >= 
                        Double.valueOf(txtQuantidadeMin.getValue().toString())){
                    // verificação de estoque
                    if(verificarEstoqueProduto()){

                        // confirmação de produção
                        if(sistema.Mensagem.showConfirmDialog(this, 
                                "Deseja realmente produzir esta tinta?", "Confirmação") == 0){

                            String sql, descricaoProduto;

                            descricaoProduto = "Tinta prod. " + txtNomeTinta.getText() + " " + 
                                    txtMontadora.getText() + " " + txtCategoria.getText() + " " + 
                                    txtTipo.getText() + " " + txtID.getText();

                            // Está sendo aberto a transação agora para ser fechado somente 
                            // depois da baixa de estoque das bases envolvidas,
                            // inserção ou atualização de produto referente a tinta produzida e
                            // gravação da produção de tinta.
                            principal.Principal.conexao.abrirTransacoes();

                            // alimentando a precisão de decimal para 6 casas
                            qryBaseTinta.setDecimalFormat("#0.000000");
                            qryBaseTinta.execQuery();

                            // baixando o estoque dos produtos tipo base envolvidos na produção
                            baixarEstoqueProduto();

                            // inserindo ou alterando produto tipo tinta produzida
                            int idProdPesq = 0;
                            qryTemp.setSQL(
                                        "SELECT id_produto "
                                        + "FROM producao_tinta "
                                        + "WHERE id_tinta = " + idTinta);
                            qryTemp.execQuery();

                            if(qryTemp.getRow() == 1){
                                idProdPesq = qryTemp.getCurrentFieldValueAsInteger(1);
                            }

                            qryTemp.setSQL(
                                    "SELECT id, simples_nacional, comissao FROM produtos "
                                    + "WHERE id = " + idProdPesq);
                            qryTemp.execQuery();

                            int idProduto = 0, idMarca = 0, idEmbalagem = 0;
                            double precoVenda, margem, simples_nacional, comissao, 
                                    precoVendaUnidade, precoCustoUnidade, quantidade;

                            idMarca = qryBaseTinta.getCurrentFieldValueAsInteger("marca_produto");
                            quantidade = Double.valueOf(txtQuantidade.getValue().toString());
                            precoVenda = Double.valueOf(txtValorMaisEmbalagem.getValue().toString());

                            // dividindo o preço de venda e custo pela quantidade produzida 
                            // para encontrar o preço unitário. 
                            if(quantidade < 1.0){
                                // se a quantidade é menor que 1, 
                                // atribui o preço unitário calculado
                                precoVendaUnidade = precoVenda;
                                precoCustoUnidade = precoCusto;
                            }else{
                                // senão divide para encontrar o preço unitário.
                                precoVendaUnidade = precoVenda / quantidade;
                                precoCustoUnidade = precoCusto / quantidade;
                            }

                            if(qryTemp.getRow() == 1){
                                margem = ((precoVenda - precoCusto) / precoVenda) * 100;
                                margem = margem - 
                                        qryTemp.getCurrentFieldValueAsDouble("simples_nacional") - 
                                        qryTemp.getCurrentFieldValueAsDouble("comissao");

                                idProduto = qryTemp.getCurrentFieldValueAsInteger("id");

                                sql = String.format(
                                        "UPDATE produtos SET "
                                            + "estoque = estoque + %s, "
                                            + "preco_custo = '%s', "
                                            + "preco_venda =  '%s', "
                                            + "margem = '%s' "
                                        + "WHERE id = %s",
                                        quantidade,
                                        precoCustoUnidade,
                                        precoVendaUnidade,
                                        margem,
                                        idProduto);
                            }else{
                                qryBaseTinta.first();
                                comissao = qryBaseTinta.getCurrentFieldValueAsDouble("comissao");
                                simples_nacional = qryBaseTinta.getCurrentFieldValueAsDouble("simples_nacional");
                                margem = ((precoVenda - precoCusto) / precoVenda) * 100;
                                margem = margem - comissao - simples_nacional;

                                sql = String.format(
                                        "INSERT INTO produtos("
                                            + "nome, "
                                            + "codigo_fornecedor, "
                                            + "id_categoria, "
                                            + "id_marca, "
                                            + "estoque, "
                                            + "sigla_unidade, "
                                            + "fracionado, "
                                            + "preco_custo, "
                                            + "simples_nacional, "
                                            + "margem, "
                                            + "comissao, "
                                            + "preco_venda, "
                                            + "data_validade) "
                                        + "VALUES ("
                                            + "'%s','%s','%s','%s',%s,'%s','%s',"
                                            + "'%s','%s','%s','%s','%s','%s')",
                                        descricaoProduto,
                                        txtID.getText(),
                                        2, // 2=tinta produzida
                                        idMarca, // capturado de base envolvida
                                        quantidade,
                                        qryTinta.getCurrentFieldValueAsString("sigla_unidade"),
                                        1, // todas as tintas produzidas são fracionadas
                                        precoCustoUnidade,
                                        simples_nacional,
                                        margem,
                                        comissao,
                                        precoVendaUnidade,
                                        sistema.Data.getAtualAcrescimoDiasSQL(365) );
                            }
                            enviarTransacao(sql);

                            if(idProduto == 0){
                                qryTemp.setSQL("SELECT LAST_INSERT_ID()");
                                qryTemp.execQuery();

                                idProduto = qryTemp.getCurrentFieldValueAsInteger(1);
                            }

                            // baixando o estoque da embalagem utilizada na produção
                            if(cbxEmbalagem.getSelectedIndex() != 0){
                                idEmbalagem = qryEmbalagem.getCurrentFieldValueAsInteger("id");

                                sql = "UPDATE produtos "
                                    + "SET estoque = estoque - 1 "
                                    + "WHERE id = " + idEmbalagem;
                                enviarTransacao(sql);
                            }

                            // cadastrando a entrada em produção tinta
                            sql = String.format(
                                    "INSERT INTO producao_tinta("
                                        + "id_tinta, id_produto, id_embalagem, quantidade, unidade, valor_total) "
                                    + "VALUES ("
                                        + "'%s','%s',%s,'%s','%s','%s')",
                                    idTinta, 
                                    idProduto,
                                    idEmbalagem == 0?"NULL":idEmbalagem,
                                    quantidade,
                                    qryTinta.getCurrentFieldValueAsString("sigla_unidade"),
                                    precoVenda );
                            enviarTransacao(sql);    

                            JDBQuery temp = new JDBQuery();
                            temp.setJDBConnection(principal.Principal.conexao.getConexao());
                            temp.setSQL("SELECT LAST_INSERT_ID()");
                            temp.execQuery();
                            String id = temp.getCurrentFieldValueAsString(1);

                            // registro de log
                            FrmLogin.log.gravar(FrmLogin.usuario.getNomeUsuario(),
                                   this, id, 1); 

                            // retornando a precisão original
                            qryBaseTinta.setDecimalFormat("#0.000");
                            // desnecesário atualizar qry, porque o método limpar já fez essa rotina.
            //                qryBaseTinta.execQuery();


                            limpar();

                            // fechando a transação
                            principal.Principal.conexao.fecharTransacoes();
                        }
                    }
                }else{
                    JOptionPane.showMessageDialog(this, 
                            "Quantidade informada menor que a quantidade mínima da tinta",
                            "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    txtQuantidade.requestFocus();
                }
            }else{
                JOptionPane.showMessageDialog(this, 
                            "Consulte uma tinta para produzir",
                            "Atenção", JOptionPane.INFORMATION_MESSAGE);
                        btnPesquisar.requestFocus();
            }
        }
    }//GEN-LAST:event_brnProduzirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Painel;
    private javax.swing.JButton brnProduzir;
    private lib.jdb.control.jdbbuttoncancel.JDBButtonCancel btnCancelar_Pes1;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JButton btnProxBase;
    private javax.swing.JComboBox cbxAbsoluto;
    private lib.jdb.control.jdblistcombobox.JDBListComboBox cbxEmbalagem;
    private javax.swing.JLabel lblAnoFin;
    private javax.swing.JLabel lblAnoIni;
    private javax.swing.JLabel lblBase;
    private javax.swing.JLabel lblMontadora;
    private javax.swing.JLabel lblMontadora1;
    private javax.swing.JLabel lblNomeTinta;
    private javax.swing.JLabel lblQuantidade;
    private javax.swing.JLabel lblQuantidadeBase;
    private javax.swing.JLabel lblQuantidadeMin;
    private javax.swing.JLabel lblTipo;
    private javax.swing.JLabel lblUnidade;
    private javax.swing.JLabel lblUnidadeBase;
    private javax.swing.JLabel lblValor;
    private javax.swing.JLabel lblValor1;
    private javax.swing.JLabel lblValor2;
    private javax.swing.JPanel pnBaseTinta;
    private javax.swing.JPanel pnCodigo;
    private javax.swing.JScrollPane scrlBaseTinta;
    private lib.jdb.control.jdbtable.JDBTable tbBaseTinta;
    private javax.swing.JTextField txtAnoFinal;
    private javax.swing.JTextField txtAnoInicial;
    private lib.jdb.control.jdbtextfield.JDBTextField txtBase;
    private lib.jdb.control.jdbtextfield.JDBTextField txtCategoria;
    private lib.jdb.control.jdbtextfield.JDBTextField txtID;
    private lib.jdb.control.jdbtextfield.JDBTextField txtMontadora;
    private lib.jdb.control.jdbtextfield.JDBTextField txtNomeTinta;
    private javax.swing.JFormattedTextField txtQuantidade;
    private javax.swing.JFormattedTextField txtQuantidadeBase;
    private javax.swing.JFormattedTextField txtQuantidadeMin;
    private javax.swing.JTextField txtTipo;
    private lib.jdb.control.jdbtextfield.JDBTextField txtUnidade;
    private lib.jdb.control.jdbtextfield.JDBTextField txtUnidadeBase;
    private javax.swing.JFormattedTextField txtValor;
    private javax.swing.JFormattedTextField txtValorMaisEmbalagem;
    // End of variables declaration//GEN-END:variables
    
    private void alimentarCamposBaseSelecionada(){
        if(cbxAbsoluto.getSelectedIndex() == 1){
            
            valorAcumulado += qryBaseTinta.getCurrentFieldValueAsDouble("quant_recalc_unid_a");
            txtQuantidadeBase.setText(String.format("%.1f", valorAcumulado));
            
            if(qryBaseTinta.getRow() == tbBaseTinta.getRowCount()){
                btnProxBase.setEnabled(false);
            }
        }else{
            txtQuantidadeBase.setText(String.format("%.1f", 
                    qryBaseTinta.getCurrentFieldValueAsDouble("quant_recalc_unid_a") ) );
        }
        
        txtBase.setText(qryBaseTinta.getCurrentFieldValueAsString("cod_base"));
        txtUnidadeBase.setText(qryBaseTinta.getCurrentFieldValueAsString("unidade_base_producao"));
    }
    
    private void enviarTransacao(String sql){
        updTransacao.setSQL(sql);
        updTransacao.setShowMessageOnError(false);
        
        // Se a transação retornar erro:
        if(!updTransacao.execUpdate()){
            //1451: Violação de foreign key, contém relacionamento
            if(updTransacao.getErrorCode() == 1451){
                JOptionPane.showMessageDialog(this, 
                        "Tinta com relacionamento, não pode ser excluída", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);                
            }
        }
    }
    
    private void carregarQryBaseTinta(int idTinta){
        String quant_recalculada;
        double quantInfo, vezesMenor, precoTotal = 0.0;
        precoCusto = 0.0;
        
        quantInfo = Double.valueOf(txtQuantidade.getText().replaceAll(",", "."));
        
        quant_recalculada = "0.000";
        if(quantInfo != 0.0){
            if(qryTinta.getRow() >= 1){
                vezesMenor = qryTinta.getCurrentFieldValueAsDouble("quantidade_producao") /
                    quantInfo;

                quant_recalculada = "(quantidade / "+ vezesMenor +")";
            }
        }
//        }else{
//            quant_recalculada = "0.000";
//        }

        // quant_recalc_unid_a = unidade producao
        // quant_recalc_unid_b = unidade venda
        qryBaseTinta.setSQL(
                "SELECT "
                    + "id, "
                    + "id_tinta, "
                    + "id_produto, "
                    + "cod_base, "
                    + "quantidade, "
                    + quant_recalculada + " AS 'quant_recalc_unid_a', "
                    + "(" + quant_recalculada + " * razao_unidades) AS 'quant_recalc_unid_b', "
                    + "(" + quant_recalculada + " * razao_unidades) * preco_venda AS 'preco_quant_recalc', "    
                    + "(" + quant_recalculada + " * razao_unidades) * preco_custo AS 'preco_custo_quant_recalc', "
                    + "unidade_base_producao, "
                    + "nome_base, "
                    + "quant_unit_base_producao, "
                    + "unid_quant_unitaria, "
                    + "quantidade_producao, "
                    + "preco_venda, "
                    + "preco_custo, "
                    + "razao_unidades, "
                    + "estoque_atual, "
                    + "comissao, "
                    + "simples_nacional, "
                    + "marca_produto, "
                    + "data_inclusao_base, "
                    + "data_modificacao_base "
                + "FROM vw_bases_tinta_producao "
                        + "WHERE id_tinta  = " + idTinta);

//        System.err.println(qryBaseTinta.getSQL());

        tbBaseTinta.setJDBQuery(qryBaseTinta);

        tbBaseTinta.setInvisibleFields(
                "id id_tinta id_produto quantidade quant_recalc_unid_b "
                + "preco_quant_recalc preco_custo_quant_recalc quant_unit_base_producao "
                + "unid_quant_unitaria quantidade_producao preco_venda preco_custo "
                + "razao_unidades estoque_atual comissao simples_nacional "
                + "data_inclusao_base data_modificacao_base marca_produto");
        tbBaseTinta.setFieldsTitle("cod_base", "CÓDIGO");
        tbBaseTinta.setFieldsTitle("quant_recalc_unid_a", "QUANT.");
        tbBaseTinta.setFieldsTitle("unidade_base_producao", "UNID.");
        tbBaseTinta.setFieldsTitle("nome_base", "DESCRIÇÃO");
        tbBaseTinta.setFieldsWidth("cod_base", 50);
        tbBaseTinta.setFieldsWidth("unidade_base_producao", 20);
        
        qryBaseTinta.execQuery();

        // recuperando preco venda e preco custo da tinta
        qryBaseTinta.first();
        if(qryBaseTinta.getRow() == 1){
            do{
                precoTotal += qryBaseTinta.getCurrentFieldValueAsDouble("preco_quant_recalc");
                precoCusto += qryBaseTinta.getCurrentFieldValueAsDouble("preco_custo_quant_recalc");
            }while(qryBaseTinta.next() != -1);
            qryBaseTinta.first();
        }

        txtValor.setValue(precoTotal);

        calcularValorTotal();
    }
    
    private void carregarQryEmbalagem(){
        qryEmbalagem.setSQL("SELECT id, nome, preco_venda FROM produtos WHERE id_categoria = 3");
        
        cbxEmbalagem.setJDBListQuery(qryEmbalagem);
        cbxEmbalagem.setKeyListField("id");
        cbxEmbalagem.setInvisibleFields("id");
        
        qryEmbalagem.execQuery();
        
        cbxEmbalagem.setSelectedIndex(0);
    }
    
    private void baixarEstoqueProduto(){
        int idProduto;
        double estoque, precoVenda;
        String sql;
        
        precoVenda = Double.valueOf(txtValorMaisEmbalagem.getValue().toString());
        
        qryBaseTinta.first();
        if(qryBaseTinta.getRow() == 1){
            do{
                idProduto = qryBaseTinta.getCurrentFieldValueAsInteger("id_produto");
                estoque = qryBaseTinta.getCurrentFieldValueAsDouble("quant_recalc_unid_b");
                
                sql = String.format(
                    "UPDATE produtos SET estoque = estoque - %s WHERE id = %s",
                        estoque, idProduto);
                
                enviarTransacao(sql);
                
            }while(qryBaseTinta.next() != -1);
//            qryBaseTinta.first();
        }
    }
    
    private boolean verificarEstoqueProduto(){
        qryBaseTinta.first();
        if(qryBaseTinta.getRow() == 1){
            do{
                if(qryBaseTinta.getCurrentFieldValueAsDouble("quant_recalc_unid_b") >
                        qryBaseTinta.getCurrentFieldValueAsDouble("estoque_atual")){
                    
                    JOptionPane.showMessageDialog(this, String.format(
                    "Quantidade em estoque de \n%s \ninsulficiente para produção",
                    qryBaseTinta.getCurrentFieldValueAsString("nome_base")),
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    
                    return false;
                }
            }while(qryBaseTinta.next() != -1);
            qryBaseTinta.first();
        }
                
        return true;
    }
    
    private void limpar(){
        idTinta = 0;
        precoCusto = 0.0;
        valorAcumulado = 0.0;
        
        btnPesquisar.requestFocus();
        
        txtBase.setText("");
        txtQuantidadeBase.setText("");
        txtUnidadeBase.setText("");
        
        txtID.setText("");
        txtNomeTinta.setText("");
        txtAnoFinal.setText("");
        txtAnoInicial.setText("");
        txtTipo.setText("");
        txtMontadora.setText("");
        txtCategoria.setText("");
//        txtQuantidade.setValue(0.0); //substituido por valor padrão
        txtQuantidadeMin.setValue(0.0);
        txtUnidade.setText("");
        txtValor.setValue(0.0);
        txtValorMaisEmbalagem.setValue(0.0);
        
        carregarQryEmbalagem();
        cbxEmbalagem.setSelectedIndex(0);
        
        txtQuantidade.setFocusable(true);
        cbxEmbalagem.setEnabled(true);
        btnPesquisar.setEnabled(true);
        cbxAbsoluto.setEnabled(true);
        btnProxBase.setEnabled(true);
        
        // valores padrão
        cbxAbsoluto.setSelectedIndex(Integer.valueOf(FrmLogin.conf.getValor(3)));
        txtQuantidade.setValue(Double.valueOf(FrmLogin.conf.getValor(4)));
        
        carregarQryEmbalagem();
        
        carregarQryBaseTinta(idTinta);
    }
    
    public void atribuirCampos(){
        idTinta = qryTinta.getCurrentFieldValueAsInteger("id");
        
        txtID.setText(qryTinta.getCurrentFieldValueAsString("cod_tinta"));
        txtNomeTinta.setText(qryTinta.getCurrentFieldValueAsString("nome"));
        txtAnoInicial.setText(qryTinta.getCurrentFieldValueAsString("ano_inicial"));
        txtAnoFinal.setText(qryTinta.getCurrentFieldValueAsString("ano_final"));
        txtTipo.setText(qryTinta.getCurrentFieldValueAsString("tipo"));
        txtMontadora.setText(qryTinta.getCurrentFieldValueAsString("montadora"));
        txtCategoria.setText(qryTinta.getCurrentFieldValueAsString("categoria"));
        txtUnidade.setText(qryTinta.getCurrentFieldValueAsString("unidade"));
        
        cbxEmbalagem.setSelectedIndex(0);
        
//        txtQuantidade.setValue(0.0);  // mudado para padrão
        txtQuantidade.setValue(Double.valueOf(FrmLogin.conf.getValor(4)));
        
        txtValor.setValue(0.0);
        txtValorMaisEmbalagem.setValue(0.0);
        txtQuantidadeMin.setValue(qryTinta.getCurrentFieldValueAsDouble("quantidade_minima"));
        
        carregarQryBaseTinta(idTinta);
    }
    
    private void calcularValorTotal(){
        if(cbxEmbalagem.getSelectedIndex() != 0 && qryEmbalagem.getRow() >= 1){
            txtValorMaisEmbalagem.setValue(
                    Double.valueOf(txtValor.getValue().toString()) + 
                    qryEmbalagem.getCurrentFieldValueAsDouble("preco_venda"));
        }else{
            txtValorMaisEmbalagem.setValue(Double.valueOf(txtValor.getValue().toString()));
        }
    }
}
