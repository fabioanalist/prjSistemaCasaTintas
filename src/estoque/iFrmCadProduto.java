/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package estoque;

import java.text.DecimalFormat;
import java.util.LinkedHashMap;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import lib.jdb.jdbquery.JDBQuery;
import lib.jdb.jdbupdate.JDBUpdate;
import principal.FrmLogin;

/**
 *
 * @author patri
 */
public class iFrmCadProduto extends javax.swing.JInternalFrame {
    private JDBQuery qryProduto, qryUnidade, qryUnidadeProd, qryCategoria, qryMarca;
    private boolean alteracao = false;
    private int id;
    
    /**
     * Creates new form iFrmCadProduto
     */
    public iFrmCadProduto() {        
        qryProduto = new JDBQuery();
        qryProduto.setJDBConnection(principal.Principal.conexao.getConexao());
        qryProduto.setLanguage("pt");
        qryProduto.setDecimalFormat("0.000000");
        
        qryUnidade = new JDBQuery();
        qryUnidade.setJDBConnection(principal.Principal.conexao.getConexao());
        qryUnidade.setSQL("SELECT sigla FROM unidades");
        qryUnidade.setConcurUpdatable(false);
        
        qryUnidadeProd = new JDBQuery();
        qryUnidadeProd.setJDBConnection(principal.Principal.conexao.getConexao());
        qryUnidadeProd.setSQL("SELECT sigla FROM unidades");
        qryUnidadeProd.setConcurUpdatable(false);
        
        qryCategoria = new JDBQuery();
        qryCategoria.setJDBConnection(principal.Principal.conexao.getConexao());
        qryCategoria.setSQL("SELECT id, descricao FROM categorias_produto");
        qryCategoria.setConcurUpdatable(false);
        
        qryMarca = new JDBQuery();
        qryMarca.setJDBConnection(principal.Principal.conexao.getConexao());
        qryMarca.setSQL("SELECT id, descricao FROM marcas");
        qryMarca.setConcurUpdatable(false);
        
        initComponents();
        
        qryUnidade.execQuery();
        qryUnidadeProd.execQuery();
        qryCategoria.execQuery();
        qryMarca.execQuery();
        
        limpar();
        
        //criando mascara e atribuindo formato aos formattedTextField
//        DecimalFormat decimal = new DecimalFormat("#,###,##0.00#"); // original
        DecimalFormat decimal = new DecimalFormat("######0.000");        
        NumberFormatter numFormatter = new NumberFormatter(decimal);
        numFormatter.setFormat(decimal);
        numFormatter.setAllowsInvalid(false);
        DefaultFormatterFactory dfFactory = new DefaultFormatterFactory(numFormatter);
        
        txtQuantProducao.setFormatterFactory(dfFactory);
        txtEstoque.setFormatterFactory(dfFactory);
        txtCusto.setFormatterFactory(dfFactory);
        txtIPI.setFormatterFactory(dfFactory);
        txtICMS.setFormatterFactory(dfFactory);
        txtDiferencaICMS.setFormatterFactory(dfFactory);
        txtFrete.setFormatterFactory(dfFactory);
        txtMargem.setFormatterFactory(dfFactory);
        txtSimplesNacional.setFormatterFactory(dfFactory);
        txtComissao.setFormatterFactory(dfFactory);
        
        txtQuantUnitaria.setFormatterFactory(dfFactory);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Painel = new javax.swing.JPanel();
        pnCodigo = new javax.swing.JPanel();
        txtID = new lib.jdb.control.jdbtextfield.JDBTextField();
        lblNome = new javax.swing.JLabel();
        txtNome = new lib.jdb.control.jdbtextfield.JDBTextField();
        lblCodBarra = new javax.swing.JLabel();
        txtCodBarra = new lib.jdb.control.jdbtextfield.JDBTextField();
        lblCodFornec = new javax.swing.JLabel();
        txtCodFornec = new lib.jdb.control.jdbtextfield.JDBTextField();
        lblCategoria = new javax.swing.JLabel();
        lblMarca = new javax.swing.JLabel();
        Painel1 = new javax.swing.JPanel();
        lblCusto = new javax.swing.JLabel();
        lblIPI = new javax.swing.JLabel();
        lblICMS = new javax.swing.JLabel();
        lblDiferencaICMS = new javax.swing.JLabel();
        lblSimplesNacional = new javax.swing.JLabel();
        lblFrete = new javax.swing.JLabel();
        lblPrecoVenda = new javax.swing.JLabel();
        lblComissao = new javax.swing.JLabel();
        lblDataValidade = new javax.swing.JLabel();
        lblMargem = new javax.swing.JLabel();
        lblEstoque = new javax.swing.JLabel();
        lblUnidade = new javax.swing.JLabel();
        lblCustoFinal = new javax.swing.JLabel();
        cbxUnidade = new lib.jdb.control.jdblistcombobox.JDBListComboBox();
        txtEstoque = new javax.swing.JFormattedTextField();
        txtCustoFinal = new javax.swing.JFormattedTextField();
        txtPrecoVenda = new javax.swing.JFormattedTextField();
        calValidade = new lib.jdb.control.jdbcalendar.JDBCalendar();
        txtCusto = new javax.swing.JFormattedTextField();
        txtIPI = new javax.swing.JFormattedTextField();
        txtICMS = new javax.swing.JFormattedTextField();
        txtDiferencaICMS = new javax.swing.JFormattedTextField();
        txtFrete = new javax.swing.JFormattedTextField();
        txtMargem = new javax.swing.JFormattedTextField();
        txtSimplesNacional = new javax.swing.JFormattedTextField();
        txtComissao = new javax.swing.JFormattedTextField();
        btnSalvar = new lib.jdb.control.jdbbuttonsave.JDBButtonSave();
        btnConsultar = new javax.swing.JButton();
        btnCancelar = new lib.jdb.control.jdbbuttoncancel.JDBButtonCancel();
        pnlProducao = new javax.swing.JPanel();
        lblCodBarra1 = new javax.swing.JLabel();
        lblMarca1 = new javax.swing.JLabel();
        cbxUnidadeProducao = new lib.jdb.control.jdblistcombobox.JDBListComboBox();
        txtQuantProducao = new javax.swing.JFormattedTextField();
        txtQuantUnitaria = new javax.swing.JFormattedTextField();
        lblCodBarra2 = new javax.swing.JLabel();
        lblQuantUnitaria = new javax.swing.JLabel();
        cbxMarca = new lib.jdb.control.jdblistcombobox.JDBListComboBox();
        cbxCategoria = new lib.jdb.control.jdblistcombobox.JDBListComboBox();
        pnDatas = new javax.swing.JPanel();
        lblInc = new javax.swing.JLabel();
        txtInc = new lib.jdb.control.jdbtextfield.JDBTextField();
        lblMod = new javax.swing.JLabel();
        txtMod = new lib.jdb.control.jdbtextfield.JDBTextField();
        btnRemover = new javax.swing.JButton();
        chbFracionada = new javax.swing.JCheckBox();

        setClosable(true);
        setIconifiable(true);
        setTitle("Cadastro de Produto");
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        Painel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)));

        pnCodigo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "Código", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        txtID.setFocusable(false);
        txtID.setFont(principal.FrmLogin.fontePadrao);
        txtID.setNextFocusableComponent(txtNome);

        javax.swing.GroupLayout pnCodigoLayout = new javax.swing.GroupLayout(pnCodigo);
        pnCodigo.setLayout(pnCodigoLayout);
        pnCodigoLayout.setHorizontalGroup(
            pnCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCodigoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtID, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnCodigoLayout.setVerticalGroup(
            pnCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCodigoLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        lblNome.setFont(principal.FrmLogin.fontePadrao);
        lblNome.setText("Nome:");

        txtNome.setFont(principal.FrmLogin.fontePadrao);
        txtNome.setNextFocusableComponent(txtCodBarra);

        lblCodBarra.setFont(principal.FrmLogin.fontePadrao);
        lblCodBarra.setText("Cod. de Barra:");

        txtCodBarra.setFont(principal.FrmLogin.fontePadrao);

        lblCodFornec.setFont(principal.FrmLogin.fontePadrao);
        lblCodFornec.setText("Cod. de Fornecedor:");

        txtCodFornec.setFont(principal.FrmLogin.fontePadrao);
        txtCodFornec.setToolTipText("Quando o produto for uma base ou uma tinta produzida, este código será sua referência");

        lblCategoria.setFont(principal.FrmLogin.fontePadrao);
        lblCategoria.setText("Categoria:");

        lblMarca.setFont(principal.FrmLogin.fontePadrao);
        lblMarca.setText("Marca:");

        Painel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)));

        lblCusto.setFont(principal.FrmLogin.fontePadrao);
        lblCusto.setText("Custo(R$):");

        lblIPI.setFont(principal.FrmLogin.fontePadrao);
        lblIPI.setText("IPI(%):");

        lblICMS.setFont(principal.FrmLogin.fontePadrao);
        lblICMS.setText("ICMS ST(%):");

        lblDiferencaICMS.setFont(principal.FrmLogin.fontePadrao);
        lblDiferencaICMS.setText("Diferença ICMS(%):");

        lblSimplesNacional.setFont(principal.FrmLogin.fontePadrao);
        lblSimplesNacional.setText("Simples Nacional(%):");

        lblFrete.setFont(principal.FrmLogin.fontePadrao);
        lblFrete.setText("Frete(%):");

        lblPrecoVenda.setFont(principal.FrmLogin.fontePadrao);
        lblPrecoVenda.setText("Preço de Venda(R$):");

        lblComissao.setFont(principal.FrmLogin.fontePadrao);
        lblComissao.setText("Comissão(%):");

        lblDataValidade.setFont(principal.FrmLogin.fontePadrao);
        lblDataValidade.setText("Data de Validade:");

        lblMargem.setFont(principal.FrmLogin.fontePadrao);
        lblMargem.setText("Margem(%):");

        lblEstoque.setFont(principal.FrmLogin.fontePadrao);
        lblEstoque.setText("Estoque:");

        lblUnidade.setFont(principal.FrmLogin.fontePadrao);
        lblUnidade.setText("Unidade:");

        lblCustoFinal.setFont(principal.FrmLogin.fontePadrao);
        lblCustoFinal.setText("Custo Final(R$):");

        cbxUnidade.setJDBListQuery(qryUnidade);
        cbxUnidade.setFont(principal.FrmLogin.fontePadrao);
        cbxUnidade.setKeyListField("sigla");
        cbxUnidade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxUnidadeFocusLost(evt);
            }
        });

        txtEstoque.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));

        txtCustoFinal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtCustoFinal.setFocusable(false);

        txtPrecoVenda.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtPrecoVenda.setFocusable(false);

        calValidade.setDateFormat("dd/MM/yyyy");
        calValidade.setNextFocusableComponent(btnSalvar);
        calValidade.setTextEditable(false);

        txtCusto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtCusto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCustoFocusLost(evt);
            }
        });

        txtIPI.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtIPI.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIPIFocusLost(evt);
            }
        });

        txtICMS.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtICMS.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtICMSFocusLost(evt);
            }
        });

        txtDiferencaICMS.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtDiferencaICMS.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDiferencaICMSFocusLost(evt);
            }
        });

        txtFrete.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtFrete.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFreteFocusLost(evt);
            }
        });

        txtMargem.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtMargem.setToolTipText("Porcentagem aplicada sobre o preço de venda");
        txtMargem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMargemFocusLost(evt);
            }
        });

        txtSimplesNacional.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtSimplesNacional.setToolTipText("Porcentagem aplicada sobre o preço de venda");
        txtSimplesNacional.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSimplesNacionalFocusLost(evt);
            }
        });

        txtComissao.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtComissao.setToolTipText("Porcentagem aplicada sobre o preço de venda");
        txtComissao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtComissaoFocusLost(evt);
            }
        });

        javax.swing.GroupLayout Painel1Layout = new javax.swing.GroupLayout(Painel1);
        Painel1.setLayout(Painel1Layout);
        Painel1Layout.setHorizontalGroup(
            Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Painel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Painel1Layout.createSequentialGroup()
                        .addGroup(Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCusto)
                            .addComponent(lblEstoque)
                            .addComponent(lblMargem)
                            .addComponent(lblFrete)
                            .addComponent(lblICMS)
                            .addComponent(lblComissao)
                            .addComponent(txtEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCusto, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtICMS, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFrete, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMargem, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtComissao, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Painel1Layout.createSequentialGroup()
                                .addComponent(lblUnidade)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(Painel1Layout.createSequentialGroup()
                                .addGroup(Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtPrecoVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtCustoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cbxUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblIPI)
                                            .addGroup(Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(lblCustoFinal)
                                                .addComponent(lblPrecoVenda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lblSimplesNacional, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lblDiferencaICMS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                    .addComponent(txtIPI, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDiferencaICMS, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSimplesNacional, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10))))
                    .addGroup(Painel1Layout.createSequentialGroup()
                        .addGroup(Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDataValidade)
                            .addComponent(calValidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        Painel1Layout.setVerticalGroup(
            Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Painel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEstoque)
                    .addComponent(lblUnidade))
                .addGap(6, 6, 6)
                .addGroup(Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCusto)
                    .addComponent(lblIPI, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(6, 6, 6)
                .addGroup(Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCusto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Painel1Layout.createSequentialGroup()
                        .addComponent(lblDiferencaICMS)
                        .addGap(6, 6, 6)
                        .addGroup(Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtICMS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDiferencaICMS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblICMS))
                .addGap(10, 10, 10)
                .addGroup(Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFrete)
                    .addComponent(lblCustoFinal))
                .addGap(6, 6, 6)
                .addGroup(Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCustoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFrete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMargem)
                    .addComponent(lblSimplesNacional))
                .addGap(6, 6, 6)
                .addGroup(Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMargem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSimplesNacional, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblComissao)
                    .addComponent(lblPrecoVenda))
                .addGap(6, 6, 6)
                .addGroup(Painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrecoVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtComissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblDataValidade)
                .addGap(6, 6, 6)
                .addComponent(calValidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.png"))); // NOI18N
        btnSalvar.setMnemonic('s');
        btnSalvar.setFont(principal.FrmLogin.fontePadrao);
        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnConsultar.setFont(principal.FrmLogin.fontePadrao);
        btnConsultar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/look.png"))); // NOI18N
        btnConsultar.setMnemonic('c');
        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/return2.png"))); // NOI18N
        btnCancelar.setMnemonic('l');
        btnCancelar.setFont(principal.FrmLogin.fontePadrao);
        btnCancelar.setText("Limpar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        pnlProducao.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "Produção", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        lblCodBarra1.setFont(principal.FrmLogin.fontePadrao);
        lblCodBarra1.setText("Quantidade:");
        lblCodBarra1.setEnabled(false);

        lblMarca1.setFont(principal.FrmLogin.fontePadrao);
        lblMarca1.setText("Unidade:");
        lblMarca1.setEnabled(false);

        cbxUnidadeProducao.setJDBListQuery(qryUnidadeProd);
        cbxUnidadeProducao.setEnabled(false);
        cbxUnidadeProducao.setKeyListField("sigla");

        txtQuantProducao.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtQuantProducao.setToolTipText("Quantidade na unidade de produção");
        txtQuantProducao.setEnabled(false);

        txtQuantUnitaria.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtQuantUnitaria.setToolTipText("Quantidade na unidade de venda");
        txtQuantUnitaria.setEnabled(false);

        lblCodBarra2.setFont(principal.FrmLogin.fontePadrao);
        lblCodBarra2.setText("Quant. Unitária base produção:");
        lblCodBarra2.setEnabled(false);

        lblQuantUnitaria.setText("Unidade");

        javax.swing.GroupLayout pnlProducaoLayout = new javax.swing.GroupLayout(pnlProducao);
        pnlProducao.setLayout(pnlProducaoLayout);
        pnlProducaoLayout.setHorizontalGroup(
            pnlProducaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProducaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlProducaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlProducaoLayout.createSequentialGroup()
                        .addGroup(pnlProducaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCodBarra1)
                            .addComponent(txtQuantProducao, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlProducaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlProducaoLayout.createSequentialGroup()
                                .addComponent(lblMarca1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(cbxUnidadeProducao, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)))
                    .addGroup(pnlProducaoLayout.createSequentialGroup()
                        .addGroup(pnlProducaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblCodBarra2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtQuantUnitaria))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblQuantUnitaria)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlProducaoLayout.setVerticalGroup(
            pnlProducaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProducaoLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(pnlProducaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlProducaoLayout.createSequentialGroup()
                        .addComponent(lblMarca1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxUnidadeProducao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlProducaoLayout.createSequentialGroup()
                        .addComponent(lblCodBarra1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtQuantProducao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCodBarra2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlProducaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQuantUnitaria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblQuantUnitaria))
                .addGap(5, 5, 5))
        );

        cbxMarca.setJDBListQuery(qryMarca);
        cbxMarca.setFont(principal.FrmLogin.fontePadrao);
        cbxMarca.setInvisibleFields("id");
        cbxMarca.setKeyListField("id");
        cbxMarca.setNextFocusableComponent(txtEstoque);
        cbxMarca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxMarcaActionPerformed(evt);
            }
        });

        cbxCategoria.setJDBListQuery(qryCategoria);
        cbxCategoria.setFont(principal.FrmLogin.fontePadrao);
        cbxCategoria.setInvisibleFields("id");
        cbxCategoria.setKeyListField("id");
        cbxCategoria.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxCategoriaFocusLost(evt);
            }
        });

        pnDatas.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "Datas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        lblInc.setFont(principal.FrmLogin.fontePadrao);
        lblInc.setText("Inclusão:");

        txtInc.setFocusable(false);

        lblMod.setFont(principal.FrmLogin.fontePadrao);
        lblMod.setText("Modificação:");

        txtMod.setFocusable(false);

        javax.swing.GroupLayout pnDatasLayout = new javax.swing.GroupLayout(pnDatas);
        pnDatas.setLayout(pnDatasLayout);
        pnDatasLayout.setHorizontalGroup(
            pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDatasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblInc)
                    .addComponent(txtInc, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addGroup(pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnDatasLayout.createSequentialGroup()
                        .addComponent(lblMod)
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnDatasLayout.createSequentialGroup()
                        .addComponent(txtMod, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        pnDatasLayout.setVerticalGroup(
            pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnDatasLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnDatasLayout.createSequentialGroup()
                        .addComponent(lblMod)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnDatasLayout.createSequentialGroup()
                        .addComponent(lblInc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtInc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5))
        );

        btnRemover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete.png"))); // NOI18N
        btnRemover.setMnemonic('r');
        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed1(evt);
            }
        });

        chbFracionada.setText("Quant. fracionada");

        javax.swing.GroupLayout PainelLayout = new javax.swing.GroupLayout(Painel);
        Painel.setLayout(PainelLayout);
        PainelLayout.setHorizontalGroup(
            PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlProducao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtCodBarra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbxCategoria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnDatas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbxMarca, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMarca)
                                    .addComponent(lblCodBarra)
                                    .addComponent(lblCodFornec)
                                    .addComponent(lblCategoria))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addComponent(txtCodFornec, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(chbFracionada)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Painel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addComponent(pnCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addComponent(lblNome)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtNome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(10, 10, 10))
            .addGroup(PainelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnConsultar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRemover)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PainelLayout.setVerticalGroup(
            PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addComponent(lblNome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addComponent(lblCodBarra)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCodBarra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCodFornec)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCodFornec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chbFracionada))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCategoria)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pnlProducao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblMarca)
                        .addGap(5, 5, 5)
                        .addComponent(cbxMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pnDatas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Painel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConsultar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        txtNome.requestFocus();
        
        // campos para combobox sendo texto visual e o nome campo do banco referente.
        LinkedHashMap<String, String> combo = new LinkedHashMap<>();
        combo.put("Nome", "nome");
        combo.put("Código", "id");
        combo.put("Código de barra","codigo_barra");
        combo.put("Categoria", "categoria");
        
        // titulos para as colunas da tabela, sendo texto visual e nome campo do banco referente.
        LinkedHashMap<String, String> titulo = new LinkedHashMap<>();
        titulo.put("CÓD", "id");
        titulo.put("NOME", "nome");
        titulo.put("CÓD.BARRA", "codigo_barra");
        titulo.put("ESTOQUE", "estoque");
        titulo.put("UN", "sigla_unidade");
        titulo.put("CATEGORIA", "categoria");

        // campos que deseja deixar invisível, pode-se omitir.
        String[] invisivel = {
            "codigo_fornecedor",
            "id_categoria",
            "id_marca",
            "marca",
            "quantidade_producao",
            "unidade_producao",
            "quantidade_unitaria",
            "fracionado",
            "preco_custo",
            "ipi",
            "icms_st",
            "diferenca_icms",
            "simples_nacional",
            "frete",
            "margem",
            "comissao",
            "preco_venda",
            "data_validade",
            "data_inclusao", 
            "data_modificacao"};

        // tamanho das colunas visíveis, pode-se omitir.
        int[] tamanho = {50, 150, 110, 75, 30, 100};
        
        pesquisa.iFrmPesquisa produtos;
        produtos = new pesquisa.iFrmPesquisa(this,
                "Pesquisa de Produtos",
                principal.Principal.conexao.getConexao(),
                qryProduto,
                "id",
                combo,
                titulo,
                "SELECT id, nome, codigo_barra, codigo_fornecedor, "
                + "id_marca, marca, estoque, "
                + "sigla_unidade, quantidade_unitaria, quantidade_producao, unidade_producao,"
                + "fracionado, preco_custo, ipi, icms_st, diferenca_icms, "
                + "simples_nacional, frete, margem, preco_venda, "
                + "comissao, data_validade, data_inclusao, data_modificacao, "
                + "id_categoria, categoria " +
                "FROM vw_produtos",
                invisivel,
                tamanho);

        
        principal.FrmPrincipal.Desktop.add(produtos);
        produtos.setVisible(true);                        
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        limpar();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        //permissão de usuário
        if(FrmLogin.usuario.verificarPermissao(this, 1)){

            if(txtNome.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, 
                        "Informe um nome", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
                txtNome.requestFocus();
            }else if(txtNome.getText().length() > 100){
                JOptionPane.showMessageDialog(this, 
                        "Nome deve ter no máximo 100 caracteres", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
                txtNome.requestFocus();
            }else if(cbxCategoria.getSelectedIndex() == 0){
                JOptionPane.showMessageDialog(this, 
                        "Selecione uma categoria", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
                cbxCategoria.requestFocus();
            }else if(cbxMarca.getSelectedIndex() == 0){
                JOptionPane.showMessageDialog(this, 
                        "Selecione uma marca", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
                cbxMarca.requestFocus();
            }else if(txtEstoque.getText().equals("0,000")){
                JOptionPane.showMessageDialog(this, 
                        "Informe uma quantidade de estoque", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
                txtEstoque.requestFocus();
            }else if(!chbFracionada.isSelected() && 
                    sistema.Verificador.decimal(Double.valueOf(txtEstoque.getValue().toString()))){
                JOptionPane.showMessageDialog(this, 
                        "Estoque deve ser um inteiro", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
                txtEstoque.requestFocus();
            }else if(cbxUnidade.getSelectedIndex() == 0){
                JOptionPane.showMessageDialog(this, 
                        "Selecione uma unidade", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
                cbxUnidade.requestFocus();
            }else if(txtQuantProducao.isEnabled() && txtQuantProducao.getText().equals("0,000")){
                JOptionPane.showMessageDialog(this, 
                        "Informe uma quantidade de produção", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
                txtQuantProducao.requestFocus();
            }else if(cbxUnidadeProducao.isEnabled() && cbxUnidadeProducao.getSelectedIndex() == 0){
                JOptionPane.showMessageDialog(this, 
                    "Selecione uma unidade de produção", "Atenção", 
                    JOptionPane.INFORMATION_MESSAGE);
                cbxUnidadeProducao.requestFocus();
            }else if(txtCusto.getText().equals("0,000")){
                JOptionPane.showMessageDialog(this, 
                        "Informe um preço de custo", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
                txtCusto.requestFocus();
            }else if(txtMargem.getText().equals("0,000")){
                JOptionPane.showMessageDialog(this, 
                        "Informe uma margem de lucro", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
                txtMargem.requestFocus();
            }else if(txtPrecoVenda.getText().equals("0,000")){
                JOptionPane.showMessageDialog(this, 
                        "Informe um preço de venda", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
                txtPrecoVenda.requestFocus();
            }else if(calValidade.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, 
                        "Selecione uma data de validade", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
                calValidade.requestFocus();
            }else{
                String sql;
                if(alteracao){
                    if(sistema.Mensagem.showConfirmDialog(this,
                        "Deseja realmente alterar este Produto?", "Confirmação") == 0){

                        sql = String.format(
                              "UPDATE produtos "
                                + "SET nome='%s',"
                                    + "codigo_barra=%s,"
                                    + "codigo_fornecedor=%s,"
                                    + "id_categoria='%s',"
                                    + "id_marca='%s',"
                                    + "estoque='%s',"
                                    + "sigla_unidade='%s',"
                                    + "quantidade_unitaria='%s',"
                                    + "quantidade_producao=%s,"
                                    + "unidade_producao=%s,"
                                    + "fracionado='%s',"
                                    + "preco_custo='%s',"
                                    + "ipi='%s',"
                                    + "icms_st='%s',"
                                    + "diferenca_icms='%s',"
                                    + "simples_nacional='%s',"
                                    + "frete='%s',"
                                    + "margem='%s',"
                                    + "preco_venda='%s',"
                                    + "comissao='%s',"
                                    + "data_validade='%s' "
                                + "WHERE id = '%s'", 
                              txtNome.getText(),
                              txtCodBarra.getText().isEmpty()?"NULL":"'"+txtCodBarra.getText()+"'",
                              txtCodFornec.getText().isEmpty()?"NULL":"'"+txtCodFornec.getText()+"'",
                              qryCategoria.getCurrentFieldValueAsString("id"),
                              qryMarca.getCurrentFieldValueAsString("id"),
                              txtEstoque.getValue(),
                              qryUnidade.getCurrentFieldValueAsString("sigla"),
                              Double.valueOf(txtQuantUnitaria.getValue().toString()) == 0.0?
                                      1:txtQuantUnitaria.getValue(),
                              txtQuantProducao.getText().equals("0,000")?
                                      "NULL":"'"+txtQuantProducao.getValue()+"'",
                              cbxUnidadeProducao.getSelectedIndex() == 0?
                                      "NULL":"'"+qryUnidadeProd.getCurrentFieldValueAsString("sigla")+"'",
                              chbFracionada.isSelected()?1:0,
                              txtCusto.getValue(),
                              txtIPI.getValue(),
                              txtICMS.getValue(),
                              txtDiferencaICMS.getValue(),
                              txtSimplesNacional.getValue(),
                              txtFrete.getValue(),
                              txtMargem.getValue(),
                              txtPrecoVenda.getValue(),
                              txtComissao.getValue(),
                              calValidade.getDateAsString(),
                              id);

                        if(enviarTransacao(sql)){
                        
                            // registro de log
                            FrmLogin.log.gravar(FrmLogin.usuario.getNomeUsuario(), 
                                    this, String.valueOf(id), 2);
                        }
                    }
                }else{
                    sql = String.format(
                         "INSERT INTO produtos("
                            + "nome, "
                            + "codigo_barra, "
                            + "codigo_fornecedor, "
                            + "id_categoria, "
                            + "id_marca, "
                            + "estoque, "
                            + "sigla_unidade, "
                            + "quantidade_unitaria, "
                            + "quantidade_producao, "
                            + "unidade_producao, "
                            + "fracionado, "
                            + "preco_custo, "
                            + "ipi, "
                            + "icms_st, "
                            + "diferenca_icms, "
                            + "simples_nacional, "
                            + "frete, "
                            + "margem, "
                            + "preco_venda, "
                            + "comissao, "
                            + "data_validade)"
                        + " VALUES ("
                            + "'%s',%s,%s,'%s','%s','%s','%s','%s',%s,%s,'%s',"
                            + "'%s','%s','%s','%s','%s','%s','%s','%s','%s','%s')",
                            txtNome.getText(),
                              txtCodBarra.getText().isEmpty()?"NULL":"'"+txtCodBarra.getText()+"'",
                              txtCodFornec.getText().isEmpty()?"NULL":"'"+txtCodFornec.getText()+"'",
                              qryCategoria.getCurrentFieldValueAsString("id"),
                              qryMarca.getCurrentFieldValueAsString("id"),
                              txtEstoque.getValue(),
                              qryUnidade.getCurrentFieldValueAsString("sigla"),
                              Double.valueOf(txtQuantUnitaria.getValue().toString()) == 0.0?
                                      1:txtQuantUnitaria.getValue(),
                              txtQuantProducao.getText().equals("0,000")?
                                      "NULL":"'"+txtQuantProducao.getValue()+"'",
                              cbxUnidadeProducao.getSelectedIndex() == 0?
                                      "NULL":"'"+qryUnidadeProd.getCurrentFieldValueAsString("sigla")+"'",
                              chbFracionada.isSelected()?1:0,
                              txtCusto.getValue(),
                              txtIPI.getValue(),
                              txtICMS.getValue(),
                              txtDiferencaICMS.getValue(),
                              txtSimplesNacional.getValue(),
                              txtFrete.getValue(),
                              txtMargem.getValue(),
                              txtPrecoVenda.getValue(),
                              txtComissao.getValue(),
                              calValidade.getDateAsString());

                    if(enviarTransacao(sql)){
                    
                        JDBQuery temp = new JDBQuery();
                        temp.setJDBConnection(principal.Principal.conexao.getConexao());
                        temp.setSQL("SELECT LAST_INSERT_ID()");
                        temp.execQuery();
                        String id = temp.getCurrentFieldValueAsString(1);

                        // registro de log
                        FrmLogin.log.gravar(FrmLogin.usuario.getNomeUsuario(), 
                                this, id, 1);
                    }
                }

                limpar();
            }
        }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void cbxCategoriaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbxCategoriaFocusLost
        // Se a categoria de produto NÃO for base de tinta:
        boolean ativo = false;
        if(cbxCategoria.getSelectedIndex() != 0){
            ativo = qryCategoria.getCurrentFieldValueAsInteger("id") == 1;
        }
        
        for(int i=0; i<pnlProducao.getComponentCount(); i++){
            pnlProducao.getComponent(i).setEnabled(ativo);
        }
        
        if(ativo){
            txtQuantProducao.requestFocus();
        }else{
            txtQuantProducao.setValue(0.0);
            cbxUnidadeProducao.setSelectedIndex(0);
        }
    }//GEN-LAST:event_cbxCategoriaFocusLost

    private void txtCustoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCustoFocusLost
        alimentarCustoFinal();
        alimentarPrecoVenda();
    }//GEN-LAST:event_txtCustoFocusLost

    private void txtIPIFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIPIFocusLost
        alimentarCustoFinal();
        alimentarPrecoVenda();
    }//GEN-LAST:event_txtIPIFocusLost

    private void txtICMSFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtICMSFocusLost
        alimentarCustoFinal();
        alimentarPrecoVenda();
    }//GEN-LAST:event_txtICMSFocusLost

    private void txtDiferencaICMSFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDiferencaICMSFocusLost
        alimentarCustoFinal();
        alimentarPrecoVenda();
    }//GEN-LAST:event_txtDiferencaICMSFocusLost

    private void txtFreteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFreteFocusLost
        alimentarCustoFinal();
        alimentarPrecoVenda();
    }//GEN-LAST:event_txtFreteFocusLost

    private void txtMargemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMargemFocusLost
        alimentarCustoFinal();
        alimentarPrecoVenda();
    }//GEN-LAST:event_txtMargemFocusLost

    private void txtSimplesNacionalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSimplesNacionalFocusLost
        alimentarCustoFinal();
        alimentarPrecoVenda();
    }//GEN-LAST:event_txtSimplesNacionalFocusLost

    private void txtComissaoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtComissaoFocusLost
        alimentarCustoFinal();
        alimentarPrecoVenda();
    }//GEN-LAST:event_txtComissaoFocusLost

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        
    }//GEN-LAST:event_btnRemoverActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        qryUnidade.execQuery();
        qryUnidadeProd.execQuery();
        qryCategoria.execQuery();
        qryMarca.execQuery();
    }//GEN-LAST:event_formFocusGained

    private void cbxMarcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxMarcaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxMarcaActionPerformed

    private void btnRemoverActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed1
        if(FrmLogin.usuario.verificarPermissao(this, 2)){

            if(alteracao){
                if(sistema.Mensagem.showConfirmDialog(this,
                        "Deseja realmente excluir este produto?", "Confirmação") == 0){

                    String sql = String.format("DELETE FROM produtos WHERE id = '%s'", id);

                    if(enviarTransacao(sql)){
                    
                        // registro de log
                        FrmLogin.log.gravar(FrmLogin.usuario.getNomeUsuario(),
                                    this, String.valueOf(id), 3);
                    }
                    
                    limpar();
                }
            }else{
                JOptionPane.showMessageDialog(this, 
                        "Consulte um produto para excluir", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);

                btnConsultar.requestFocus();
            }
        }
    }//GEN-LAST:event_btnRemoverActionPerformed1

    private void cbxUnidadeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbxUnidadeFocusLost
        lblQuantUnitaria.setText(qryUnidade.getCurrentFieldValueAsString("sigla"));
    }//GEN-LAST:event_cbxUnidadeFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Painel;
    private javax.swing.JPanel Painel1;
    private lib.jdb.control.jdbbuttoncancel.JDBButtonCancel btnCancelar;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnRemover;
    private lib.jdb.control.jdbbuttonsave.JDBButtonSave btnSalvar;
    private lib.jdb.control.jdbcalendar.JDBCalendar calValidade;
    private lib.jdb.control.jdblistcombobox.JDBListComboBox cbxCategoria;
    private lib.jdb.control.jdblistcombobox.JDBListComboBox cbxMarca;
    private lib.jdb.control.jdblistcombobox.JDBListComboBox cbxUnidade;
    private lib.jdb.control.jdblistcombobox.JDBListComboBox cbxUnidadeProducao;
    private javax.swing.JCheckBox chbFracionada;
    private javax.swing.JLabel lblCategoria;
    private javax.swing.JLabel lblCodBarra;
    private javax.swing.JLabel lblCodBarra1;
    private javax.swing.JLabel lblCodBarra2;
    private javax.swing.JLabel lblCodFornec;
    private javax.swing.JLabel lblComissao;
    private javax.swing.JLabel lblCusto;
    private javax.swing.JLabel lblCustoFinal;
    private javax.swing.JLabel lblDataValidade;
    private javax.swing.JLabel lblDiferencaICMS;
    private javax.swing.JLabel lblEstoque;
    private javax.swing.JLabel lblFrete;
    private javax.swing.JLabel lblICMS;
    private javax.swing.JLabel lblIPI;
    private javax.swing.JLabel lblInc;
    private javax.swing.JLabel lblMarca;
    private javax.swing.JLabel lblMarca1;
    private javax.swing.JLabel lblMargem;
    private javax.swing.JLabel lblMod;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblPrecoVenda;
    private javax.swing.JLabel lblQuantUnitaria;
    private javax.swing.JLabel lblSimplesNacional;
    private javax.swing.JLabel lblUnidade;
    private javax.swing.JPanel pnCodigo;
    private javax.swing.JPanel pnDatas;
    private javax.swing.JPanel pnlProducao;
    private lib.jdb.control.jdbtextfield.JDBTextField txtCodBarra;
    private lib.jdb.control.jdbtextfield.JDBTextField txtCodFornec;
    private javax.swing.JFormattedTextField txtComissao;
    private javax.swing.JFormattedTextField txtCusto;
    private javax.swing.JFormattedTextField txtCustoFinal;
    private javax.swing.JFormattedTextField txtDiferencaICMS;
    private javax.swing.JFormattedTextField txtEstoque;
    private javax.swing.JFormattedTextField txtFrete;
    private javax.swing.JFormattedTextField txtICMS;
    private lib.jdb.control.jdbtextfield.JDBTextField txtID;
    private javax.swing.JFormattedTextField txtIPI;
    private lib.jdb.control.jdbtextfield.JDBTextField txtInc;
    private javax.swing.JFormattedTextField txtMargem;
    private lib.jdb.control.jdbtextfield.JDBTextField txtMod;
    private lib.jdb.control.jdbtextfield.JDBTextField txtNome;
    private javax.swing.JFormattedTextField txtPrecoVenda;
    private javax.swing.JFormattedTextField txtQuantProducao;
    private javax.swing.JFormattedTextField txtQuantUnitaria;
    private javax.swing.JFormattedTextField txtSimplesNacional;
    // End of variables declaration//GEN-END:variables
    
    public void atribuirCampos(){
        int id;
        String nome, codigoBarra, codigoFornecedor,
                idMarca, siglaUnidade, unidadeProducao,
                dataValidade,inclusao, modificacao, idCategoria;
        double quantidadeProducao, precoCusto, ipi, icms, diferencaIcms, 
                simplesNacional, frete, margem, precoVenda,
                comissao, estoque, quantUnitaria;
        
        id = qryProduto.getCurrentFieldValueAsInteger("id");
        nome = qryProduto.getCurrentFieldValueAsString("nome");
        codigoBarra = qryProduto.getCurrentFieldValueAsString("codigo_barra");
        codigoFornecedor = qryProduto.getCurrentFieldValueAsString("codigo_fornecedor");
        idMarca = qryProduto.getCurrentFieldValueAsString("id_marca");
        estoque = qryProduto.getCurrentFieldValueAsDouble("estoque");
        siglaUnidade = qryProduto.getCurrentFieldValueAsString("sigla_unidade");
        quantidadeProducao = qryProduto.getCurrentFieldValueAsFloat("quantidade_producao") == null?
                0:qryProduto.getCurrentFieldValueAsDouble("quantidade_producao");
        // quando no banco for NULL, unidadeProducao recebe null.
        unidadeProducao = qryProduto.getCurrentFieldValueAsString("unidade_producao");
        precoCusto = qryProduto.getCurrentFieldValueAsDouble("preco_custo");
        ipi = qryProduto.getCurrentFieldValueAsDouble("ipi") == null?
                0:qryProduto.getCurrentFieldValueAsDouble("ipi");
        icms = qryProduto.getCurrentFieldValueAsDouble("icms_st") == null?
                0:qryProduto.getCurrentFieldValueAsDouble("icms_st");
        diferencaIcms = qryProduto.getCurrentFieldValueAsDouble("diferenca_icms") == null?
                0:qryProduto.getCurrentFieldValueAsDouble("diferenca_icms");
        simplesNacional = qryProduto.getCurrentFieldValueAsDouble("simples_nacional") == null?
                0:qryProduto.getCurrentFieldValueAsDouble("simples_nacional");
        frete = qryProduto.getCurrentFieldValueAsDouble("frete") == null?
                0:qryProduto.getCurrentFieldValueAsDouble("frete");
        margem = qryProduto.getCurrentFieldValueAsDouble("margem");
        precoVenda = qryProduto.getCurrentFieldValueAsDouble("preco_venda");
        comissao = qryProduto.getCurrentFieldValueAsDouble("comissao") == null?
                0:qryProduto.getCurrentFieldValueAsDouble("comissao");
        dataValidade = qryProduto.getCurrentFieldValueAsString("data_validade");
        idCategoria = qryProduto.getCurrentFieldValueAsString("id_categoria");
        inclusao = qryProduto.getCurrentFieldValueAsString("data_inclusao");
        modificacao = qryProduto.getCurrentFieldValueAsString("data_modificacao");
        
        quantUnitaria = qryProduto.getCurrentFieldValueAsDouble("quantidade_unitaria");
        chbFracionada.setSelected(qryProduto.getCurrentFieldValueAsBoolean("fracionado"));
        
        txtID.setText(String.valueOf(id));
        txtNome.setText(nome);
        txtCodBarra.setText(codigoBarra);
        txtCodFornec.setText(codigoFornecedor);
        txtEstoque.setValue(estoque);

        txtQuantProducao.setValue(quantidadeProducao);
        txtCusto.setValue(precoCusto);
        txtIPI.setValue(ipi);
        txtICMS.setValue(icms);
        txtDiferencaICMS.setValue(diferencaIcms);
        txtSimplesNacional.setValue(simplesNacional);
        txtFrete.setValue(frete);
        txtMargem.setValue(margem);
        txtComissao.setValue(comissao);
        calValidade.setDateAsString(dataValidade);
        txtInc.setText(inclusao);
        txtMod.setText(modificacao);
        
        txtQuantUnitaria.setValue(quantUnitaria);
        lblQuantUnitaria.setText(siglaUnidade);
        
        double totalCusto;
        totalCusto = calcularPrecoCusto(precoCusto, ipi, icms, diferencaIcms, frete);
        txtCustoFinal.setText(String.format("%.2f", totalCusto));
        
        double porcentSobreVenda = margem + comissao + simplesNacional;
        
//        txtPrecoVenda.setText(String.format("%.2f", 
//                calcularPrecoVenda(totalCusto, porcentSobreVenda)));
        txtPrecoVenda.setValue(calcularPrecoVenda(totalCusto, porcentSobreVenda));
        
        int posicao = qryMarca.locate("id", 
                idMarca, 
                true);
        cbxMarca.setSelectedIndex(posicao);
        
        posicao = qryCategoria.locate("id", 
                idCategoria, 
                true);
        cbxCategoria.setSelectedIndex(posicao);
        
        posicao = qryUnidade.locate("sigla", 
                siglaUnidade, 
                true);
        cbxUnidade.setSelectedIndex(posicao);
        
        // se a unidade não for null, localiza a posição na query e atribui a posição.
        if(unidadeProducao != null){
            posicao = qryUnidadeProd.locate("sigla", 
                    unidadeProducao, 
                    true);
        }else{
        // se for null, atribui a posição 0, sem valor de unidade.
            posicao = 0;
        }
        // atribuindo a posição capturada acima.
        cbxUnidadeProducao.setSelectedIndex(posicao);
        
        // Se a categoria de produto NÃO for base de tinta:
        boolean ativo = idCategoria.equals("1");
        for(int i=0; i<pnlProducao.getComponentCount(); i++){
                pnlProducao.getComponent(i).setEnabled(ativo);
        }
        
        alteracao = true;
        this.id = id;
    }
    
    private void limpar(){
        txtID.setText("");
        txtNome.setText("");
        txtCodBarra.setText("");
        txtCodFornec.setText("");
        txtQuantProducao.setValue(0.0);
        txtEstoque.setValue(0.0);
        txtCusto.setValue(0.0);
        txtIPI.setValue(0.0);
        txtICMS.setValue(0.0);
        txtDiferencaICMS.setValue(0.0);
        txtFrete.setValue(0.0);
        txtCustoFinal.setValue(0.0);
        txtMargem.setValue(0.0);
        txtSimplesNacional.setValue(Double.valueOf(FrmLogin.conf.getValor(1))); // idem.
        txtComissao.setValue(Double.valueOf(FrmLogin.conf.getValor(2)));
        txtPrecoVenda.setValue(0.0);
        calValidade.setText("");
        txtInc.setText("");
        txtMod.setText("");
        
        txtQuantUnitaria.setValue(0.0);
        lblQuantUnitaria.setText("Unidade");
        
        chbFracionada.setSelected(false);
        
        // atualizando querys
        qryUnidade.execQuery();
        qryUnidadeProd.execQuery();
        qryCategoria.execQuery();
        qryMarca.execQuery();
        
        qryUnidade.execQuery();
        qryUnidadeProd.execQuery();
        qryMarca.execQuery();
        qryCategoria.execQuery();
        cbxUnidade.setSelectedIndex(0);
        cbxUnidadeProducao.setSelectedIndex(0);
        cbxCategoria.setSelectedIndex(0);
        cbxMarca.setSelectedIndex(0);
        
        alteracao = false;
        id = 0;
        
        for(int i=0; i<pnlProducao.getComponentCount(); i++){
                pnlProducao.getComponent(i).setEnabled(false);
            }
        
        txtNome.requestFocus();
    }
    
    private boolean enviarTransacao(String sql){
        JDBUpdate transacao = new JDBUpdate();
        transacao.setJDBConnection(principal.Principal.conexao.getConexao());

        transacao.setSQL(sql);
        transacao.setShowMessageOnError(false);
        
        boolean concluido = transacao.execUpdate();
        // Se a transação retornar erro:
        if(!concluido){
            //1062: Violação de primary key ou unique
            if(transacao.getErrorCode() == 1062){
                JOptionPane.showMessageDialog(this, 
                        "Produto já cadastrado", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
            //1451: Violação de foreign key, contém relacionamento
            }else if(transacao.getErrorCode() == 1451){
                JOptionPane.showMessageDialog(this, 
                        "Produto com relacionamento, não pode ser excluída", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);                
            }
        }
        
        return concluido;
    }
    
    public static double calcularPrecoVenda(double precoCusto, double porcentSobreVenda){
        // Retorna o preço de custo baseado no seguinte calculo:
        // - Preço de venda equivale a 100%;
        // - Parâmetro porcentSobreVenda é a soma das porcentagem 
        // que são aplicadas sobre o preço de venda;
        // - Na atribuição de variável porcentCusto é o obtido a 
        // porcentagem equivalente de custo final do produto;
        // - No calculo final(return) é multiplicado o preço de custo por 100 e 
        // dividido pela porcentagem adquirida em porcentCusto, 
        // obtendo preço de venda;
        double porcentCusto = 100 - porcentSobreVenda;
        return (precoCusto * 100) / porcentCusto;
    }
    
    public static double calcularPrecoCusto(double custo, double ipi, double icms, double diferencaIcms, 
            double frete){
        ipi = custo * (ipi / 100);
        icms = custo * (icms / 100);
        diferencaIcms = custo * (diferencaIcms / 100);
        frete = custo * (frete / 100);
        return custo + ipi + icms + diferencaIcms + frete;
    }
    
    private void alimentarCustoFinal(){
        double custoFinal, custo, ipi, icms, difIcms, frete;
        // No método alimentarCustoFinal e alimentarPrecoVenda é necessário
        // usar o valor que está no método gettext() do jformattedField 
        // porque o método getvalue() somente será carregado com algum valor
        // DEPOIS de retirar o foco. Os métodos alimentarCustoFinal e alimentarPrecoVenda
        // executam DURANTE o processo de retirar o foco;
        if(txtCusto.getText().equals("0,000"))
            custo = (double)0.0;
        else
            custo = Double.valueOf(txtCusto.getText().replaceAll(",", "."));
        
        if(txtIPI.getText().equals("0,000"))
            ipi = (double)0.0;
        else
            ipi = Double.valueOf(txtIPI.getText().replaceAll(",", "."));
        
        if(txtICMS.getText().equals("0,000"))
            icms = (double)0.0;
        else
            icms = Double.valueOf(txtICMS.getText().replaceAll(",", "."));
        
        if(txtDiferencaICMS.getText().equals("0,000"))
            difIcms = (double)0.0;
        else
            difIcms = Double.valueOf(txtDiferencaICMS.getText().replaceAll(",", "."));
        
        if(txtFrete.getText().equals("0,000"))
            frete = (double)0.0;
        else
            frete = Double.valueOf(txtFrete.getText().replaceAll(",", "."));

        
        custoFinal = calcularPrecoCusto(custo, ipi, icms, difIcms, frete);
        txtCustoFinal.setValue(custoFinal);
    }
    
    private void alimentarPrecoVenda(){
        double custo, margem, sn, comissao, venda;
        
        if(txtCustoFinal.getText().equals("0,000"))
            custo = (double)0.0;
        else
            custo = Double.valueOf(txtCustoFinal.getText().replaceAll(",", "."));
        
        if(txtMargem.getText().equals("0,000"))
            margem = (double)0.0;
        else
            margem = Double.valueOf(txtMargem.getText().replaceAll(",", "."));
        
        if(txtSimplesNacional.getText().equals("0,000"))
            sn = (double)0.0;
        else
            sn = Double.valueOf(txtSimplesNacional.getText().replaceAll(",", "."));
        
        if(txtComissao.getText().equals("0,000"))
            comissao = (double)0.0;
        else
            comissao = Double.valueOf(txtComissao.getText().replaceAll(",", "."));
        
        if((margem + sn + comissao) > 99.0){
            margem = 99 - sn - comissao;
            txtMargem.setValue(margem);
            JOptionPane.showMessageDialog(this, 
                        String.format("Porcentagens(Margem + Simples nacional + Comissão)"
                                + " acima de 100%%,\n "
                                + "redefinindo margem para %.2f", margem),
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
        }
        
        venda = calcularPrecoVenda(custo, margem + sn + comissao);
//        txtPrecoVenda.setText(String.format("%.2f", Math.abs(venda)));
        txtPrecoVenda.setValue(Math.abs(venda));
    }
}
