/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package estoque;

import java.text.DecimalFormat;
import java.util.LinkedHashMap;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import lib.jdb.jdbquery.JDBQuery;
import lib.jdb.jdbupdate.JDBUpdate;
import principal.FrmLogin;

/**
 *
 * @author patri
 */
public class iFrmCompra extends javax.swing.JInternalFrame {
    private String idFornecedor = "", idTransportadora = "";
    private int idProduto = 0, idCfop = 0, idCompra = 0, idItemCompra = 0, 
            idContaPagar = 0, idItemContaPagar = 0, idContaPagarFrete = 0;
    private double somaItensIpi = 0.0, somaItensIcmsSt = 0.0, somaItensTotal = 0.0, valorRestante = 0.0,
            quantidade, difIcms, ipi, icmsSt, valorUnitario, valorTotalProduto, 
            margem, comissao, sn;
    private boolean pesquisaFornecedor, pesquisaTransportadora, pesquisaProduto, pesquisaCfop, 
            novaCompra, inserirFrete, fracionado;
    private JDBQuery qryFornecedor, qryTransportadora, qryProduto, qryCfop, 
            qryCompra, qryItensCompra, qryItensContasPagar, qryTemp;
    private JDBUpdate updTransacao;
    /**
     * Creates new form iFrmCompra
     */
    public iFrmCompra() {
        // ocultando menus e barra ferramentas
        principal.FrmPrincipal.Menu.setVisible(false);
        principal.FrmPrincipal.BarraFerramenta.setVisible(false);
        
        // Inicializando componentes JDBQuery
        qryFornecedor = new JDBQuery();
        qryTransportadora = new JDBQuery();
        qryProduto = new JDBQuery();
        qryCfop = new JDBQuery();
        qryCompra = new JDBQuery();
        qryItensCompra = new JDBQuery();
        qryItensContasPagar = new JDBQuery();
        qryTemp = new JDBQuery();
        
        JDBQuery[] vetorQry = {qryFornecedor, qryTransportadora, qryProduto, qryCfop, 
            qryCompra, qryItensCompra, qryItensContasPagar, qryTemp};
        for(JDBQuery qry: vetorQry){
            qry.setJDBConnection(principal.Principal.conexao.getConexao());
            qry.setConcurUpdatable(false);
            qry.setTimeStampFormat("dd/MM/YYYY HH:mm:ss");
            qry.setDateFormat("dd/MM/yyyy");
            qry.setLanguage("pt");
        }
        
        updTransacao = new JDBUpdate();
        updTransacao.setJDBConnection(principal.Principal.conexao.getConexao());
        
        initComponents();
        
        // jFormattedText em formato decimal
        DecimalFormat decimal = new DecimalFormat("######0.000");        
        NumberFormatter numFormatter = new NumberFormatter(decimal);
        numFormatter.setFormat(decimal);
        numFormatter.setAllowsInvalid(false);
        DefaultFormatterFactory dfFactory = new DefaultFormatterFactory(numFormatter);
        
        txtFreteTotal.setFormatterFactory(dfFactory);
//        txtIpiTotal.setFormatterFactory(dfFactory);
//        txtIcmsStTotal.setFormatterFactory(dfFactory);
//        txtTotalNF.setFormatterFactory(dfFactory);
        txtValorParcela.setFormatterFactory(dfFactory);
        
        txtQuantidade.setFormatterFactory(dfFactory);
        txtValor.setFormatterFactory(dfFactory);
        txtIpi.setFormatterFactory(dfFactory);
        txtIcmsSt.setFormatterFactory(dfFactory);
        txtValorTotalProduto.setFormatterFactory(dfFactory);
        txtDifIcms.setFormatterFactory(dfFactory);
        
        DecimalFormat decimal2 = new DecimalFormat("#0.00");        
        NumberFormatter numFormatter2 = new NumberFormatter(decimal);
        numFormatter2.setFormat(decimal2);
        numFormatter2.setAllowsInvalid(false);
        DefaultFormatterFactory dfFactory2 = new DefaultFormatterFactory(numFormatter2);
        
        txtIpiTotal.setFormatterFactory(dfFactory2);
        txtIcmsStTotal.setFormatterFactory(dfFactory2);
        txtTotalNF.setFormatterFactory(dfFactory2);
        
        txtConfIcmsSt.setFormatterFactory(dfFactory2);
        txtConfIpi.setFormatterFactory(dfFactory2);
        txtConfValorTotal.setFormatterFactory(dfFactory2);
        
        limpar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Painel = new javax.swing.JPanel();
        pnCodigo = new javax.swing.JPanel();
        txtIdCompra = new lib.jdb.control.jdbtextfield.JDBTextField();
        lblDataNF = new javax.swing.JLabel();
        lblNum = new javax.swing.JLabel();
        lblSerie = new javax.swing.JLabel();
        lblFornecedor = new javax.swing.JLabel();
        lblTranportadora = new javax.swing.JLabel();
        lblCFOP = new javax.swing.JLabel();
        lblDataEmi = new javax.swing.JLabel();
        lblFreteTotal = new javax.swing.JLabel();
        lblValorTotal = new javax.swing.JLabel();
        lblTotalTPI = new javax.swing.JLabel();
        lblTotalICMS = new javax.swing.JLabel();
        pnProdCompra = new javax.swing.JPanel();
        scrlProdutoCompra = new javax.swing.JScrollPane();
        tbItensCompra = new lib.jdb.control.jdbtable.JDBTable();
        pnCodigo1 = new javax.swing.JPanel();
        txtIdProduto = new lib.jdb.control.jdbtextfield.JDBTextField();
        lblProduto = new javax.swing.JLabel();
        lblQuantidade = new javax.swing.JLabel();
        lblIPI = new javax.swing.JLabel();
        lblICMS = new javax.swing.JLabel();
        lblDifICMS2 = new javax.swing.JLabel();
        btnAdicionar = new lib.jdb.control.jdbbuttonsave.JDBButtonSave();
        btnPesqProduto = new javax.swing.JButton();
        lblDataVenc = new javax.swing.JLabel();
        lblValor = new javax.swing.JLabel();
        txtQuantidade = new javax.swing.JFormattedTextField();
        txtValor = new javax.swing.JFormattedTextField();
        txtIpi = new javax.swing.JFormattedTextField();
        txtIcmsSt = new javax.swing.JFormattedTextField();
        txtDifIcms = new javax.swing.JFormattedTextField();
        calDataVencProduto = new lib.jdb.control.jdbcalendar.JDBCalendar();
        txtProduto = new javax.swing.JTextField();
        txtValorTotalProduto = new javax.swing.JFormattedTextField();
        lblDifICMS3 = new javax.swing.JLabel();
        txtUnidade = new javax.swing.JTextField();
        btnLimpar = new lib.jdb.control.jdbbuttoncancel.JDBButtonCancel();
        lblValorTotal1 = new javax.swing.JLabel();
        txtConfIcmsSt = new javax.swing.JFormattedTextField();
        txtConfIpi = new javax.swing.JFormattedTextField();
        lblValorTotal2 = new javax.swing.JLabel();
        txtConfValorTotal = new javax.swing.JFormattedTextField();
        lblValorTotal3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnFechaC = new lib.jdb.control.jdbbuttonsave.JDBButtonSave();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbParcelas = new lib.jdb.control.jdbtable.JDBTable();
        txtFreteTotal = new javax.swing.JFormattedTextField();
        txtFornecedor = new javax.swing.JTextField();
        txtTransportadora = new javax.swing.JTextField();
        txtIpiTotal = new javax.swing.JFormattedTextField();
        txtIcmsStTotal = new javax.swing.JFormattedTextField();
        txtTotalNF = new javax.swing.JFormattedTextField();
        txtNumero = new javax.swing.JTextField();
        txtSerie = new javax.swing.JTextField();
        txtCFOP = new javax.swing.JTextField();
        calDataEmissao = new lib.jdb.control.jdbcalendar.JDBCalendar();
        txtDataEntrada = new javax.swing.JTextField();
        btnPesqCFOP = new javax.swing.JButton();
        btnPesqFornecedor = new javax.swing.JButton();
        btnPesqTransportadora = new javax.swing.JButton();
        btnCancelarVenda = new javax.swing.JButton();
        txtValorParcela = new javax.swing.JFormattedTextField();
        lblParcelas1 = new javax.swing.JLabel();
        btnGravarParcela = new javax.swing.JButton();
        lblParcelas2 = new javax.swing.JLabel();
        txtNumeroParcela = new javax.swing.JTextField();
        btnRemoverParcela = new javax.swing.JButton();
        calDataVencParcela = new lib.jdb.control.jdbcalendar.JDBCalendar();
        lblParcelas3 = new javax.swing.JLabel();
        cbxFrete = new javax.swing.JComboBox();

        setClosable(true);
        setIconifiable(true);
        setTitle("Compras");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        Painel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        pnCodigo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "Código", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        txtIdCompra.setFocusable(false);
        txtIdCompra.setFont(principal.FrmLogin.fontePadrao);

        javax.swing.GroupLayout pnCodigoLayout = new javax.swing.GroupLayout(pnCodigo);
        pnCodigo.setLayout(pnCodigoLayout);
        pnCodigoLayout.setHorizontalGroup(
            pnCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCodigoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtIdCompra, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnCodigoLayout.setVerticalGroup(
            pnCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCodigoLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(txtIdCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        lblDataNF.setFont(principal.FrmLogin.fontePadrao);
        lblDataNF.setText("Data de entrada NF:");

        lblNum.setFont(principal.FrmLogin.fontePadrao);
        lblNum.setText("Número:");

        lblSerie.setFont(principal.FrmLogin.fontePadrao);
        lblSerie.setText("Série:");

        lblFornecedor.setFont(principal.FrmLogin.fontePadrao);
        lblFornecedor.setText("Fornecedor:");

        lblTranportadora.setFont(principal.FrmLogin.fontePadrao);
        lblTranportadora.setText("Transportadora:");

        lblCFOP.setFont(principal.FrmLogin.fontePadrao);
        lblCFOP.setText("CFOP:");

        lblDataEmi.setFont(principal.FrmLogin.fontePadrao);
        lblDataEmi.setText("Data de Emissão:");

        lblFreteTotal.setFont(principal.FrmLogin.fontePadraoNegrito);
        lblFreteTotal.setText("Frete total(R$):");

        lblValorTotal.setFont(principal.FrmLogin.fontePadraoNegrito);
        lblValorTotal.setText("Valor total(R$):");

        lblTotalTPI.setFont(principal.FrmLogin.fontePadraoNegrito);
        lblTotalTPI.setText("Total IPI(R$):");

        lblTotalICMS.setFont(principal.FrmLogin.fontePadraoNegrito);
        lblTotalICMS.setText("Total ICMS ST(R$) :");

        pnProdCompra.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "Produtos de Compra", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        scrlProdutoCompra.setFont(principal.FrmLogin.fontePadrao);

        tbItensCompra.setEditable(false);
        tbItensCompra.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbItensCompraMouseClicked(evt);
            }
        });
        scrlProdutoCompra.setViewportView(tbItensCompra);

        pnCodigo1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "Código", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        txtIdProduto.setFocusable(false);
        txtIdProduto.setFont(principal.FrmLogin.fontePadrao);

        javax.swing.GroupLayout pnCodigo1Layout = new javax.swing.GroupLayout(pnCodigo1);
        pnCodigo1.setLayout(pnCodigo1Layout);
        pnCodigo1Layout.setHorizontalGroup(
            pnCodigo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCodigo1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtIdProduto, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnCodigo1Layout.setVerticalGroup(
            pnCodigo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCodigo1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(txtIdProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        lblProduto.setFont(principal.FrmLogin.fontePadrao);
        lblProduto.setText("Produto:");

        lblQuantidade.setFont(principal.FrmLogin.fontePadrao);
        lblQuantidade.setText("Quantidade:");

        lblIPI.setFont(principal.FrmLogin.fontePadrao);
        lblIPI.setText("IPI(%):");

        lblICMS.setFont(principal.FrmLogin.fontePadrao);
        lblICMS.setText("ICMS ST(R$):");

        lblDifICMS2.setFont(principal.FrmLogin.fontePadrao);
        lblDifICMS2.setText("Dif. ICMS(%):");

        btnAdicionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.png"))); // NOI18N
        btnAdicionar.setMnemonic('a');
        btnAdicionar.setFont(principal.FrmLogin.fontePadrao);
        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        btnPesqProduto.setFont(principal.FrmLogin.fontePadrao);
        btnPesqProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/look.png"))); // NOI18N
        btnPesqProduto.setText("Pesquisar");
        btnPesqProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesqProdutoActionPerformed(evt);
            }
        });

        lblDataVenc.setFont(principal.FrmLogin.fontePadrao);
        lblDataVenc.setText("Data de Vencimento:");

        lblValor.setFont(principal.FrmLogin.fontePadrao);
        lblValor.setText("Valor Unitário(R$):");

        txtQuantidade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtQuantidadeFocusLost(evt);
            }
        });

        txtValor.setNextFocusableComponent(txtIpi);
        txtValor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtValorFocusLost(evt);
            }
        });

        txtIpi.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIpiFocusLost(evt);
            }
        });

        txtIcmsSt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIcmsStFocusLost(evt);
            }
        });

        txtDifIcms.setNextFocusableComponent(calDataVencProduto);
        txtDifIcms.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDifIcmsFocusLost(evt);
            }
        });

        calDataVencProduto.setDateFormat("dd/MM/yyyy");
        calDataVencProduto.setNextFocusableComponent(btnAdicionar);
        calDataVencProduto.setTextEditable(false);

        txtProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtProdutoKeyPressed(evt);
            }
        });

        txtValorTotalProduto.setFocusable(false);

        lblDifICMS3.setFont(principal.FrmLogin.fontePadrao);
        lblDifICMS3.setText("Valor Total do produto");

        txtUnidade.setFocusable(false);

        btnLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/return2.png"))); // NOI18N
        btnLimpar.setMnemonic('l');
        btnLimpar.setFont(principal.FrmLogin.fontePadrao);
        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        lblValorTotal1.setFont(principal.FrmLogin.fontePadraoNegrito);
        lblValorTotal1.setText("Conf. ICMS ST(R$)");

        txtConfIcmsSt.setFocusable(false);
        txtConfIcmsSt.setFont(principal.FrmLogin.fontePadraoNegrito);
        txtConfIcmsSt.setNextFocusableComponent(calDataVencParcela);

        txtConfIpi.setFocusable(false);
        txtConfIpi.setFont(principal.FrmLogin.fontePadraoNegrito);
        txtConfIpi.setNextFocusableComponent(calDataVencParcela);

        lblValorTotal2.setFont(principal.FrmLogin.fontePadraoNegrito);
        lblValorTotal2.setText("Conf. IPI(R$)");

        txtConfValorTotal.setFocusable(false);
        txtConfValorTotal.setFont(principal.FrmLogin.fontePadraoNegrito);
        txtConfValorTotal.setNextFocusableComponent(calDataVencParcela);

        lblValorTotal3.setFont(principal.FrmLogin.fontePadraoNegrito);
        lblValorTotal3.setText("Conf. Valor total(R$)");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete.png"))); // NOI18N
        jButton1.setMnemonic('r');
        jButton1.setText("Remover");
        jButton1.setNextFocusableComponent(txtProduto);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnProdCompraLayout = new javax.swing.GroupLayout(pnProdCompra);
        pnProdCompra.setLayout(pnProdCompraLayout);
        pnProdCompraLayout.setHorizontalGroup(
            pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnProdCompraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrlProdutoCompra)
                    .addGroup(pnProdCompraLayout.createSequentialGroup()
                        .addComponent(pnCodigo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnProdCompraLayout.createSequentialGroup()
                                .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblProduto)
                                    .addGroup(pnProdCompraLayout.createSequentialGroup()
                                        .addComponent(txtProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnPesqProduto)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblQuantidade)
                                    .addGroup(pnProdCompraLayout.createSequentialGroup()
                                        .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblValor)))
                            .addGroup(pnProdCompraLayout.createSequentialGroup()
                                .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtIpi, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblIPI))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtIcmsSt, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblICMS))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDifIcms, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDifICMS2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblDifICMS3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtValorTotalProduto))
                                .addGap(18, 18, 18)
                                .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(calDataVencProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDataVenc))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAdicionar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnLimpar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(pnProdCompraLayout.createSequentialGroup()
                        .addComponent(lblValorTotal1)
                        .addGap(18, 18, 18)
                        .addComponent(txtConfIcmsSt, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblValorTotal2)
                        .addGap(18, 18, 18)
                        .addComponent(txtConfIpi, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblValorTotal3)
                        .addGap(18, 18, 18)
                        .addComponent(txtConfValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnProdCompraLayout.setVerticalGroup(
            pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnProdCompraLayout.createSequentialGroup()
                .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtConfValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblValorTotal3))
                    .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtConfIpi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblValorTotal2))
                    .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtConfIcmsSt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblValorTotal1)))
                .addGap(13, 13, 13)
                .addComponent(scrlProdutoCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnProdCompraLayout.createSequentialGroup()
                        .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnProdCompraLayout.createSequentialGroup()
                                .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblProduto)
                                    .addComponent(lblQuantidade)
                                    .addComponent(lblValor))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnPesqProduto)
                                    .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(pnCodigo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblIPI)
                            .addComponent(lblICMS)
                            .addComponent(lblDifICMS2)
                            .addComponent(lblDifICMS3)
                            .addComponent(lblDataVenc)))
                    .addGroup(pnProdCompraLayout.createSequentialGroup()
                        .addComponent(btnAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(calDataVencProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnProdCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtIpi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtIcmsSt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtDifIcms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtValorTotalProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        btnFechaC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/cart.png"))); // NOI18N
        btnFechaC.setMnemonic('f');
        btnFechaC.setFont(principal.FrmLogin.fontePadrao);
        btnFechaC.setText("Fechar Compra");
        btnFechaC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFechaCActionPerformed(evt);
            }
        });

        tbParcelas.setEditable(false);
        tbParcelas.setToolTipText("Duplo clique para selecionar parcela");
        tbParcelas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbParcelasMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tbParcelas);

        txtFreteTotal.setFont(principal.FrmLogin.fontePadraoNegrito);
        txtFreteTotal.setNextFocusableComponent(cbxFrete);

        txtFornecedor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFornecedorKeyPressed(evt);
            }
        });

        txtTransportadora.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTransportadoraKeyPressed(evt);
            }
        });

        txtIpiTotal.setFont(principal.FrmLogin.fontePadraoNegrito);
        txtIpiTotal.setNextFocusableComponent(txtTotalNF);

        txtIcmsStTotal.setFont(principal.FrmLogin.fontePadraoNegrito);
        txtIcmsStTotal.setNextFocusableComponent(txtIpiTotal);

        txtTotalNF.setFont(principal.FrmLogin.fontePadraoNegrito);
        txtTotalNF.setNextFocusableComponent(calDataVencParcela);

        txtCFOP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCFOPKeyPressed(evt);
            }
        });

        calDataEmissao.setDateFormat("dd/MM/yyyy");
        calDataEmissao.setTextEditable(false);

        txtDataEntrada.setFocusable(false);

        btnPesqCFOP.setFont(principal.FrmLogin.fontePadrao);
        btnPesqCFOP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/look.png"))); // NOI18N
        btnPesqCFOP.setMnemonic('c');
        btnPesqCFOP.setText("Pesquisar");
        btnPesqCFOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesqCFOPActionPerformed(evt);
            }
        });

        btnPesqFornecedor.setFont(principal.FrmLogin.fontePadrao);
        btnPesqFornecedor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/look.png"))); // NOI18N
        btnPesqFornecedor.setMnemonic('c');
        btnPesqFornecedor.setText("Pesquisar");
        btnPesqFornecedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesqFornecedorActionPerformed(evt);
            }
        });

        btnPesqTransportadora.setFont(principal.FrmLogin.fontePadrao);
        btnPesqTransportadora.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/look.png"))); // NOI18N
        btnPesqTransportadora.setMnemonic('c');
        btnPesqTransportadora.setText("Pesquisar");
        btnPesqTransportadora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesqTransportadoraActionPerformed(evt);
            }
        });

        btnCancelarVenda.setText("Cancelar");
        btnCancelarVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarVendaActionPerformed(evt);
            }
        });

        txtValorParcela.setNextFocusableComponent(btnGravarParcela);

        lblParcelas1.setFont(principal.FrmLogin.fontePadrao);
        lblParcelas1.setText("Valor parcela(R$):");

        btnGravarParcela.setText("Gravar");
        btnGravarParcela.setNextFocusableComponent(calDataVencParcela);
        btnGravarParcela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarParcelaActionPerformed(evt);
            }
        });

        lblParcelas2.setFont(principal.FrmLogin.fontePadrao);
        lblParcelas2.setText("Número");

        txtNumeroParcela.setNextFocusableComponent(txtValorParcela);

        btnRemoverParcela.setText("Remover");
        btnRemoverParcela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverParcelaActionPerformed(evt);
            }
        });

        calDataVencParcela.setDateFormat("dd/MM/yyyy");
        calDataVencParcela.setTextEditable(false);

        lblParcelas3.setFont(principal.FrmLogin.fontePadrao);
        lblParcelas3.setText("Vencimento");

        cbxFrete.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Emitente", "Destinatário" }));
        cbxFrete.setNextFocusableComponent(txtIcmsStTotal);

        javax.swing.GroupLayout PainelLayout = new javax.swing.GroupLayout(Painel);
        Painel.setLayout(PainelLayout);
        PainelLayout.setHorizontalGroup(
            PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelLayout.createSequentialGroup()
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addComponent(pnCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDataNF)
                                    .addComponent(txtDataEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblNum))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSerie))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PainelLayout.createSequentialGroup()
                                        .addComponent(lblCFOP)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblDataEmi, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(PainelLayout.createSequentialGroup()
                                        .addComponent(txtCFOP)
                                        .addGap(12, 12, 12)
                                        .addComponent(btnPesqCFOP)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(calDataEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addGap(735, 735, 735)
                                .addComponent(btnCancelarVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnFechaC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PainelLayout.createSequentialGroup()
                                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblFornecedor)
                                            .addGroup(PainelLayout.createSequentialGroup()
                                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btnPesqFornecedor)
                                                    .addComponent(lblParcelas3))))
                                        .addGap(12, 12, 12)
                                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblTranportadora)
                                            .addGroup(PainelLayout.createSequentialGroup()
                                                .addComponent(txtTransportadora, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnPesqTransportadora))))
                                    .addGroup(PainelLayout.createSequentialGroup()
                                        .addGap(243, 243, 243)
                                        .addComponent(calDataVencParcela, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lblParcelas2)
                                            .addComponent(txtNumeroParcela)
                                            .addComponent(btnGravarParcela, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnRemoverParcela, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtValorParcela, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblParcelas1))))
                                .addGap(18, 18, 18)
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PainelLayout.createSequentialGroup()
                                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblFreteTotal)
                                            .addComponent(txtFreteTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtIcmsStTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, Short.MAX_VALUE)
                                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtIpiTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cbxFrete, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(PainelLayout.createSequentialGroup()
                                        .addComponent(lblValorTotal)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtTotalNF, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(PainelLayout.createSequentialGroup()
                                        .addComponent(lblTotalICMS)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblTotalTPI)
                                        .addGap(46, 46, 46))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PainelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnProdCompra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        PainelLayout.setVerticalGroup(
            PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addComponent(pnCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFornecedor)
                            .addComponent(lblTranportadora)
                            .addComponent(lblFreteTotal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPesqFornecedor)
                            .addComponent(txtTransportadora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPesqTransportadora)
                            .addComponent(txtFreteTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxFrete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(PainelLayout.createSequentialGroup()
                            .addComponent(lblDataEmi)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(calDataEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(6, 6, 6))
                        .addGroup(PainelLayout.createSequentialGroup()
                            .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblDataNF)
                                .addComponent(lblNum)
                                .addComponent(lblSerie)
                                .addComponent(lblCFOP))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtSerie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtDataEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtCFOP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnPesqCFOP)))))
                .addGap(10, 10, 10)
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PainelLayout.createSequentialGroup()
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblParcelas2)
                                    .addGroup(PainelLayout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(lblParcelas1)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtNumeroParcela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtValorParcela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(lblParcelas3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(calDataVencParcela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnGravarParcela)
                            .addComponent(btnRemoverParcela)))
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTotalICMS)
                            .addComponent(lblTotalTPI))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtIcmsStTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIpiTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTotalNF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblValorTotal))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnProdCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFechaC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelarVenda))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(Painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(Painel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        setBounds(0, 0, 1052, 688);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        //cancela as transações caso a janela for fechada.
        principal.Principal.conexao.cancelarTransacoes();
        
        // desocultando menus e barra ferramentas
        principal.FrmPrincipal.Menu.setVisible(true);
        principal.FrmPrincipal.BarraFerramenta.setVisible(true);
    }//GEN-LAST:event_formInternalFrameClosing

    private void btnRemoverParcelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverParcelaActionPerformed
        if(idItemContaPagar != 0){
            if(sistema.Mensagem.showConfirmDialog(this,
                "Deseja realmente remover esta parcela?", "Confirmação") == 0){

            updTransacao.setSQL("DELETE FROM lancamentos_conta_pagar WHERE id = " + idItemContaPagar);
            updTransacao.execUpdate();

            valorRestante += Double.valueOf(txtValorParcela.getValue().toString());

            atualizarTbParcelas();
        }
        }else{
            JOptionPane.showMessageDialog(this, "Selecione uma parcela para remover",
                "Atenção", JOptionPane.INFORMATION_MESSAGE);
            tbParcelas.requestFocus();
        }
        
        limparParcela();
    }//GEN-LAST:event_btnRemoverParcelaActionPerformed

    private void btnGravarParcelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarParcelaActionPerformed
        if(FrmLogin.usuario.verificarPermissao(this, 1)){

            if(txtNumero.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Informe o número da nota fiscal",
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
                txtNumero.requestFocus();
            }else if(!txtNumero.getText().matches("[0-9]+")){
                JOptionPane.showMessageDialog(this, "Número da nota fiscal inválido,\n"
                    + "Deve ser informado somente números",
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
                txtNumero.requestFocus();
            }else if(idCfop == 0){
                JOptionPane.showMessageDialog(this, "Informe o CFOP",
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
                txtCFOP.requestFocus();
            }else if(calDataEmissao.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Informe a data de emissão",
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
                calDataEmissao.requestFocus();
            }else if(idFornecedor.isEmpty()){
                JOptionPane.showMessageDialog(this, "Selecione um fornecedor",
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
                txtFornecedor.requestFocus();
            }else if(Double.valueOf(txtTotalNF.getValue().toString()) == 0.0){
                JOptionPane.showMessageDialog(this, "Informe o valor total da nota fiscal",
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
                txtTotalNF.requestFocus();
            // se o frete é por conta do destinatário
            }else if(cbxFrete.getSelectedIndex() == 1 && 
                    idTransportadora.isEmpty()){
                JOptionPane.showMessageDialog(this, "Informe uma transportadora",
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
                txtTransportadora.requestFocus();
            }else if(cbxFrete.getSelectedIndex() == 1 && 
                    Double.valueOf(txtFreteTotal.getValue().toString()) == 0.0){
                    JOptionPane.showMessageDialog(this, "Informe o valor total do frete",
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    txtFreteTotal.requestFocus();
            }else{            
                if(novaCompra){
                    // abrindo transações no banco
                    principal.Principal.conexao.abrirTransacoes();

                    // criando a compra
                    txtDataEntrada.setText(sistema.Data.getAtualFormatada("dd/MM/yyyy HH:mm:ss"));

                    updTransacao.setSQL(String.format(
                        "INSERT INTO compras("
                        + "data_nf_entrada, "
                        + "doc_principal_fornecedor, "
                        + "doc_principal_transportadora, "
                        + "numero_nf_entrada, "
                        + "serie_nf_entrada, "
                        + "cfop, "
                        + "data_emissao_nf_entrada, "
                        + "valor_frete, "
                        + "valor_total, "
                        + "ipi_total, "
                        + "icms_st_total) "
                        + "VALUES "
                        + "('%s','%s',%s,'%s',%s,'%s','%s',%s,'%s',%s,%s)",
                        sistema.Data.getAtualSQL(),
                        idFornecedor,
                        idTransportadora.isEmpty()?"NULL":"'"+idTransportadora+"'",
                        txtNumero.getText(),
                        txtSerie.getText().isEmpty()?"NULL":"'"+txtSerie.getText()+"'",
                        idCfop,
                        calDataEmissao.getDateAsSQLDate(),
                        Double.valueOf(txtFreteTotal.getValue().toString()) == 0.0?
                        "NULL":txtFreteTotal.getValue(),
                        txtTotalNF.getValue(),
                        Double.valueOf(txtIpiTotal.getValue().toString()) == 0.0?
                        "NULL":txtIpiTotal.getValue(),
                        Double.valueOf(txtIcmsStTotal.getValue().toString()) == 0.0?
                        "NULL":txtIcmsStTotal.getValue() ) );

                    updTransacao.execUpdate();

                    // retornando o código da compra
                    qryTemp.setSQL("SELECT LAST_INSERT_ID()");
                    qryTemp.execQuery();

                    idCompra = qryTemp.getCurrentFieldValueAsInteger(1);
                    txtIdCompra.setText(String.valueOf(idCompra));

                    // definindo variável novaCompra como false para que nas outras parcelas
                    // não seja gerado outra compra.
                    novaCompra = false;

                    // criando a conta a pagar referente a compra
                    updTransacao.setSQL(String.format(
                        "INSERT INTO contas_pagar("
                        + "doc_principal_fornecedor, id_compra) "
                        + "VALUES ("
                        + "'%s','%s')", idFornecedor, idCompra ) );
                    updTransacao.execUpdate();

                    qryTemp.setSQL("SELECT LAST_INSERT_ID()");
                    qryTemp.execQuery();

                    idContaPagar = qryTemp.getCurrentFieldValueAsInteger(1);

                    // criando a conta a pagar referente a compra e o frete, somente se o 
                    // frete é por conta do destinatário.
                    if(cbxFrete.getSelectedIndex() == 1){
                        updTransacao.setSQL(String.format(
                            "INSERT INTO contas_pagar("
                            + "doc_principal_fornecedor, id_compra) "
                            + "VALUES ("
                            + "'%s','%s')", idTransportadora, idCompra ) );
                        updTransacao.execUpdate();

                        qryTemp.setSQL("SELECT LAST_INSERT_ID()");
                        qryTemp.execQuery();

                        idContaPagarFrete = qryTemp.getCurrentFieldValueAsInteger(1);
                    }

                    // atribuindo valorRestante com total da nota fiscal entrada
                    // caso a transportadora seja outra empresa terceirizada, o frete é
                    // por conta do destinatário, portanto será gerado uma parcela do valor no 
                    // contas a pagar do valor para a transportadora informada.
                    valorRestante = Double.valueOf(txtTotalNF.getValue().toString());

                    mudarStatusCompCompra(false);
                }

                if(idItemContaPagar == 0){
                    if(valorRestante > 0.0){
                        //verificando se valores estão definidos para a parcela
                        if(calDataVencParcela.getText().isEmpty()){
                            JOptionPane.showMessageDialog(this, "Informe uma data de vencimento da parcela",
                                "Atenção", JOptionPane.INFORMATION_MESSAGE);
                            calDataVencParcela.requestFocus();
                        }else if(txtNumeroParcela.getText().isEmpty()){
                            JOptionPane.showMessageDialog(this, "Informe um número para a parcela",
                                "Atenção", JOptionPane.INFORMATION_MESSAGE);
                            txtNumeroParcela.requestFocus();
                        }else if(txtNumeroParcela.getText().contains("FRETE compra ")){
                            JOptionPane.showMessageDialog(this, "Número parcela inválido",
                                "Atenção", JOptionPane.INFORMATION_MESSAGE);
                            txtNumeroParcela.requestFocus();
                        }else if(Double.valueOf(txtValorParcela.getValue().toString()) == 0.0){
                            JOptionPane.showMessageDialog(this, "Informe o valor da parcela",
                                "Atenção", JOptionPane.INFORMATION_MESSAGE);
                            txtValorParcela.requestFocus();
                        }else if(Double.valueOf(txtValorParcela.getValue().toString())
                                > valorRestante){
                            JOptionPane.showMessageDialog(this, 
                                "Valor informado maior que o valor restante da nota",
                                "Atenção", JOptionPane.INFORMATION_MESSAGE);
                            txtValorParcela.requestFocus();
                            txtValorParcela.setValue(valorRestante);
                        }else{
                            // inserindo parcela
                            updTransacao.setSQL(String.format(
                                "INSERT INTO lancamentos_conta_pagar("
                                + "id_conta_pagar, numero, valor, data_vencimento) "
                                + "VALUES ("
                                + "'%s','%s','%s','%s')",
                                idContaPagar,
                                txtNumeroParcela.getText(),
                                txtValorParcela.getValue(),
                                calDataVencParcela.getDateAsSQLDate()) );
                            updTransacao.execUpdate();

                            // inserindo parcela frete
                            if(cbxFrete.getSelectedIndex() == 1){
                                if(inserirFrete){
                                    updTransacao.setSQL(String.format(
                                        "INSERT INTO lancamentos_conta_pagar("
                                        + "id_conta_pagar, numero, valor, data_vencimento) "
                                        + "VALUES ("
                                        + "'%s','%s','%s','%s')",
                                        idContaPagarFrete,
                                        "FRETE compra " + idCompra,
                                        txtFreteTotal.getValue(),
                                        sistema.Data.getAtualAcrescimoDiasSQL(30)) );
                                    updTransacao.execUpdate();

                                    inserirFrete = false;
                                }
                            }

                            // descrescendo valorRestante pelo valor informado da parcela
                            valorRestante -= Double.valueOf(txtValorParcela.getValue().toString());

                            // limpando campos parcelas
                            limparParcela();

                            atualizarTbParcelas();
                        }
                    }else{
                        JOptionPane.showMessageDialog(this, "Completado inclusão de parcelas",
                            "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    }
                }else{
                    limparParcela();
                }
            }
        }
    }//GEN-LAST:event_btnGravarParcelaActionPerformed

    private void btnCancelarVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarVendaActionPerformed
        cancelarCompra();
    }//GEN-LAST:event_btnCancelarVendaActionPerformed

    private void btnPesqTransportadoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesqTransportadoraActionPerformed
        if(!idTransportadora.isEmpty()){
            if(sistema.Mensagem.showConfirmDialog(this,
                "Deseja pesquisar um nova transportadora?", "Confirmação") == 0){
            pesquisaTransportadora = true;

            txtTransportadora.setText("");

            pesquisarFornecedor();
        }
        }else{
            pesquisaTransportadora = true;

            pesquisarFornecedor();
        }
    }//GEN-LAST:event_btnPesqTransportadoraActionPerformed

    private void btnPesqFornecedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesqFornecedorActionPerformed
        if(!idFornecedor.isEmpty()){
            if(sistema.Mensagem.showConfirmDialog(this,
                "Deseja pesquisar um novo fornecedor?", "Confirmação") == 0){
            txtFornecedor.setText("");

            pesquisarFornecedor();
        }
        }else{
            pesquisarFornecedor();
        }
    }//GEN-LAST:event_btnPesqFornecedorActionPerformed

    private void btnPesqCFOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesqCFOPActionPerformed
        if(idCfop != 0){
            if(sistema.Mensagem.showConfirmDialog(this,
                "Deseja pesquisar um novo CFOP?", "Confirmação") == 0){
            txtCFOP.setText("");

            pesquisarCfop();
        }
        }else{
            pesquisarCfop();
        }
    }//GEN-LAST:event_btnPesqCFOPActionPerformed

    private void txtCFOPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCFOPKeyPressed
        if(evt.getKeyChar() == '\n'){
            pesquisarCfop();
        }
    }//GEN-LAST:event_txtCFOPKeyPressed

    private void txtTransportadoraKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTransportadoraKeyPressed
        if(evt.getKeyChar() == '\n'){
            pesquisaTransportadora = true;

            pesquisarFornecedor();
        }
    }//GEN-LAST:event_txtTransportadoraKeyPressed

    private void txtFornecedorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFornecedorKeyPressed
        if(evt.getKeyChar() == '\n'){
            pesquisarFornecedor();
        }
    }//GEN-LAST:event_txtFornecedorKeyPressed

    private void btnFechaCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFechaCActionPerformed
        if(FrmLogin.usuario.verificarPermissao(this, 1)){

            if(qryItensCompra.getRow() >= 1 && valorRestante == 0){
                String total, ipi, icmsst, confTotal, confIpi, confIcmsSt;
                DecimalFormat df = new DecimalFormat("#.00");

                total =  df.format(somaItensTotal);
                ipi = df.format(somaItensIpi);
                icmsst = df.format(somaItensIcmsSt);

                confTotal = df.format(txtConfValorTotal.getValue());
                confIpi = df.format(txtIpiTotal.getValue());
                confIcmsSt = df.format(txtIcmsStTotal.getValue());

                if(!total.equals(confTotal)){
                    JOptionPane.showMessageDialog(this, "Valor tota da nota fiscal não confere",
                                "Atenção", JOptionPane.INFORMATION_MESSAGE);
                }else if(!ipi.equals(confIpi)){
                    JOptionPane.showMessageDialog(this, "Valor tota de IPI não confere",
                                "Atenção", JOptionPane.INFORMATION_MESSAGE);
                }else if(!icmsst.equals(confIcmsSt)){
                    JOptionPane.showMessageDialog(this, "Valor tota de ICMS Subst. Tributária não confere",
                                "Atenção", JOptionPane.INFORMATION_MESSAGE);
                }else{
    //            novaCompra = true; // já tem a mudança de status no limpar()
                    if(sistema.Mensagem.showConfirmDialog(this, "Confirmar conclusão de entrada?",
                            "Confirmação") == 0){
                        limpar();
                        
                        // registro de log
                        FrmLogin.log.gravar(FrmLogin.usuario.getNomeUsuario(),
                                this, String.valueOf(idCompra), 1); 

                        // fechando e gravando as alterações no banco.
                        principal.Principal.conexao.fecharTransacoes();
                    }
                }
            }else{
                JOptionPane.showMessageDialog(this, 
                        "Adicione produtos na compra para concluir\n"
                        + " e confira as parcelas da nota fiscal",
                                "Atenção", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnFechaCActionPerformed

    private void txtProdutoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProdutoKeyPressed
        if(evt.getKeyChar() == '\n'){
            pesquisarProduto();
        }
    }//GEN-LAST:event_txtProdutoKeyPressed

    private void btnPesqProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesqProdutoActionPerformed
        //        pesquisa.iFrmPesquisa Compra = new pesquisa.iFrmPesquisa("Pesquisa de Produtos");
        //        principal.FrmPrincipal.Desktop.add(Compra);
        //        Compra.setVisible(true);
        if(idProduto != 0){
            if(sistema.Mensagem.showConfirmDialog(this,
                "Deseja pesquisar um novo produto?", "Confirmação") == 0){
            pesquisarProduto();
        }
        }else{
            pesquisarProduto();
        }
    }//GEN-LAST:event_btnPesqProdutoActionPerformed

    private void tbParcelasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbParcelasMouseClicked
        if(evt.getClickCount() == 2){
            if(!qryItensContasPagar.getCurrentFieldValueAsString("numero").
                    contains("FRETE compra ")){
                carregarParcela();
            }else{
            JOptionPane.showMessageDialog(this, "Frete não pode ser selecionado",
                            "Atenção", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_tbParcelasMouseClicked

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        if(qryItensContasPagar.getRow() >= 1 && valorRestante == 0){
            if(idItemCompra == 0){
                if(idProduto == 0){
                    JOptionPane.showMessageDialog(this, "Pesquise um produto",
                                "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    txtProduto.requestFocus();
                }else if(Double.valueOf(txtQuantidade.getValue().toString()) == 0.0){
                    JOptionPane.showMessageDialog(this, "Informe uma quantidade",
                                "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    txtQuantidade.requestFocus();
                }else if(!fracionado && 
                        sistema.Verificador.decimal(Double.valueOf(txtQuantidade.getValue().toString()))){
                    JOptionPane.showMessageDialog(this, "Quantidade NÃO pode ser decimal",
                                "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    txtQuantidade.requestFocus();
                }else if(Double.valueOf(txtValor.getValue().toString()) == 0.0){
                    JOptionPane.showMessageDialog(this, "Informe uma valor",
                                "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    txtValor.requestFocus();
                }else if(calDataVencProduto.getText().isEmpty()){
                    JOptionPane.showMessageDialog(this, "Informe uma data de vencimento",
                                "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    calDataVencProduto.requestFocus();
                }else{
                        double frete = 0.0, valorTotalProdutos = 0.0, preco_venda = 0.0;

                        // obtendo valor total dos produtos:
                        // (total nota - total frete - total ipi - total subst trib)
                        frete = Double.valueOf(txtFreteTotal.getValue().toString());
                        valorTotalProdutos = Double.valueOf(txtTotalNF.getValue().toString()) - 
                                (cbxFrete.getSelectedIndex() == 0?frete:0.0) - 
                                Double.valueOf(txtIcmsStTotal.getValue().toString()) - 
                                Double.valueOf(txtIpiTotal.getValue().toString());
                        // calculando porcentagem de frete
                        frete = frete / valorTotalProdutos * 100;

                        updTransacao.setSQL(String.format(
                            "INSERT INTO itens_compras("
                                + "id_compra, "
                                + "id_produto, "
                                + "quantidade, "
                                + "valor_custo_unitario, "
                                + "ipi, "
                                + "diferenca_icms, "
                                + "icms_st, "
                                + "frete, "
                                + "data_vencimento_produto) "
                            + "VALUES ("
                                + "'%s','%s','%s','%s',%s,%s,%s,%s,'%s')",
                                idCompra,
                                idProduto,
                                quantidade,
                                valorUnitario,
                                ipi == 0.0?"NULL":"'" + ipi + "'",
                                difIcms == 0.0?"NULL":"'" + difIcms + "'",
                                icmsSt == 0.0?"NULL":"'" + icmsSt + "'",
                                frete == 0.0?"NULL":"'" + frete + "'",
                                calDataVencProduto.getDateAsSQLDate() ) );

                        updTransacao.execUpdate();
                        
                        double totalItem = quantidade * valorUnitario;
                        double ipiItem, icmsStItem;
                        somaItensIpi += totalItem * ipi/100;
                        ipiItem = totalItem * ipi/100;
                        somaItensIcmsSt += totalItem * icmsSt/100;
                        icmsStItem = totalItem * icmsSt/100;
//                        somaItensTotal += totalItem + somaItensIpi + somaItensIcmsSt;
                        somaItensTotal += totalItem + ipiItem + icmsStItem;
//                        somaItensTotal += quantidade * (valorUnitario + (valorUnitario * ipi/100) +
//                                (valorUnitario * icmsSt/100));
                        txtConfIcmsSt.setValue(somaItensIcmsSt);
                        txtConfIpi.setValue(somaItensIpi);
                        txtConfValorTotal.setValue(somaItensTotal);

                        // Atualizando cadastro de produto referente ao item compra
                        preco_venda = iFrmCadProduto.calcularPrecoVenda(valorUnitario, margem+comissao+sn);

                        updTransacao.setSQL(String.format(
                            "UPDATE produtos "
                                + "SET "
                                    + "estoque=estoque + %s,"
                                    + "quantidade_unitaria='%s',"
                                    + "preco_custo='%s',"
                                    + "ipi='%s',"
                                    + "icms_st='%s',"
                                    + "diferenca_icms='%s',"
                                    + "frete='%s',"
                                    + "preco_venda='%s',"
                                    + "data_validade='%s' "
                                + "WHERE id = '%s'",
                                quantidade,
                                1,
                                valorUnitario,
                                ipi,
                                icmsSt,
                                difIcms,
                                frete,
                                preco_venda,
                                calDataVencProduto.getDateAsSQLDate(),
                                idProduto) );
                        updTransacao.execUpdate();

                        atualizarTbItensCompra();

                        limparItensCompra();
                    }
            }else{
                JOptionPane.showMessageDialog(this, "Não pode ser feito alteração em itens de uma compra",
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(this, "Adicione parcelas para incluir os produtos",
                            "Atenção", JOptionPane.INFORMATION_MESSAGE);
            btnGravarParcela.requestFocus();
        }
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        limparItensCompra();        
    }//GEN-LAST:event_btnLimparActionPerformed

    private void txtQuantidadeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQuantidadeFocusLost
        calcularValorTotalProduto();
    }//GEN-LAST:event_txtQuantidadeFocusLost

    private void txtValorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtValorFocusLost
        calcularValorTotalProduto();
    }//GEN-LAST:event_txtValorFocusLost

    private void txtIpiFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIpiFocusLost
        calcularValorTotalProduto();
    }//GEN-LAST:event_txtIpiFocusLost

    private void txtIcmsStFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIcmsStFocusLost
        calcularValorTotalProduto();
    }//GEN-LAST:event_txtIcmsStFocusLost

    private void txtDifIcmsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDifIcmsFocusLost
        calcularValorTotalProduto();
    }//GEN-LAST:event_txtDifIcmsFocusLost

    private void tbItensCompraMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbItensCompraMouseClicked
        if(evt.getClickCount() == 2){
            idProduto = qryItensCompra.getCurrentFieldValueAsInteger("id_produto");
            quantidade = qryItensCompra.getCurrentFieldValueAsDouble("quantidade");
            valorUnitario = qryItensCompra.getCurrentFieldValueAsDouble("valor_custo_unitario");
            ipi = qryItensCompra.getCurrentFieldValueAsDouble("ipi") == null?
                    0.0:qryItensCompra.getCurrentFieldValueAsDouble("ipi");
            icmsSt = qryItensCompra.getCurrentFieldValueAsDouble("icms_st") == null?
                    0.0:qryItensCompra.getCurrentFieldValueAsDouble("icms_st");
            difIcms = qryItensCompra.getCurrentFieldValueAsDouble("diferenca_icms") == null?
                    0.0:qryItensCompra.getCurrentFieldValueAsDouble("diferenca_icms");
            
            idItemCompra = qryItensCompra.getCurrentFieldValueAsInteger("id");
            
            txtProduto.setText(qryItensCompra.getCurrentFieldValueAsString("nome_produto"));
            txtQuantidade.setValue(quantidade);
            txtValor.setValue(valorUnitario);
            txtIpi.setValue(ipi);
            txtDifIcms.setValue(difIcms);
            txtIcmsSt.setValue((quantidade * valorUnitario) * icmsSt/100); 
            calDataVencProduto.setDateAsSQLDate(qryItensCompra.getCurrentFieldValueAsSQLDate("data_vencimento_produto"));
            
            calcularValorTotalProduto();
                    
            mudarStatusItensCompra(false);
        }
    }//GEN-LAST:event_tbItensCompraMouseClicked

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        if(idItemCompra != 0){
            if(sistema.Mensagem.showConfirmDialog(this, 
                    "Deseja realmente remover este item da compra", "Confirmação") == 0){
                
                updTransacao.setSQL("DELETE FROM itens_compras WHERE itens_compras.id = " + idItemCompra);
                updTransacao.execUpdate();

                updTransacao.setSQL(String.format(
                        "UPDATE produtos SET estoque = estoque - %s WHERE id = %s",
                        quantidade, idProduto) );
                updTransacao.execUpdate();
                
                double totalItem = quantidade * valorUnitario;
                somaItensIpi -= totalItem * ipi/100;
                somaItensIcmsSt -= totalItem * icmsSt/100;
                somaItensTotal -= totalItem + somaItensIpi + somaItensIcmsSt;
//                somaItensTotal -= quantidade * (valorUnitario + (valorUnitario * ipi/100) +
//                        (valorUnitario * icmsSt/100));
                txtConfIcmsSt.setValue(somaItensIcmsSt);
                txtConfIpi.setValue(somaItensIpi);
                txtConfValorTotal.setValue(somaItensTotal);
                
                limparItensCompra();
                
                atualizarTbItensCompra();
            }
        }else{
            JOptionPane.showMessageDialog(this, "Selecione um item da compra para excluir",
                            "Atenção", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnRemoverActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(idItemCompra != 0){
            if(sistema.Mensagem.showConfirmDialog(this, 
                    "Deseja realmente remover este item da compra", "Confirmação") == 0){
                
                updTransacao.setSQL("DELETE FROM itens_compras WHERE itens_compras.id = " + idItemCompra);
                updTransacao.execUpdate();

                updTransacao.setSQL(String.format(
                        "UPDATE produtos SET estoque = estoque - %s WHERE id = %s",
                        quantidade, idProduto) );
                updTransacao.execUpdate();
                
                double totalItem = quantidade * valorUnitario;
                somaItensIpi -= totalItem * ipi/100;
                somaItensIcmsSt -= totalItem * icmsSt/100;
                somaItensTotal -= totalItem + somaItensIpi + somaItensIcmsSt;
//                somaItensTotal -= quantidade * (valorUnitario + (valorUnitario * ipi/100) +
//                        (valorUnitario * icmsSt/100));
                txtConfIcmsSt.setValue(somaItensIcmsSt);
                txtConfIpi.setValue(somaItensIpi);
                txtConfValorTotal.setValue(somaItensTotal);
                
                limparItensCompra();
                
                atualizarTbItensCompra();
            }
        }else{
            JOptionPane.showMessageDialog(this, "Selecione um item da compra para excluir",
                            "Atenção", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Painel;
    private lib.jdb.control.jdbbuttonsave.JDBButtonSave btnAdicionar;
    private javax.swing.JButton btnCancelarVenda;
    private lib.jdb.control.jdbbuttonsave.JDBButtonSave btnFechaC;
    private javax.swing.JButton btnGravarParcela;
    private lib.jdb.control.jdbbuttoncancel.JDBButtonCancel btnLimpar;
    private javax.swing.JButton btnPesqCFOP;
    private javax.swing.JButton btnPesqFornecedor;
    private javax.swing.JButton btnPesqProduto;
    private javax.swing.JButton btnPesqTransportadora;
    private javax.swing.JButton btnRemoverParcela;
    private lib.jdb.control.jdbcalendar.JDBCalendar calDataEmissao;
    private lib.jdb.control.jdbcalendar.JDBCalendar calDataVencParcela;
    private lib.jdb.control.jdbcalendar.JDBCalendar calDataVencProduto;
    private javax.swing.JComboBox cbxFrete;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblCFOP;
    private javax.swing.JLabel lblDataEmi;
    private javax.swing.JLabel lblDataNF;
    private javax.swing.JLabel lblDataVenc;
    private javax.swing.JLabel lblDifICMS2;
    private javax.swing.JLabel lblDifICMS3;
    private javax.swing.JLabel lblFornecedor;
    private javax.swing.JLabel lblFreteTotal;
    private javax.swing.JLabel lblICMS;
    private javax.swing.JLabel lblIPI;
    private javax.swing.JLabel lblNum;
    private javax.swing.JLabel lblParcelas1;
    private javax.swing.JLabel lblParcelas2;
    private javax.swing.JLabel lblParcelas3;
    private javax.swing.JLabel lblProduto;
    private javax.swing.JLabel lblQuantidade;
    private javax.swing.JLabel lblSerie;
    private javax.swing.JLabel lblTotalICMS;
    private javax.swing.JLabel lblTotalTPI;
    private javax.swing.JLabel lblTranportadora;
    private javax.swing.JLabel lblValor;
    private javax.swing.JLabel lblValorTotal;
    private javax.swing.JLabel lblValorTotal1;
    private javax.swing.JLabel lblValorTotal2;
    private javax.swing.JLabel lblValorTotal3;
    private javax.swing.JPanel pnCodigo;
    private javax.swing.JPanel pnCodigo1;
    private javax.swing.JPanel pnProdCompra;
    private javax.swing.JScrollPane scrlProdutoCompra;
    private lib.jdb.control.jdbtable.JDBTable tbItensCompra;
    private lib.jdb.control.jdbtable.JDBTable tbParcelas;
    private javax.swing.JTextField txtCFOP;
    private javax.swing.JFormattedTextField txtConfIcmsSt;
    private javax.swing.JFormattedTextField txtConfIpi;
    private javax.swing.JFormattedTextField txtConfValorTotal;
    private javax.swing.JTextField txtDataEntrada;
    private javax.swing.JFormattedTextField txtDifIcms;
    private javax.swing.JTextField txtFornecedor;
    private javax.swing.JFormattedTextField txtFreteTotal;
    private javax.swing.JFormattedTextField txtIcmsSt;
    private javax.swing.JFormattedTextField txtIcmsStTotal;
    private lib.jdb.control.jdbtextfield.JDBTextField txtIdCompra;
    private lib.jdb.control.jdbtextfield.JDBTextField txtIdProduto;
    private javax.swing.JFormattedTextField txtIpi;
    private javax.swing.JFormattedTextField txtIpiTotal;
    private javax.swing.JTextField txtNumero;
    private javax.swing.JTextField txtNumeroParcela;
    private javax.swing.JTextField txtProduto;
    private javax.swing.JFormattedTextField txtQuantidade;
    private javax.swing.JTextField txtSerie;
    private javax.swing.JFormattedTextField txtTotalNF;
    private javax.swing.JTextField txtTransportadora;
    private javax.swing.JTextField txtUnidade;
    private javax.swing.JFormattedTextField txtValor;
    private javax.swing.JFormattedTextField txtValorParcela;
    private javax.swing.JFormattedTextField txtValorTotalProduto;
    // End of variables declaration//GEN-END:variables
    
    public void atribuirCampos(){
        if(pesquisaFornecedor){
            if(pesquisaTransportadora){
                alimentarCamposTransportadora();
                
                pesquisaTransportadora = false;
                pesquisaFornecedor = false;
            }else{
                alimentarCamposFornecedor();

                pesquisaFornecedor = false;
            }
        }else if(pesquisaCfop){
            alimentarCamposCfop();
            
            pesquisaCfop = false;
        }else if(pesquisaProduto){
            alimentarCamposProduto();
            
            pesquisaProduto = false;
        }
    }
    
    private void pesquisarFornecedor(){
        String sql, texto;
        sql = "SELECT "
                + "doc_principal, nome "
            + "FROM "
                + "vw_fornecedores_pesquisa_compra";
        if(pesquisaTransportadora){
            texto = txtTransportadora.getText();
        }else{
            texto = txtFornecedor.getText();
        }
        
        // limpando a textfield e a variável de id.
        if(pesquisaTransportadora){
            this.idTransportadora = "";
            txtTransportadora.setText("");
        }else{
            this.idFornecedor = "";
            txtFornecedor.setText("");
        }
        
        if(!texto.isEmpty()){
            if(texto.matches("[0-9]+")){
                sql += String.format(" WHERE doc_principal LIKE '%%%s%%'", texto);
            }else if(texto.matches("[a-zA-Z0-9 ]+")){
                texto = texto.replaceAll(" ", "%");
                sql += String.format(" WHERE nome LIKE '%%%s%%'", texto);
            }
            
            qryFornecedor.setSQL(sql);
            qryFornecedor.execQuery();
            
            //move o ponteiro da query para a ultima posição
            // e captura qual posição está tem com o getrow();
            qryFornecedor.last();
            if(qryFornecedor.getRow() == 1){
                if(pesquisaTransportadora){
                    alimentarCamposTransportadora();
                }else{
                    alimentarCamposFornecedor();
                }
            }else
                carregarFornecedor(qryFornecedor);
        }else{
//            //abre pesquisa genérica
            carregarFornecedor(qryFornecedor);
        }
    }
    
    private void alimentarCamposFornecedor(){
        this.idFornecedor = qryFornecedor.getCurrentFieldValueAsString("doc_principal");
        txtFornecedor.setText(qryFornecedor.getCurrentFieldValueAsString("nome"));
        txtFornecedor.setCaretPosition(0);
    }
    
    private void alimentarCamposTransportadora(){
        this.idTransportadora = qryFornecedor.getCurrentFieldValueAsString("doc_principal");
        txtTransportadora.setText(qryFornecedor.getCurrentFieldValueAsString("nome"));
        txtTransportadora.setCaretPosition(0);
    }
    
    private void carregarFornecedor(JDBQuery qry){
        String nomeTitulo;
        
        pesquisaFornecedor = true;
        pesquisaCfop = false;
        pesquisaProduto = false;
//        pesquisaTransportadora = false;
        
        if(pesquisaTransportadora){
            txtTransportadora.requestFocus();
            nomeTitulo = "Pesquisa de Transportadoras";
        }else{
            txtFornecedor.requestFocus();
            nomeTitulo = "Pesquisa de Fornecedores";
        }
        
        // campos para combobox sendo texto visual e o nome campo do banco referente.
        LinkedHashMap<String, String> combo = new LinkedHashMap<>();
        combo.put("Nome", "nome");
        combo.put("CNPJ", "doc_principal");
        
        // titulos para as colunas da tabela, sendo texto visual e nome campo do banco referente.
        LinkedHashMap<String, String> titulo = new LinkedHashMap<>();
        titulo.put("CNPJ", "doc_principal");
        titulo.put("NOME", "nome");

        // campos que deseja deixar invisível, pode-se omitir.
        String[] invisivel = null;

        // tamanho das colunas visíveis, pode-se omitir.
        int[] tamanho = null;
        
        pesquisa.iFrmPesquisa fornecedores;
        fornecedores = new pesquisa.iFrmPesquisa(this,
                nomeTitulo,
                principal.Principal.conexao.getConexao(),
                qry,
                "doc_principal",
                combo,
                titulo,
                "SELECT doc_principal, nome "
                + "FROM vw_fornecedores_pesquisa_compra",
                invisivel,
                tamanho);

        
        principal.FrmPrincipal.Desktop.add(fornecedores);
        fornecedores.setVisible(true);                        
    }
    
    private void limpar(){
        pesquisaFornecedor = false;
        pesquisaTransportadora = false;
        novaCompra = true;
        inserirFrete = true;
        
        idFornecedor = idTransportadora = "";
        idCfop = idCompra = idItemCompra = 
                idProduto = idContaPagar = 
                idItemContaPagar = idContaPagarFrete = 0;
        
        somaItensIpi = somaItensIcmsSt = somaItensTotal = valorRestante = 0.0;
        
        txtIdCompra.setText("");
        txtDataEntrada.setText("");
        txtNumero.setText("");
        txtSerie.setText("");
        txtCFOP.setText("");
        calDataEmissao.setText("");
        txtFornecedor.setText("");
        txtTransportadora.setText("");
        
        txtFreteTotal.setValue(0.0);
        txtIpiTotal.setValue(0.0);
        txtIcmsStTotal.setValue(0.0);
        txtTotalNF.setValue(0.0);
        
        txtConfIcmsSt.setValue(0.0);
        txtConfIpi.setValue(0.0);
        txtConfValorTotal.setValue(0.0);
        
        limparItensCompra();
        
        limparParcela();
        
        atualizarTbParcelas();
        atualizarTbItensCompra();
        
        txtNumero.requestFocus();
        
        mudarStatusCompCompra(true);
    }
    
    private void pesquisarCfop(){
        String sql, texto;
        sql = "SELECT "
                + "codigo, descricao "
            + "FROM "
                + "cfop";
        
        
        texto = txtCFOP.getText();
        
        // limpando a textfield e a variável de id.
        this.idCfop = 0;
        txtCFOP.setText("");
        
        if(!texto.isEmpty()){
            if(texto.matches("[0-9]+")){
                sql += String.format(" WHERE codigo = %s", texto);
            }else if(texto.matches("[a-zA-Z0-9 ]+")){
                texto = texto.replaceAll(" ", "%");
                sql += String.format(" WHERE descricao LIKE '%%%s%%'", texto);
            }
            
            qryCfop.setSQL(sql);
            qryCfop.execQuery();
            
            //move o ponteiro da query para a ultima posição
            // e captura qual posição está tem com o getrow();
            qryCfop.last();
            if(qryCfop.getRow() == 1){
                alimentarCamposCfop();
            }else
                carregarCfop(qryCfop);
        }else{
//            //abre pesquisa genérica
            carregarCfop(qryCfop);
        }
    }
    
    private void alimentarCamposCfop(){
        this.idCfop = qryCfop.getCurrentFieldValueAsInteger("codigo");
        txtCFOP.setText(qryCfop.getCurrentFieldValueAsString("descricao"));
        txtCFOP.setCaretPosition(0);
    }
    
    private void carregarCfop(JDBQuery qry){
        pesquisaCfop = true;
        pesquisaFornecedor = false;
        pesquisaProduto = false;
        pesquisaTransportadora = false;
        
        txtCFOP.requestFocus();
        
        // campos para combobox sendo texto visual e o nome campo do banco referente.
        LinkedHashMap<String, String> combo = new LinkedHashMap<>();
        combo.put("Descrição", "descricao");
        combo.put("Código", "codigo");
        
        // titulos para as colunas da tabela, sendo texto visual e nome campo do banco referente.
        LinkedHashMap<String, String> titulo = new LinkedHashMap<>();
        titulo.put("CÓDIGO", "codigo");
        titulo.put("DESCRIÇÃO", "descricao");

        // campos que deseja deixar invisível, pode-se omitir.
        String[] invisivel = null;

        // tamanho das colunas visíveis, pode-se omitir.
        int[] tamanho = {100, 600};
        
        pesquisa.iFrmPesquisa cfop;
        cfop = new pesquisa.iFrmPesquisa(this,
                "Pesquisa de Código Fiscal de Operações e Prestações(CFOP)",
                principal.Principal.conexao.getConexao(),
                qry,
                "codigo",
                combo,
                titulo,
                "SELECT codigo, descricao "
                + "FROM cfop",
                invisivel,
                tamanho);

        
        principal.FrmPrincipal.Desktop.add(cfop);
        cfop.setVisible(true);                        
    }
    
    private void pesquisarProduto(){
        String sql, texto;
        sql = "SELECT"
                + " id, nome, codigo_barra, codigo_fornecedor, categoria, sigla_unidade,"
                + " fracionado, margem, comissao, simples_nacional "
            + "FROM"
                + " vw_produtos";
        texto = txtProduto.getText();
        
        // limpando a textfield e a variável de id.
        limparItensCompra();
        
        if(!texto.isEmpty()){
            if(texto.matches("[0-9]+")){
                sql += String.format(" WHERE id = %s", texto);
            }else if(texto.matches("789[0-9]+")){
                sql += String.format(" WHERE codigo_barra LIKE '%%%s%%'");
            }else if(texto.matches("[a-zA-Z0-9 ]+")){
                texto = texto.replaceAll(" ", "%");
                sql += String.format(" WHERE nome LIKE '%%%s%%'", texto);
            }
            
            qryProduto.setSQL(sql);
            qryProduto.execQuery();
            
            //move o ponteiro da query para a ultima posição
            // e captura qual posição está tem com o getrow();
            qryProduto.last();
            if(qryProduto.getRow() == 1){
                alimentarCamposProduto();
            }else
                carregarProduto(qryProduto);
        }else{
//            //abre pesquisa genérica
            carregarProduto(qryProduto);
        }
    }
    
    private void limparItensCompra(){
        idItemCompra = 0;
        idProduto = 0;
        pesquisaProduto = false;
        fracionado = false;
        
        margem = comissao = sn = 0.0;
        
        quantidade = difIcms = ipi = icmsSt = valorUnitario = valorTotalProduto = 0.0;
        
        txtIdProduto.setText("");
        txtProduto.setText("");
        
        txtQuantidade.setValue(0.0);
        txtValor.setValue(0.0);
        txtIpi.setValue(0.0);
        txtIcmsSt.setValue(0.0);
        txtDifIcms.setValue(0.0);
        txtValorTotalProduto.setValue(0.0);
        
        txtUnidade.setText("Unidade");
        
        calDataVencProduto.setText("");
        
        txtProduto.requestFocus();
        
        mudarStatusItensCompra(true);
    }
    
    private void mudarStatusItensCompra(boolean status){
        btnPesqProduto.setEnabled(status);
        txtProduto.setFocusable(status);
        txtQuantidade.setFocusable(status);
        txtValor.setFocusable(status);
        txtIpi.setFocusable(status);
        txtIcmsSt.setFocusable(status);
        txtDifIcms.setFocusable(status);
        calDataVencParcela.setEnabled(status);
    }
    
    private void alimentarCamposProduto(){
        idProduto = qryProduto.getCurrentFieldValueAsInteger("id");
        
        txtIdProduto.setText(String.valueOf(idProduto));
        txtProduto.setText(qryProduto.getCurrentFieldValueAsString("nome"));
        txtProduto.setCaretPosition(0);
        txtUnidade.setText(qryProduto.getCurrentFieldValueAsString("sigla_unidade"));
        
        fracionado = qryProduto.getCurrentFieldValueAsBoolean("fracionado");
        
        margem = qryProduto.getCurrentFieldValueAsDouble("margem");
        comissao = qryProduto.getCurrentFieldValueAsDouble("comissao");
        sn = qryProduto.getCurrentFieldValueAsDouble("simples_nacional");        
    }
    
    private void carregarProduto(JDBQuery qryProduto){
        pesquisaProduto = true;
        pesquisaCfop = false;
        pesquisaFornecedor = false;
        pesquisaTransportadora = false;
        
        txtProduto.requestFocus();
        
        // campos para combobox sendo texto visual e o nome campo do banco referente.
        LinkedHashMap<String, String> combo = new LinkedHashMap<>();
        combo.put("Nome", "nome");
        combo.put("Código", "id");
        combo.put("Código Barra", "codigo_barra");
        combo.put("Código Fornecedor", "codigo_fornecedor");
        combo.put("Categoria", "categoria");
        
        // titulos para as colunas da tabela, sendo texto visual e nome campo do banco referente.
        LinkedHashMap<String, String> titulo = new LinkedHashMap<>();
        titulo.put("CÓDIGO", "id");
        titulo.put("NOME", "nome");
        titulo.put("CÓD.BARRA", "codigo_barra");
        titulo.put("CÓD.FORNECEDOR", "codigo_fornecedor");
        titulo.put("NOME", "nome");
        titulo.put("CATEGORIA", "categoria");

        // campos que deseja deixar invisível, pode-se omitir.
        String[] invisivel = {"sigla_unidade", "fracionado", "margem", "comissao", "simples_nacional"};

        // tamanho das colunas visíveis, pode-se omitir.
        int[] tamanho = null;
        
        pesquisa.iFrmPesquisa produtos;
        produtos = new pesquisa.iFrmPesquisa(this,
                "Pesquisa de Produtos",
                principal.Principal.conexao.getConexao(),
                qryProduto,
                "id",
                combo,
                titulo,
                "SELECT"
                    + " id, nome, codigo_barra, codigo_fornecedor, categoria, sigla_unidade,"
                    + " fracionado, margem, comissao, simples_nacional "
                + "FROM"
                    + " vw_produtos",
                invisivel,
                tamanho);

        
        principal.FrmPrincipal.Desktop.add(produtos);
        produtos.setVisible(true);                        
    }
    
    private void cancelarCompra(){
        if(sistema.Mensagem.showConfirmDialog(this, 
                "Deseja realmente cancelar a compra?", "Confirmação") == 0){
            // o evento de fechar o formulário contém conexao.cancelarTransações, 
            // eliminando as transações em aberto.
            doDefaultCloseAction();
        }
    }
    
    private void limparParcela(){
        txtNumeroParcela.setText("");
        txtValorParcela.setValue(0.0);
        calDataVencParcela.setText("");
        
        idItemContaPagar = 0;
    }
    
    private void atualizarTbParcelas(){
        qryItensContasPagar.setSQL(
                "SELECT id, data_vencimento ,numero, valor "
                + "FROM lancamentos_conta_pagar "
                + "WHERE id_conta_pagar IN (" + idContaPagar + "," + idContaPagarFrete + ") "
                + "ORDER BY id_conta_pagar AND data_vencimento");
        
        tbParcelas.setJDBQuery(qryItensContasPagar);
        
        tbParcelas.setFieldsTitle("data_vencimento", "VENC");
        tbParcelas.setFieldsTitle("numero", "NÚMERO");
        tbParcelas.setFieldsTitle("valor", "VALOR");  
        
        tbParcelas.setInvisibleFields("id");
        
        qryItensContasPagar.execQuery();
        
    }
    
    private void atualizarTbItensCompra(){
        qryItensCompra.setSQL(
                "SELECT id, id_compra, id_produto, nome_produto, quantidade, "
                    + "valor_custo_unitario, ipi, diferenca_icms, icms_st, "
                    + "frete, data_vencimento_produto "
                + "FROM vw_itens_compras "
                + "WHERE id_compra = " + idCompra);
        
        tbItensCompra.setJDBQuery(qryItensCompra);
        
        tbItensCompra.setFieldsTitle("nome_produto", "PRODUTO");
        tbItensCompra.setFieldsTitle("quantidade", "QUANT.");
        tbItensCompra.setFieldsTitle("valor_custo_unitario", "VALOR UNIT.");
        tbItensCompra.setFieldsTitle("ipi", "IPI");
        tbItensCompra.setFieldsTitle("diferenca_icms", "DIF. ICMS");
        tbItensCompra.setFieldsTitle("icms_st", "S.TRIB.");
        tbItensCompra.setFieldsTitle("frete", "FRETE");
        tbItensCompra.setFieldsTitle("data_vencimento_produto", "VENC.");
        
        tbItensCompra.setInvisibleFields("id id_compra id_produto");
        
        qryItensCompra.execQuery();
    }
    
    private void carregarParcela(){
        if(qryItensContasPagar.getRow() >= 1){
            calDataVencParcela.setDateAsSQLDate(qryItensContasPagar.getCurrentFieldValueAsSQLDate("data_vencimento"));
            txtValorParcela.setValue(qryItensContasPagar.getCurrentFieldValueAsDouble("valor"));
            txtNumeroParcela.setText(qryItensContasPagar.getCurrentFieldValueAsString("numero"));

            idItemContaPagar = qryItensContasPagar.getCurrentFieldValueAsInteger("id");
        }else{
            JOptionPane.showMessageDialog(this, "Grave parcelas para poder selecionar",
                            "Atenção", JOptionPane.INFORMATION_MESSAGE);
            calDataVencParcela.requestFocus();
        }
    }
    
    private void calcularValorTotalProduto(){
        if(txtQuantidade.getText().equals("0,000"))
            quantidade = 0.0;
        else
            quantidade = Double.valueOf(txtQuantidade.getText().replaceAll(",", "."));
        
        if(txtValor.getText().equals("0,000"))
            valorUnitario = 0.0;
        else
            valorUnitario = Double.valueOf(txtValor.getText().replaceAll(",", "."));
        
        if(txtIpi.getText().equals("0,000"))
            ipi = 0.0;
        else
            ipi = Double.valueOf(txtIpi.getText().replaceAll(",", "."));
        
        if(txtIcmsSt.getText().equals("0,000"))
            icmsSt = 0.0;
        else
            icmsSt = Double.valueOf(txtIcmsSt.getText().replaceAll(",", "."));
        
        if(txtDifIcms.getText().equals("0,000"))
            difIcms = 0.0;
        else
            difIcms = Double.valueOf(txtDifIcms.getText().replaceAll(",", "."));
        
        // convertendo o valor de icmsSt para porcentagem, somente se 
        // o valorUnitário for diferente de zero("Nunca dividiras por zero")
        if(valorUnitario != 0){
            icmsSt = (icmsSt / valorUnitario) * 100;
            // o valor de icmsSt é pelo total do produto, por isso deve ser 
            // dividido pela quantidade para encontrar a porcentagem por produto individual.
            icmsSt /= quantidade;
        }
        
        valorTotalProduto = quantidade  * (valorUnitario + 
                (valorUnitario * ipi/100) + 
                (valorUnitario * icmsSt/100) +
                (valorUnitario * difIcms/100) );
        
        txtValorTotalProduto.setValue(valorTotalProduto);
    }
    
    private void mudarStatusCompCompra(boolean status){
        txtNumero.setFocusable(status);
        txtSerie.setFocusable(status);
        txtCFOP.setFocusable(status);
        btnPesqCFOP.setEnabled(status);
        calDataEmissao.setEnabled(status);
        txtFornecedor.setFocusable(status);
        btnPesqFornecedor.setEnabled(status);
        txtTransportadora.setFocusable(status);
        btnPesqTransportadora.setEnabled(status);
        txtFreteTotal.setFocusable(status);
        cbxFrete.setEnabled(status);
        txtIcmsStTotal.setFocusable(status);
        txtIpiTotal.setFocusable(status);
        txtTotalNF.setFocusable(status);
    }
}