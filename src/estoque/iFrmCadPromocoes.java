/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package estoque;

import java.text.DecimalFormat;
import java.util.LinkedHashMap;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import lib.jdb.jdbquery.JDBQuery;
import lib.jdb.jdbupdate.JDBUpdate;
import principal.FrmLogin;

/**
 *
 * @author patri
 */
public class iFrmCadPromocoes extends javax.swing.JInternalFrame {
    private JDBQuery qryPromocao;
    private JDBQuery qryProduto;
    private JDBQuery qryVwPromocoesAtivas;
    private boolean alteracao = false, fracionado = false;
    private int id, idProduto;
    private double precoVenda = 0.0, margem = 0.0;
    
    /**
     * Creates new form iFrmCadCategoriaProd
     */
    public iFrmCadPromocoes() {
        qryPromocao = new JDBQuery();
        qryPromocao.setJDBConnection(principal.Principal.conexao.getConexao()); 
        
        qryVwPromocoesAtivas = new JDBQuery();
        qryVwPromocoesAtivas.setJDBConnection(principal.Principal.conexao.getConexao());
        
        initComponents();
        
        DecimalFormat decimal = new DecimalFormat("######0.00");        
        NumberFormatter numFormatter = new NumberFormatter(decimal);
        numFormatter.setFormat(decimal);
        numFormatter.setAllowsInvalid(false);
        DefaultFormatterFactory dfFactory = new DefaultFormatterFactory(numFormatter);
        
        txtValor.setFormatterFactory(dfFactory);
        txtQuantidade.setFormatterFactory(dfFactory);
        
        limpar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Painel = new javax.swing.JPanel();
        btnSalvar = new lib.jdb.control.jdbbuttonsave.JDBButtonSave();
        btnCancelar = new lib.jdb.control.jdbbuttoncancel.JDBButtonCancel();
        lblDesc = new javax.swing.JLabel();
        pnCodigo = new javax.swing.JPanel();
        txtID = new lib.jdb.control.jdbtextfield.JDBTextField();
        btnConsultar = new javax.swing.JButton();
        lblDesc1 = new javax.swing.JLabel();
        lblDesc2 = new javax.swing.JLabel();
        pnData = new javax.swing.JPanel();
        lblInicial = new javax.swing.JLabel();
        lblFinal = new javax.swing.JLabel();
        mskHoraInicial = new lib.jdb.control.jdbmaskedtextfield.JDBMaskedTextField();
        mskHoraFinal = new lib.jdb.control.jdbmaskedtextfield.JDBMaskedTextField();
        calDataInicial = new lib.jdb.control.jdbcalendar.JDBCalendar();
        calDataFinal = new lib.jdb.control.jdbcalendar.JDBCalendar();
        pnDatas = new javax.swing.JPanel();
        lblInc = new javax.swing.JLabel();
        txtInc = new lib.jdb.control.jdbtextfield.JDBTextField();
        lblMod = new javax.swing.JLabel();
        txtMod = new lib.jdb.control.jdbtextfield.JDBTextField();
        txtValor = new javax.swing.JFormattedTextField();
        txtQuantidade = new javax.swing.JFormattedTextField();
        txtProduto = new javax.swing.JTextField();
        btnRemover = new javax.swing.JButton();
        btnPesqProduto = new javax.swing.JButton();
        lblDesc3 = new javax.swing.JLabel();
        txtValorOriginal = new javax.swing.JFormattedTextField();

        setClosable(true);
        setIconifiable(true);
        setTitle("Cadastro de Promoções");

        Painel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)));

        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.png"))); // NOI18N
        btnSalvar.setMnemonic('s');
        btnSalvar.setFont(principal.FrmLogin.fontePadrao);
        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/return2.png"))); // NOI18N
        btnCancelar.setMnemonic('l');
        btnCancelar.setFont(principal.FrmLogin.fontePadrao);
        btnCancelar.setText("Limpar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        lblDesc.setFont(principal.FrmLogin.fontePadrao);
        lblDesc.setText("Produto:");

        pnCodigo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "Código", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        txtID.setFocusable(false);
        txtID.setFont(principal.FrmLogin.fontePadrao);

        javax.swing.GroupLayout pnCodigoLayout = new javax.swing.GroupLayout(pnCodigo);
        pnCodigo.setLayout(pnCodigoLayout);
        pnCodigoLayout.setHorizontalGroup(
            pnCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCodigoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtID, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnCodigoLayout.setVerticalGroup(
            pnCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCodigoLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        btnConsultar.setFont(principal.FrmLogin.fontePadrao);
        btnConsultar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/look.png"))); // NOI18N
        btnConsultar.setMnemonic('c');
        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        lblDesc1.setFont(principal.FrmLogin.fontePadrao);
        lblDesc1.setText("Valor unitário(R$):");

        lblDesc2.setFont(principal.FrmLogin.fontePadrao);
        lblDesc2.setText("Quantidade:");

        pnData.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "Datas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        lblInicial.setFont(principal.FrmLogin.fontePadrao);
        lblInicial.setText("Inicial:");

        lblFinal.setFont(principal.FrmLogin.fontePadrao);
        lblFinal.setText("Final:");

        mskHoraInicial.setFont(principal.FrmLogin.fontePadrao);
        mskHoraInicial.setMask("##:##:##");

        mskHoraFinal.setFont(principal.FrmLogin.fontePadrao);
        mskHoraFinal.setMask("##:##:##");

        calDataInicial.setDateFormat("dd/MM/yyyy");
        calDataInicial.setTextEditable(false);

        calDataFinal.setDateFormat("dd/MM/yyyy");
        calDataFinal.setTextEditable(false);

        javax.swing.GroupLayout pnDataLayout = new javax.swing.GroupLayout(pnData);
        pnData.setLayout(pnDataLayout);
        pnDataLayout.setHorizontalGroup(
            pnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDataLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblInicial)
                    .addGroup(pnDataLayout.createSequentialGroup()
                        .addComponent(calDataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mskHoraInicial, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
                    .addComponent(lblFinal)
                    .addGroup(pnDataLayout.createSequentialGroup()
                        .addComponent(calDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mskHoraFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnDataLayout.setVerticalGroup(
            pnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDataLayout.createSequentialGroup()
                .addComponent(lblInicial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(calDataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mskHoraInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnDataLayout.createSequentialGroup()
                        .addComponent(lblFinal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(calDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(mskHoraFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pnDatas.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "Datas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        lblInc.setFont(principal.FrmLogin.fontePadrao);
        lblInc.setText("Inclusão:");

        txtInc.setFocusable(false);

        lblMod.setFont(principal.FrmLogin.fontePadrao);
        lblMod.setText("Modificação:");

        txtMod.setFocusable(false);

        javax.swing.GroupLayout pnDatasLayout = new javax.swing.GroupLayout(pnDatas);
        pnDatas.setLayout(pnDatasLayout);
        pnDatasLayout.setHorizontalGroup(
            pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDatasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblInc)
                    .addComponent(txtInc, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnDatasLayout.createSequentialGroup()
                        .addComponent(lblMod)
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnDatasLayout.createSequentialGroup()
                        .addComponent(txtMod, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        pnDatasLayout.setVerticalGroup(
            pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnDatasLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblMod)
                    .addGroup(pnDatasLayout.createSequentialGroup()
                        .addComponent(lblInc)
                        .addGap(1, 1, 1)))
                .addGap(7, 7, 7)
                .addGroup(pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMod, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtInc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        txtValor.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtValor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtValorFocusLost(evt);
            }
        });

        txtQuantidade.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));

        txtProduto.setToolTipText("Informe o nome ou código do produto e pressione ENTER para pesquisar");
        txtProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtProdutoKeyPressed(evt);
            }
        });

        btnRemover.setIcon(new javax.swing.ImageIcon("/home/paulo/NetBeansProjects/prjSistemaCasaTintas/src/icons/delete.png")); // NOI18N
        btnRemover.setMnemonic('r');
        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed1(evt);
            }
        });

        btnPesqProduto.setFont(principal.FrmLogin.fontePadrao);
        btnPesqProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/look.png"))); // NOI18N
        btnPesqProduto.setMnemonic('c');
        btnPesqProduto.setText("Pesquisar");
        btnPesqProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesqProdutoActionPerformed(evt);
            }
        });

        lblDesc3.setFont(principal.FrmLogin.fontePadrao);
        lblDesc3.setText("Valor original(R$):");

        txtValorOriginal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtValorOriginal.setFocusable(false);
        txtValorOriginal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtValorOriginalFocusLost(evt);
            }
        });

        javax.swing.GroupLayout PainelLayout = new javax.swing.GroupLayout(Painel);
        Painel.setLayout(PainelLayout);
        PainelLayout.setHorizontalGroup(
            PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelLayout.createSequentialGroup()
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtValorOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDesc3))
                                .addGap(18, 18, 18)
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDesc1)
                                    .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDesc2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(pnData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnConsultar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                                .addComponent(btnRemover))
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pnCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDesc))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addComponent(txtProduto)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPesqProduto))
                            .addComponent(pnDatas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        PainelLayout.setVerticalGroup(
            PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PainelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(pnCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblDesc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPesqProduto))
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(lblDesc3))
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(txtValorOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(PainelLayout.createSequentialGroup()
                            .addComponent(lblDesc1)
                            .addGap(4, 4, 4)
                            .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(lblDesc2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(pnData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnDatas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConsultar)
                    .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(Painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        txtProduto.requestFocus();
        
        pesquisa.iFrmPesPromocao Promocao = new pesquisa.iFrmPesPromocao(this, qryPromocao);
        principal.FrmPrincipal.Desktop.add(Promocao);
        Promocao.setVisible(true);
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void btnRemoverActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed1
        if(FrmLogin.usuario.verificarPermissao(this, 2)){

            if(alteracao){
                if(sistema.Mensagem.showConfirmDialog(this,
                        "Deseja realmente excluir esta promoção?", "Confirmação") == 0){

                    String sql = String.format("DELETE FROM promocoes WHERE id = '%s'", id);

                    if(enviarTransacao(sql)){
                    
                        // registro de log
                        FrmLogin.log.gravar(FrmLogin.usuario.getNomeUsuario(),
                                    this, String.valueOf(id), 3);
                    }
                    
                    limpar();
                }
            }else{
                JOptionPane.showMessageDialog(this, 
                        "Consulte uma marca para excluir", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);

                btnConsultar.requestFocus();
            }
        }
    }//GEN-LAST:event_btnRemoverActionPerformed1

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        limpar();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnPesqProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesqProdutoActionPerformed
        if(idProduto != 0){
            if(sistema.Mensagem.showConfirmDialog(
                this, "Deseja pesquisa um novo produto?", "Confirmação") == 0){
                txtProduto.setText("");
                
                pesquisarProduto();
            }
        }else{
            pesquisarProduto();
        }
    }//GEN-LAST:event_btnPesqProdutoActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        if(FrmLogin.usuario.verificarPermissao(this, 1)){

            if(idProduto == 0){
                JOptionPane.showMessageDialog(this, 
                        "Consulte um produto", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
                txtProduto.requestFocus();
            }else if(txtValor.getValue().equals(0.0)){
                JOptionPane.showMessageDialog(this, 
                        "Informe o valor promocional unitário do produto", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
                txtValor.requestFocus();
            }else if(txtQuantidade.getValue().equals(0.0)){
                JOptionPane.showMessageDialog(this, 
                        "Informe uma quantidade", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
                txtQuantidade.requestFocus();
            }else if(calDataInicial.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, 
                        "Informe uma data inicial para a promoção", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
                calDataInicial.requestFocus();
            }else if(sistema.Verificador.decimal(Double.valueOf(txtQuantidade.getValue().toString())) &&
                    !fracionado){
                JOptionPane.showMessageDialog(this, 
                        "Quantidade deve ser um número inteiro", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
                txtQuantidade.requestFocus();
            }else if(!String.valueOf(mskHoraInicial.getValue().toString()).
                    matches("^([0-1][0-9]|[2][0-3]):[0-5][0-9]:[0-5][0-9]$")){
                JOptionPane.showMessageDialog(this, 
                        "Horário informado inválido\n"
                        + "Informar horário entre 00:00:00 e 23:59:59", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
                mskHoraInicial.requestFocus();
            }else if(!String.valueOf(mskHoraFinal.getValue().toString()).
                    matches("^([0-1][0-9]|[2][0-3]):[0-5][0-9]:[0-5][0-9]$")){
                JOptionPane.showMessageDialog(this, 
                        "Horário informado inválido\n"
                        + "Informar horário entre 00:00:00 e 23:59:59", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
                mskHoraFinal.requestFocus();
            }
            else{            
                String sql;
                String dataInicial, dataFinal;

                dataInicial = calDataInicial.getDateAsString() + " " + 
                    (String.valueOf(mskHoraInicial.getValue()).isEmpty()?"00:00:00":
                        mskHoraInicial.getText());
                dataFinal = calDataFinal.getText().isEmpty()?"NULL":
                                "'" + calDataFinal.getDateAsString() + " " + 
                                (String.valueOf(mskHoraFinal.getValue()).isEmpty()?"00:00:00'":
                                (mskHoraFinal.getText() + "'"));

                if(alteracao){
                    if(sistema.Mensagem.showConfirmDialog(this,
                            "Deseja realmente alterar esta promoção?", "Confirmação") == 0){                    

                        sql = String.format(
                                "UPDATE promocoes SET "
                                    + "id_produto='%s', "
                                    + "valor_unitario='%s', "
                                    + "quantidade='%s', "
                                    + "data_inicio='%s', "
                                    + "data_fim=%s "
                                + "WHERE id = %s", 
                              idProduto,
                              txtValor.getValue(),
                              txtQuantidade.getValue(),
                              dataInicial,
                              dataFinal,
                              id);

                        if(enviarTransacao(sql)){
                            
                            // registro de log
                            FrmLogin.log.gravar(FrmLogin.usuario.getNomeUsuario(),
                                    this, String.valueOf(id), 2);
                        }
                    }
                }else{
                    qryVwPromocoesAtivas.setSQL(
                            "SELECT id_produto "
                            + "FROM vw_promocoes_ativas "
                            + "WHERE id_produto = " + idProduto);
                    qryVwPromocoesAtivas.execQuery();

                    // Se já existe promoção ativa com o produto selecionado, 
                    // exibe mensagem de alerta.
                    if(qryVwPromocoesAtivas.getRow() >= 1){
                        JOptionPane.showMessageDialog(this, "Produto com promoção ativa", 
                                "Atenção", JOptionPane.INFORMATION_MESSAGE);
                        txtProduto.requestFocus();
                    }else{
                        sql = String.format(
                                  "INSERT INTO promocoes("
                                    + "id_produto, "
                                    + "valor_unitario, "
                                    + "quantidade,"
                                    + "data_inicio,"
                                    + "data_fim) VALUES("
                                    + "'%s','%s','%s','%s',%s)", 
                                  idProduto,
                                  txtValor.getValue(),
                                  txtQuantidade.getValue(),
                                  dataInicial,
                                  dataFinal,
                                  id);

                        if(enviarTransacao(sql)){
                        
                            JDBQuery temp = new JDBQuery();
                            temp.setJDBConnection(principal.Principal.conexao.getConexao());
                            temp.setSQL("SELECT LAST_INSERT_ID()");
                            temp.execQuery();
                            String id = temp.getCurrentFieldValueAsString(1);

                            // registro de log
                            FrmLogin.log.gravar(FrmLogin.usuario.getNomeUsuario(),
                                   this, id, 1); 
                        }
                    }
                }

                limpar();
            }
        }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void txtProdutoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProdutoKeyPressed
        if(evt.getKeyChar() == '\n'){
            pesquisarProduto();
        }
    }//GEN-LAST:event_txtProdutoKeyPressed

    private void txtValorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtValorFocusLost
        // se o preço informado for abaixo do preço de venda do produto
        // menos a margem, não autoriza do desconto e volta o foco mesmo componente.
        if(idProduto != 0){
            double custo = (precoVenda - (precoVenda * (margem / 100)));
            if(Double.valueOf(txtValor.getText().replaceAll(",", ".")) <=
                    custo){
                JOptionPane.showMessageDialog(this, String.format("Valor abaixo do limite de custo do produto\n"
                        + "+ Preço venda: R$ %s\n"
                        + "- Margem: %s%%\n"
                        + "= Custo: R$ %s\n", precoVenda, margem, custo),
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
                txtValor.requestFocus();
            }
        }
    }//GEN-LAST:event_txtValorFocusLost

    private void txtValorOriginalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtValorOriginalFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtValorOriginalFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Painel;
    private lib.jdb.control.jdbbuttoncancel.JDBButtonCancel btnCancelar;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnPesqProduto;
    private javax.swing.JButton btnRemover;
    private lib.jdb.control.jdbbuttonsave.JDBButtonSave btnSalvar;
    private lib.jdb.control.jdbcalendar.JDBCalendar calDataFinal;
    private lib.jdb.control.jdbcalendar.JDBCalendar calDataInicial;
    private javax.swing.JLabel lblDesc;
    private javax.swing.JLabel lblDesc1;
    private javax.swing.JLabel lblDesc2;
    private javax.swing.JLabel lblDesc3;
    private javax.swing.JLabel lblFinal;
    private javax.swing.JLabel lblInc;
    private javax.swing.JLabel lblInicial;
    private javax.swing.JLabel lblMod;
    private lib.jdb.control.jdbmaskedtextfield.JDBMaskedTextField mskHoraFinal;
    private lib.jdb.control.jdbmaskedtextfield.JDBMaskedTextField mskHoraInicial;
    private javax.swing.JPanel pnCodigo;
    private javax.swing.JPanel pnData;
    private javax.swing.JPanel pnDatas;
    private lib.jdb.control.jdbtextfield.JDBTextField txtID;
    private lib.jdb.control.jdbtextfield.JDBTextField txtInc;
    private lib.jdb.control.jdbtextfield.JDBTextField txtMod;
    private javax.swing.JTextField txtProduto;
    private javax.swing.JFormattedTextField txtQuantidade;
    private javax.swing.JFormattedTextField txtValor;
    private javax.swing.JFormattedTextField txtValorOriginal;
    // End of variables declaration//GEN-END:variables

    public void atribuirCampos(){
        int id, idProduto;
        String produto, inclusao, modificacao, inicio, fim;
        double quantidade, valor, valor_original;
        
        id = qryPromocao.getCurrentFieldValueAsInteger("id");
        idProduto = qryPromocao.getCurrentFieldValueAsInteger("id_produto");
        
        produto = qryPromocao.getCurrentFieldValueAsString("nome");
        inclusao = qryPromocao.getCurrentFieldValueAsString("data_inclusao");
        modificacao = qryPromocao.getCurrentFieldValueAsString("data_modificacao");
        inicio = qryPromocao.getCurrentFieldValueAsString("data_inicio");
        fim = qryPromocao.getCurrentFieldValueAsString("data_fim");
        
        quantidade = qryPromocao.getCurrentFieldValueAsDouble("quantidade");
        valor = qryPromocao.getCurrentFieldValueAsDouble("valor_unitario");
        valor_original = qryPromocao.getCurrentFieldValueAsDouble("valor_original");
        
        txtID.setText(String.valueOf(id));
        txtProduto.setText(produto);
        txtValor.setValue(valor);
        txtQuantidade.setValue(quantidade);
        txtInc.setText(inclusao);
        txtMod.setText(modificacao);
        txtValorOriginal.setValue(valor_original);
        
        calDataInicial.setDateAsSQLDate(qryPromocao.getCurrentFieldValueAsSQLDate("data_inicio"));
        mskHoraInicial.setValue(inicio.substring(inicio.length() - 8, inicio.length()));
        
        if(fim != null){
            calDataFinal.setDateAsSQLDate(qryPromocao.getCurrentFieldValueAsSQLDate("data_fim"));
            mskHoraFinal.setValue(fim.substring(fim.length() - 8, fim.length()));
        }else{
            calDataFinal.setText("");
            mskHoraFinal.setValue("");
        }
        
        alteracao = true;
        this.id = id;
        this.idProduto = idProduto;
    }
    
    private void limpar(){
        txtID.setText("");
        txtProduto.setText("");
        mskHoraInicial.setValue("00:00:00");
        mskHoraFinal.setValue("00:00:00");
        txtQuantidade.setValue(0.0);
        txtValor.setValue(0.0);
        txtInc.setText("");
        txtMod.setText("");
        calDataFinal.setText("");
        calDataInicial.setText("");
        txtValorOriginal.setValue(0.0);
        
        alteracao = false;
        fracionado = false;
        id = 0;
        idProduto = 0;
        precoVenda = 0.0;
        margem = 0.0;
        
        txtProduto.requestFocus();
    }
    
    private boolean enviarTransacao(String sql){
        JDBUpdate transacao = new JDBUpdate();
        transacao.setJDBConnection(principal.Principal.conexao.getConexao());

        transacao.setSQL(sql);
        transacao.setShowMessageOnError(false);
        
        boolean concluido = transacao.execUpdate();
        // Se a transação retornar erro:
        if(!concluido){
            //1451: Violação de foreign key, contém relacionamento
            if(transacao.getErrorCode() == 1451){
                JOptionPane.showMessageDialog(this, 
                        "Promoção com relacionamento, não pode ser excluída", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);                
            }else if(transacao.getErrorCode() == 1292){
                JOptionPane.showMessageDialog(this, 
                        "Data informada inválida", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
            }
        }
        
        return concluido;
    }
    
    private void pesquisarProduto(){   
        qryProduto = new JDBQuery();
        qryProduto.setJDBConnection(principal.Principal.conexao.getConexao());
        qryProduto.setConcurUpdatable(false);

        String sql = "SELECT id, nome, codigo_barra, preco_venda, margem, fracionado FROM produtos", texto;
        texto = txtProduto.getText();
        
        // limpando a textfield e a var idproduto.
        this.idProduto = 0;
        txtProduto.setText("");
        precoVenda = 0.0;
        margem = 0.0;
        
        if(!texto.isEmpty()){
            if(texto.matches("[0-9]+")){
                sql += String.format(" WHERE id = %s", texto);
            }else if(texto.matches("[a-zA-Z0-9 ]+")){
                texto = texto.replaceAll(" ", "%");
                sql += String.format(" WHERE nome LIKE '%%%s%%'", texto);
            }
            
            qryProduto.setSQL(sql);
            qryProduto.execQuery();
            
            //move o ponteiro da query para a ultima posição
            // e captura qual posição está tem com o getrow();
            qryProduto.last();
            if(qryProduto.getRow() == 1){
//                this.idProduto = qryProduto.getCurrentFieldValueAsInteger("id");
//                txtProduto.setText(qryProduto.getCurrentFieldValueAsString("nome"));
//                precoVenda = qryProduto.getCurrentFieldValueAsDouble("preco_venda");
//                margem = qryProduto.getCurrentFieldValueAsDouble("margem");
                atribuirProduto();
            }else
                carregarPesProduto(qryProduto);
        }else{
            //abre pesquisa genérica
            carregarPesProduto(qryProduto);
        }
    }
    
    private void carregarPesProduto(JDBQuery qryProduto){
        txtProduto.requestFocus();
        
        // campos para combobox sendo texto visual e o nome campo do banco referente.
        LinkedHashMap<String, String> combo = new LinkedHashMap<>();
        combo.put("Nome", "nome");
        combo.put("Código", "id");
        combo.put("Código de barra","codigo_barra");
        
        // titulos para as colunas da tabela, sendo texto visual e nome campo do banco referente.
        LinkedHashMap<String, String> titulo = new LinkedHashMap<>();
        titulo.put("CÓD", "id");
        titulo.put("NOME", "nome");
        titulo.put("CÓD.BARRA", "codigo_barra");

        // campos que deseja deixar invisível, pode-se omitir.
        String[] invisivel = {"preco_venda", "margem", "fracionado"};

        // tamanho das colunas visíveis, pode-se omitir.
        int[] tamanho = null;
        
        pesquisa.iFrmPesquisa produtos;
        produtos = new pesquisa.iFrmPesquisa(this,
                "Pesquisa de Produtos",
                principal.Principal.conexao.getConexao(),
                qryProduto,
                "id",
                combo,
                titulo,
                "SELECT id, nome, codigo_barra, preco_venda, margem, fracionado FROM produtos",
                invisivel,
                tamanho);

        
        principal.FrmPrincipal.Desktop.add(produtos);
        produtos.setVisible(true);
    }
    
    public void atribuirProduto(){
        this.idProduto = qryProduto.getCurrentFieldValueAsInteger("id");
        txtProduto.setText(qryProduto.getCurrentFieldValueAsString("nome"));
        precoVenda = qryProduto.getCurrentFieldValueAsDouble("preco_venda");
        txtValorOriginal.setValue(precoVenda);
        margem = qryProduto.getCurrentFieldValueAsDouble("margem");
        fracionado = qryProduto.getCurrentFieldValueAsBoolean("fracionado");
    }
}
