/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pessoa;

import java.sql.Date;
import java.text.DecimalFormat;
import java.util.LinkedHashMap;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import lib.jdb.jdbquery.JDBQuery;
import lib.jdb.jdbupdate.JDBUpdate;
import principal.FrmLogin;
import sistema.Conexao;
import sistema.Localidade;

/**
 *
 * @author patri
 */
public class iFrmCadPessoa extends javax.swing.JInternalFrame {
    
    private Conexao conexao;
    private JDBQuery consulta;
    private JDBQuery qryAtribuiPes, qryPessoa, qryEndereco, qryTelefone, qryEmail;
    int idEnd, idEmail, idTel, tipo, padrao=0;
    boolean novaPessoa=true, novoEndereco=true, novoEmail=true, novoTelefone=true, padEnd, padEmail, padTel;
    String sql, cpf_cnpj, rg_ie, cep_pes, cep_end, telefone;
    
    /**
     * Creates new form iFrmCadPessoa
     */
    
    public iFrmCadPessoa() {
//        teste teste teste teste teste teste teste teste teste 
//        principal.Principal.conexao.abrirTransacoes();
//        teste teste teste teste teste teste teste teste teste 
        
        qryAtribuiPes = new JDBQuery();
        qryAtribuiPes.setJDBConnection(principal.Principal.conexao.getConexao());
        qryAtribuiPes.setLanguage("pt");
        qryAtribuiPes.setDateFormat("dd/MM/yyyy");
        qryAtribuiPes.setTimeStampFormat("dd/MM/yyyy HH:mm:ss");
        qryAtribuiPes.setConcurUpdatable(false);
        
        qryPessoa = new JDBQuery();
        qryPessoa.setJDBConnection(principal.Principal.conexao.getConexao());
        qryPessoa.setLanguage("pt");
        qryPessoa.setConcurUpdatable(false);
        
        qryEndereco = new JDBQuery();
        qryEndereco.setJDBConnection(principal.Principal.conexao.getConexao());
        qryEndereco.setLanguage("pt");
        qryEndereco.setConcurUpdatable(false);
        
        qryTelefone = new JDBQuery();
        qryTelefone.setJDBConnection(principal.Principal.conexao.getConexao());
        qryTelefone.setLanguage("pt");
        qryTelefone.setConcurUpdatable(false);
        
        qryEmail = new JDBQuery();
        qryEmail.setJDBConnection(principal.Principal.conexao.getConexao());
        qryEmail.setLanguage("pt");
        qryEmail.setConcurUpdatable(false);
        
        initComponents();
        
        tbEndereco.setFieldsTitle("descricao", "Endereço");
        tbEndereco.setFieldsTitle("desc_padrao", "Padrão");
        tbEndereco.setInvisibleFields("id padrao");
        
        tbEmail.setFieldsTitle("descricao", "Email");
        tbEmail.setFieldsTitle("desc_padrao", "Padrão");
        tbEmail.setInvisibleFields("id padrao");
        
        tbTelefone.setFieldsTitle("descricao", "Telefone");
        tbTelefone.setFieldsTitle("desc_padrao", "Padrão");
        tbTelefone.setInvisibleFields("id padrao");
        
        //criando mascara e atribuindo formato aos formattedTextField
//        DecimalFormat decimal = new DecimalFormat("#,###,##0.00#"); // original
        DecimalFormat decimal = new DecimalFormat("######0.00");        
        NumberFormatter numFormatter = new NumberFormatter(decimal);
        numFormatter.setFormat(decimal);
        numFormatter.setAllowsInvalid(false);
        DefaultFormatterFactory dfFactory = new DefaultFormatterFactory(numFormatter);
        
        frmLimiteCredito.setFormatterFactory(dfFactory);
        
        calDataNasc.setDateFormat("dd/MM/yyyy");
        
        frmLimiteCredito.setValue(0.0);
        
        /*
        mskCEP_Pes.setMask("#####-###");
        mskCEP_End.setMask("#####-###");
        */
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rdgTipo = new lib.jdb.control.jdbradiobutton.JDBRadioGroup();
        pnPessoa = new javax.swing.JPanel();
        pnClassificacao = new javax.swing.JPanel();
        cbxCliente = new lib.jdb.control.jdbcheckbox.JDBCheckBox();
        cbxFornecedor = new lib.jdb.control.jdbcheckbox.JDBCheckBox();
        cbxFuncionario = new lib.jdb.control.jdbcheckbox.JDBCheckBox();
        pnTipoFornecedor = new javax.swing.JPanel();
        rdFis = new lib.jdb.control.jdbradiobutton.JDBRadioButton();
        rdJud = new lib.jdb.control.jdbradiobutton.JDBRadioButton();
        lblDocPrincipal = new javax.swing.JLabel();
        lblDocSecundario = new javax.swing.JLabel();
        lblNome = new javax.swing.JLabel();
        txtNome = new lib.jdb.control.jdbtextfield.JDBTextField();
        lblDataNasc = new javax.swing.JLabel();
        lblCidadeNatal = new javax.swing.JLabel();
        txtCidadeNatal = new lib.jdb.control.jdbtextfield.JDBTextField();
        lblEstadoCivil = new javax.swing.JLabel();
        lblFantasia = new javax.swing.JLabel();
        txtFantasia = new lib.jdb.control.jdbtextfield.JDBTextField();
        lblPesAutorizada = new javax.swing.JLabel();
        txtPessoaAutorizada = new lib.jdb.control.jdbtextfield.JDBTextField();
        lblLimiteCredito = new javax.swing.JLabel();
        lblCEP1 = new javax.swing.JLabel();
        cbbEstadoCivil = new javax.swing.JComboBox<String>();
        pnDatas = new javax.swing.JPanel();
        lblInc = new javax.swing.JLabel();
        txtInc = new lib.jdb.control.jdbtextfield.JDBTextField();
        lblMod = new javax.swing.JLabel();
        txtMod = new lib.jdb.control.jdbtextfield.JDBTextField();
        btnSalvar_Pes = new lib.jdb.control.jdbbuttonsave.JDBButtonSave();
        btnConsultar_Pes = new javax.swing.JButton();
        btnLimpar_Pes = new lib.jdb.control.jdbbuttoncancel.JDBButtonCancel();
        calDataNasc = new lib.jdb.control.jdbcalendar.JDBCalendar();
        btnRemoverPes = new javax.swing.JButton();
        mskDocPrincipal = new lib.jdb.control.jdbmaskedtextfield.JDBMaskedTextField();
        mskCEP_Pes = new lib.jdb.control.jdbmaskedtextfield.JDBMaskedTextField();
        mskDocSecundario = new lib.jdb.control.jdbmaskedtextfield.JDBMaskedTextField();
        frmLimiteCredito = new javax.swing.JFormattedTextField();
        chbAtivo = new javax.swing.JCheckBox();
        Tabelas = new javax.swing.JTabbedPane();
        pnEndereco = new javax.swing.JPanel();
        scrlEnd = new javax.swing.JScrollPane();
        tbEndereco = new lib.jdb.control.jdbtable.JDBTable();
        lblCEP = new javax.swing.JLabel();
        btnSalvar_End = new lib.jdb.control.jdbbuttonsave.JDBButtonSave();
        btnDefPad_End = new javax.swing.JButton();
        btnLimpa_End = new lib.jdb.control.jdbbuttoncancel.JDBButtonCancel();
        lblRua = new javax.swing.JLabel();
        txtRua = new javax.swing.JTextField();
        lblNum = new javax.swing.JLabel();
        txtNum = new javax.swing.JTextField();
        lblBairro = new javax.swing.JLabel();
        txtBairro = new javax.swing.JTextField();
        lblCidade = new javax.swing.JLabel();
        txtCidade = new javax.swing.JTextField();
        lblEstado = new javax.swing.JLabel();
        txtEstado = new javax.swing.JTextField();
        mskCEP_End = new lib.jdb.control.jdbmaskedtextfield.JDBMaskedTextField();
        btnRemoverEnd = new javax.swing.JButton();
        pnEmail = new javax.swing.JPanel();
        scrlEmail = new javax.swing.JScrollPane();
        tbEmail = new lib.jdb.control.jdbtable.JDBTable();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        btnSalvar_Email = new lib.jdb.control.jdbbuttonsave.JDBButtonSave();
        btnDefPad_Email = new javax.swing.JButton();
        btnLimpar_Email = new lib.jdb.control.jdbbuttoncancel.JDBButtonCancel();
        btnRemoverEmail = new javax.swing.JButton();
        pnTelefone = new javax.swing.JPanel();
        scrlTelefone = new javax.swing.JScrollPane();
        tbTelefone = new lib.jdb.control.jdbtable.JDBTable();
        lblTelefone = new javax.swing.JLabel();
        btnSalvar_Tel = new lib.jdb.control.jdbbuttonsave.JDBButtonSave();
        btnDefPad_Tel = new javax.swing.JButton();
        btnLimpar_Tel = new lib.jdb.control.jdbbuttoncancel.JDBButtonCancel();
        btnRemoverTel = new javax.swing.JButton();
        mskTelefone = new lib.jdb.control.jdbmaskedtextfield.JDBMaskedTextField();
        cbDigito = new javax.swing.JCheckBox();

        rdgTipo.addJDBRadioButton(rdFis);
        rdgTipo.addJDBRadioButton(rdJud);

        setClosable(true);
        setIconifiable(true);
        setTitle("Cadastro de Pessoa");

        pnPessoa.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)));

        pnClassificacao.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "Classificação", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        cbxCliente.setJDBQuery(qryPessoa);
        cbxCliente.setFont(principal.FrmLogin.fontePadrao);
        cbxCliente.setText("Cliente");

        cbxFornecedor.setJDBQuery(qryPessoa);
        cbxFornecedor.setFont(principal.FrmLogin.fontePadrao);
        cbxFornecedor.setText("Fornecedor");

        cbxFuncionario.setJDBQuery(qryPessoa);
        cbxFuncionario.setFont(principal.FrmLogin.fontePadrao);
        cbxFuncionario.setText("Funcionário");

        javax.swing.GroupLayout pnClassificacaoLayout = new javax.swing.GroupLayout(pnClassificacao);
        pnClassificacao.setLayout(pnClassificacaoLayout);
        pnClassificacaoLayout.setHorizontalGroup(
            pnClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnClassificacaoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbxCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnClassificacaoLayout.setVerticalGroup(
            pnClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnClassificacaoLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(pnClassificacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        pnTipoFornecedor.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "Tipo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        rdFis.setJDBQuery(qryPessoa);
        rdFis.setFont(principal.FrmLogin.fontePadrao);
        rdFis.setText("Física");
        rdFis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdFisMouseClicked(evt);
            }
        });

        rdJud.setJDBQuery(qryPessoa);
        rdJud.setFont(principal.FrmLogin.fontePadrao);
        rdJud.setText("Jurídica");
        rdJud.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdJudMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnTipoFornecedorLayout = new javax.swing.GroupLayout(pnTipoFornecedor);
        pnTipoFornecedor.setLayout(pnTipoFornecedorLayout);
        pnTipoFornecedorLayout.setHorizontalGroup(
            pnTipoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTipoFornecedorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdFis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(rdJud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnTipoFornecedorLayout.setVerticalGroup(
            pnTipoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTipoFornecedorLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(pnTipoFornecedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdFis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdJud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        lblDocPrincipal.setFont(principal.FrmLogin.fontePadrao);
        lblDocPrincipal.setText("Doc. Principal:");

        lblDocSecundario.setFont(principal.FrmLogin.fontePadrao);
        lblDocSecundario.setText("Doc. Secundário:");

        lblNome.setFont(principal.FrmLogin.fontePadrao);
        lblNome.setText("Nome:");

        txtNome.setJDBQuery(qryPessoa);
        txtNome.setFont(principal.FrmLogin.fontePadrao);

        lblDataNasc.setFont(principal.FrmLogin.fontePadrao);
        lblDataNasc.setText("Data de Nascimento:");

        lblCidadeNatal.setFont(principal.FrmLogin.fontePadrao);
        lblCidadeNatal.setText("Cidade Natal:");

        txtCidadeNatal.setJDBQuery(qryPessoa);
        txtCidadeNatal.setFocusable(false);
        txtCidadeNatal.setFont(principal.FrmLogin.fontePadrao);

        lblEstadoCivil.setFont(principal.FrmLogin.fontePadrao);
        lblEstadoCivil.setText("Estado Civil:");

        lblFantasia.setFont(principal.FrmLogin.fontePadrao);
        lblFantasia.setText("Fantasia:");

        txtFantasia.setJDBQuery(qryPessoa);
        txtFantasia.setFont(principal.FrmLogin.fontePadrao);

        lblPesAutorizada.setFont(principal.FrmLogin.fontePadrao);
        lblPesAutorizada.setText("Pessoa Autorizada:");

        txtPessoaAutorizada.setJDBQuery(qryPessoa);
        txtPessoaAutorizada.setFont(principal.FrmLogin.fontePadrao);
        txtPessoaAutorizada.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPessoaAutorizadaFocusGained(evt);
            }
        });

        lblLimiteCredito.setFont(principal.FrmLogin.fontePadrao);
        lblLimiteCredito.setText("Limite de Crédito:");

        lblCEP1.setFont(principal.FrmLogin.fontePadrao);
        lblCEP1.setText("CEP:");

        cbbEstadoCivil.setFont(principal.FrmLogin.fontePadrao);
        cbbEstadoCivil.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "Solteiro(a)", "Casado(a)", "Separado(a)", "Divorciado(a)", "Viúvo(a)" }));

        pnDatas.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "Datas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        lblInc.setFont(principal.FrmLogin.fontePadrao);
        lblInc.setText("Inclusão:");

        txtInc.setFocusable(false);

        lblMod.setFont(principal.FrmLogin.fontePadrao);
        lblMod.setText("Modificação:");

        txtMod.setFocusable(false);

        javax.swing.GroupLayout pnDatasLayout = new javax.swing.GroupLayout(pnDatas);
        pnDatas.setLayout(pnDatasLayout);
        pnDatasLayout.setHorizontalGroup(
            pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDatasLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblInc)
                    .addComponent(txtInc, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMod)
                    .addComponent(txtMod, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );
        pnDatasLayout.setVerticalGroup(
            pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnDatasLayout.createSequentialGroup()
                .addGroup(pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInc)
                    .addComponent(lblMod))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtInc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        btnSalvar_Pes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/document_add.png"))); // NOI18N
        btnSalvar_Pes.setMnemonic('s');
        btnSalvar_Pes.setFont(principal.FrmLogin.fontePadrao);
        btnSalvar_Pes.setText("Salvar");
        btnSalvar_Pes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvar_PesActionPerformed(evt);
            }
        });

        btnConsultar_Pes.setFont(principal.FrmLogin.fontePadrao);
        btnConsultar_Pes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/look.png"))); // NOI18N
        btnConsultar_Pes.setMnemonic('c');
        btnConsultar_Pes.setText("Consultar");
        btnConsultar_Pes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultar_PesActionPerformed(evt);
            }
        });

        btnLimpar_Pes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/return2.png"))); // NOI18N
        btnLimpar_Pes.setMnemonic('l');
        btnLimpar_Pes.setFont(principal.FrmLogin.fontePadrao);
        btnLimpar_Pes.setNextFocusableComponent(txtRua);
        btnLimpar_Pes.setText("Limpar");
        btnLimpar_Pes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpar_PesActionPerformed(evt);
            }
        });

        calDataNasc.setFont(principal.FrmLogin.fontePadrao);
        calDataNasc.setjDBQuery(qryPessoa);
        calDataNasc.setTextEditable(false);

        btnRemoverPes.setFont(principal.FrmLogin.fontePadrao);
        btnRemoverPes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete.png"))); // NOI18N
        btnRemoverPes.setText("Remover");
        btnRemoverPes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverPesActionPerformed(evt);
            }
        });

        mskDocPrincipal.setFont(principal.FrmLogin.fontePadrao);
        mskDocPrincipal.setMask("");

        mskCEP_Pes.setFont(principal.FrmLogin.fontePadrao);
        mskCEP_Pes.setMask("#####-###");
        mskCEP_Pes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                mskCEP_PesFocusLost(evt);
            }
        });

        mskDocSecundario.setFont(principal.FrmLogin.fontePadrao);
        mskDocSecundario.setMask("");

        frmLimiteCredito.setFont(principal.FrmLogin.fontePadrao);

        chbAtivo.setSelected(true);
        chbAtivo.setText("Ativo");

        javax.swing.GroupLayout pnPessoaLayout = new javax.swing.GroupLayout(pnPessoa);
        pnPessoa.setLayout(pnPessoaLayout);
        pnPessoaLayout.setHorizontalGroup(
            pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnPessoaLayout.createSequentialGroup()
                .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnPessoaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnPessoaLayout.createSequentialGroup()
                                .addComponent(btnSalvar_Pes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnConsultar_Pes)
                                .addGap(119, 119, 119)
                                .addComponent(btnLimpar_Pes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnRemoverPes))
                            .addComponent(pnDatas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(pnPessoaLayout.createSequentialGroup()
                        .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnPessoaLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(pnClassificacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(pnTipoFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnPessoaLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnPessoaLayout.createSequentialGroup()
                                        .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblPesAutorizada)
                                            .addComponent(txtPessoaAutorizada, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lblLimiteCredito, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(frmLimiteCredito)))
                                    .addGroup(pnPessoaLayout.createSequentialGroup()
                                        .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblDocPrincipal)
                                            .addComponent(mskDocPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblDocSecundario)
                                            .addGroup(pnPessoaLayout.createSequentialGroup()
                                                .addComponent(mskDocSecundario, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(chbAtivo))))
                                    .addGroup(pnPessoaLayout.createSequentialGroup()
                                        .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtNome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblNome)
                                            .addComponent(lblFantasia)
                                            .addComponent(txtFantasia, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lblEstadoCivil)
                                            .addComponent(lblDataNasc)
                                            .addComponent(calDataNasc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(cbbEstadoCivil, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(pnPessoaLayout.createSequentialGroup()
                                        .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblCEP1)
                                            .addComponent(mskCEP_Pes, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtCidadeNatal, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblCidadeNatal))))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnPessoaLayout.setVerticalGroup(
            pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnPessoaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnClassificacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnTipoFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDocPrincipal)
                    .addComponent(lblDocSecundario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mskDocPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mskDocSecundario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chbAtivo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNome)
                    .addComponent(lblDataNasc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calDataNasc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnPessoaLayout.createSequentialGroup()
                        .addComponent(lblFantasia, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFantasia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbbEstadoCivil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCidadeNatal)
                            .addComponent(lblCEP1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtCidadeNatal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mskCEP_Pes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPesAutorizada)
                            .addComponent(lblLimiteCredito)))
                    .addComponent(lblEstadoCivil))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPessoaAutorizada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(frmLimiteCredito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(pnDatas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnPessoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvar_Pes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConsultar_Pes)
                    .addComponent(btnLimpar_Pes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoverPes))
                .addContainerGap())
        );

        pnEndereco.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N
        pnEndereco.setNextFocusableComponent(txtRua);

        scrlEnd.setFont(principal.FrmLogin.fontePadrao);

        tbEndereco.setJDBQuery(qryEndereco);
        tbEndereco.setEditable(false);
        tbEndereco.setInvisibleFields("id padrao");
        tbEndereco.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbEnderecoMouseClicked(evt);
            }
        });
        scrlEnd.setViewportView(tbEndereco);

        lblCEP.setFont(principal.FrmLogin.fontePadrao);
        lblCEP.setText("CEP:");

        btnSalvar_End.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/document_add.png"))); // NOI18N
        btnSalvar_End.setMnemonic('s');
        btnSalvar_End.setFont(principal.FrmLogin.fontePadrao);
        btnSalvar_End.setText("Salvar");
        btnSalvar_End.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvar_EndActionPerformed(evt);
            }
        });
        btnSalvar_End.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnSalvar_EndFocusGained(evt);
            }
        });

        btnDefPad_End.setFont(principal.FrmLogin.fontePadrao);
        btnDefPad_End.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/document.png"))); // NOI18N
        btnDefPad_End.setMnemonic('d');
        btnDefPad_End.setText("Definir Padrão");
        btnDefPad_End.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDefPad_EndActionPerformed(evt);
            }
        });

        btnLimpa_End.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/return2.png"))); // NOI18N
        btnLimpa_End.setMnemonic('l');
        btnLimpa_End.setFont(principal.FrmLogin.fontePadrao);
        btnLimpa_End.setText("Limpar");
        btnLimpa_End.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpa_EndActionPerformed(evt);
            }
        });

        lblRua.setFont(principal.FrmLogin.fontePadrao);
        lblRua.setText("Rua:");

        txtRua.setFont(principal.FrmLogin.fontePadrao);

        lblNum.setFont(principal.FrmLogin.fontePadrao);
        lblNum.setText("Numero:");

        txtNum.setFont(principal.FrmLogin.fontePadrao);

        lblBairro.setFont(principal.FrmLogin.fontePadrao);
        lblBairro.setText("Bairro:");

        txtBairro.setFont(principal.FrmLogin.fontePadrao);

        lblCidade.setFont(principal.FrmLogin.fontePadrao);
        lblCidade.setText("Cidade:");

        txtCidade.setFont(principal.FrmLogin.fontePadrao);
        txtCidade.setFocusable(false);

        lblEstado.setFont(principal.FrmLogin.fontePadrao);
        lblEstado.setText("Estado:");

        txtEstado.setFont(principal.FrmLogin.fontePadrao);
        txtEstado.setFocusable(false);

        mskCEP_End.setFont(principal.FrmLogin.fontePadrao);
        mskCEP_End.setMask("#####-###");
        mskCEP_End.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                mskCEP_EndFocusLost(evt);
            }
        });

        btnRemoverEnd.setFont(principal.FrmLogin.fontePadrao);
        btnRemoverEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete.png"))); // NOI18N
        btnRemoverEnd.setText("Remover");
        btnRemoverEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverEndActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnEnderecoLayout = new javax.swing.GroupLayout(pnEndereco);
        pnEndereco.setLayout(pnEnderecoLayout);
        pnEnderecoLayout.setHorizontalGroup(
            pnEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnEnderecoLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrlEnd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                    .addGroup(pnEnderecoLayout.createSequentialGroup()
                        .addComponent(btnSalvar_End, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDefPad_End)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLimpa_End, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemoverEnd))
                    .addGroup(pnEnderecoLayout.createSequentialGroup()
                        .addGroup(pnEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCEP)
                            .addComponent(mskCEP_End, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCidade)
                            .addComponent(txtCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnEnderecoLayout.createSequentialGroup()
                                .addComponent(lblEstado)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtEstado)))
                    .addGroup(pnEnderecoLayout.createSequentialGroup()
                        .addGroup(pnEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtRua, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRua))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNum)
                            .addComponent(txtNum, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnEnderecoLayout.createSequentialGroup()
                                .addComponent(lblBairro)
                                .addGap(0, 169, Short.MAX_VALUE))
                            .addComponent(txtBairro))))
                .addGap(10, 10, 10))
        );
        pnEnderecoLayout.setVerticalGroup(
            pnEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnEnderecoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrlEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNum)
                    .addComponent(lblRua)
                    .addComponent(lblBairro))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRua, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBairro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnEnderecoLayout.createSequentialGroup()
                        .addGroup(pnEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCidade)
                            .addComponent(lblCEP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mskCEP_End, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnEnderecoLayout.createSequentialGroup()
                        .addComponent(lblEstado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnEnderecoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvar_End, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDefPad_End)
                    .addComponent(btnLimpa_End, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoverEnd))
                .addGap(10, 10, 10))
        );

        Tabelas.addTab("Endereço", pnEndereco);

        pnEmail.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        scrlEmail.setFont(principal.FrmLogin.fontePadrao);

        tbEmail.setJDBQuery(qryEmail);
        tbEmail.setEditable(false);
        tbEmail.setInvisibleFields("id padrao");
        tbEmail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbEmailMouseClicked(evt);
            }
        });
        scrlEmail.setViewportView(tbEmail);

        lblEmail.setFont(principal.FrmLogin.fontePadrao);
        lblEmail.setText("Email:");

        txtEmail.setFont(principal.FrmLogin.fontePadrao);

        btnSalvar_Email.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/document_add.png"))); // NOI18N
        btnSalvar_Email.setMnemonic('s');
        btnSalvar_Email.setFont(principal.FrmLogin.fontePadrao);
        btnSalvar_Email.setText("Salvar");
        btnSalvar_Email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvar_EmailActionPerformed(evt);
            }
        });

        btnDefPad_Email.setFont(principal.FrmLogin.fontePadrao);
        btnDefPad_Email.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/document.png"))); // NOI18N
        btnDefPad_Email.setMnemonic('d');
        btnDefPad_Email.setText("Definir Padrão");
        btnDefPad_Email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDefPad_EmailActionPerformed(evt);
            }
        });

        btnLimpar_Email.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/return2.png"))); // NOI18N
        btnLimpar_Email.setMnemonic('l');
        btnLimpar_Email.setFont(principal.FrmLogin.fontePadrao);
        btnLimpar_Email.setText("Limpar");
        btnLimpar_Email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpar_EmailActionPerformed(evt);
            }
        });

        btnRemoverEmail.setFont(principal.FrmLogin.fontePadrao);
        btnRemoverEmail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete.png"))); // NOI18N
        btnRemoverEmail.setText("Remover");
        btnRemoverEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverEmailActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnEmailLayout = new javax.swing.GroupLayout(pnEmail);
        pnEmail.setLayout(pnEmailLayout);
        pnEmailLayout.setHorizontalGroup(
            pnEmailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnEmailLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnEmailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrlEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnEmailLayout.createSequentialGroup()
                        .addComponent(btnSalvar_Email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDefPad_Email)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLimpar_Email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemoverEmail))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnEmailLayout.createSequentialGroup()
                        .addGroup(pnEmailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblEmail, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEmail, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
        );
        pnEmailLayout.setVerticalGroup(
            pnEmailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnEmailLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrlEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblEmail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnEmailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvar_Email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDefPad_Email)
                    .addComponent(btnRemoverEmail)
                    .addComponent(btnLimpar_Email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        Tabelas.addTab("Email", pnEmail);

        pnTelefone.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        scrlTelefone.setFont(principal.FrmLogin.fontePadrao);

        tbTelefone.setJDBQuery(qryTelefone);
        tbTelefone.setEditable(false);
        tbTelefone.setInvisibleFields("id padrao");
        tbTelefone.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbTelefoneMouseClicked(evt);
            }
        });
        scrlTelefone.setViewportView(tbTelefone);

        lblTelefone.setFont(principal.FrmLogin.fontePadrao);
        lblTelefone.setText("Telefone:");

        btnSalvar_Tel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/document_add.png"))); // NOI18N
        btnSalvar_Tel.setMnemonic('s');
        btnSalvar_Tel.setFont(principal.FrmLogin.fontePadrao);
        btnSalvar_Tel.setText("Salvar");
        btnSalvar_Tel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvar_TelActionPerformed(evt);
            }
        });

        btnDefPad_Tel.setFont(principal.FrmLogin.fontePadrao);
        btnDefPad_Tel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/document.png"))); // NOI18N
        btnDefPad_Tel.setMnemonic('d');
        btnDefPad_Tel.setText("Definir Padrão");
        btnDefPad_Tel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDefPad_TelActionPerformed(evt);
            }
        });

        btnLimpar_Tel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/return2.png"))); // NOI18N
        btnLimpar_Tel.setMnemonic('l');
        btnLimpar_Tel.setFont(principal.FrmLogin.fontePadrao);
        btnLimpar_Tel.setText("Limpar");
        btnLimpar_Tel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpar_TelActionPerformed(evt);
            }
        });

        btnRemoverTel.setFont(principal.FrmLogin.fontePadrao);
        btnRemoverTel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete.png"))); // NOI18N
        btnRemoverTel.setText("Remover");
        btnRemoverTel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverTelActionPerformed(evt);
            }
        });

        mskTelefone.setFont(principal.FrmLogin.fontePadrao);
        mskTelefone.setMask("(##)#####-####");

        cbDigito.setText("8 Digitos");
        cbDigito.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbDigitoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnTelefoneLayout = new javax.swing.GroupLayout(pnTelefone);
        pnTelefone.setLayout(pnTelefoneLayout);
        pnTelefoneLayout.setHorizontalGroup(
            pnTelefoneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTelefoneLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnTelefoneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrlTelefone, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                    .addGroup(pnTelefoneLayout.createSequentialGroup()
                        .addComponent(btnSalvar_Tel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDefPad_Tel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLimpar_Tel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemoverTel))
                    .addGroup(pnTelefoneLayout.createSequentialGroup()
                        .addGroup(pnTelefoneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTelefone)
                            .addGroup(pnTelefoneLayout.createSequentialGroup()
                                .addComponent(mskTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbDigito)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
        );
        pnTelefoneLayout.setVerticalGroup(
            pnTelefoneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTelefoneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrlTelefone, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTelefone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnTelefoneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mskTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbDigito))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnTelefoneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvar_Tel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDefPad_Tel)
                    .addComponent(btnLimpar_Tel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoverTel))
                .addGap(10, 10, 10))
        );

        Tabelas.addTab("Telefone", pnTelefone);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Tabelas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Tabelas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultar_PesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultar_PesActionPerformed
        limpaTudo();
        
        pesquisa.iFrmPesPessoa pes = new pesquisa.iFrmPesPessoa(this, qryAtribuiPes);
        principal.FrmPrincipal.Desktop.add(pes);
        pes.setVisible(true);
        
    }//GEN-LAST:event_btnConsultar_PesActionPerformed

    private void btnSalvar_PesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvar_PesActionPerformed
        if(FrmLogin.usuario.verificarPermissao(this, 1)){
            // Realiza verificações para salvar uma pessoa ao banco.

            if (cbxCliente.isSelected() == false && 
                    cbxFornecedor.isSelected() == false && 
                    cbxFuncionario.isSelected() == false){

                JOptionPane.showMessageDialog(this, "Selecione uma das classificações correspondentes.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if (rdFis.isSelected() == false &&
                    rdJud.isSelected() == false){

                JOptionPane.showMessageDialog(this, "Selecione um tipo correspondente.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if(mskDocPrincipal.getText().isEmpty()){

                JOptionPane.showMessageDialog(this, "Informe o documento principal.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if(mskDocPrincipal.getText().length() > 18){

                JOptionPane.showMessageDialog(this, "Documento principal deve ter no máximo 18 caracteres.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if (mskDocSecundario.getText().isEmpty()){

                JOptionPane.showMessageDialog(this, "Informe o documento secundário.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if (mskDocSecundario.getText().length() > 15){

                JOptionPane.showMessageDialog(this, "Documento secundário deve ter no máximo 15 caracteres.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if (txtNome.getText().isEmpty()){

                JOptionPane.showMessageDialog(this, "Informe o nome.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if (txtNome.getText().length() > 100){

                JOptionPane.showMessageDialog(this, "Nome deve ter no máximo 100 caracteres.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

    //        }else if (calDataNasc.getText().isEmpty()){
    //            
    //            JOptionPane.showMessageDialog(this, "Informe a data de nascimento.", 
    //                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
    //            
    //        }else if (calDataNasc.getText().length() > 10){
    //            
    //            JOptionPane.showMessageDialog(this, "Data de nascimento deve ter no máximo 10 caracteres.", 
    //                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
    //            
    //        }else if (txtFantasia.getText().isEmpty()){
    //            
    //            JOptionPane.showMessageDialog(this, "Informe a fantasia.", 
    //                    "Atenção", JOptionPane.INFORMATION_MESSAGE);

    //        }else if (txtFantasia.getText().length() > 50){
    //            
    //            JOptionPane.showMessageDialog(this, "Fantasia deve ter no máximo 50 caracteres.", 
    //                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
    //            
    //        }else if (cbbEstadoCivil.getSelectedItem() == " "){
    //            
    //            JOptionPane.showMessageDialog(this, "Selecione um estado civil.", 
    //                    "Atenção", JOptionPane.INFORMATION_MESSAGE);

    //        }else if (mskCEP_Pes.getText().isEmpty()){
    //            
    //            JOptionPane.showMessageDialog(this, "Informe o CEP.", 
    //                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
    //            
    //        }else if (mskCEP_Pes.getText().length() > 9){
    //            
    //            JOptionPane.showMessageDialog(this, "CEP deve ter no máximo 9 caracteres.", 
    //                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
    //            
    //        }else if (txtPessoaAutorizada.getText().isEmpty()){
    //            
    //            JOptionPane.showMessageDialog(this, "Informe a pessoa autorizada.", 
    //                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
    //            
    //        }else if (txtPessoaAutorizada.getText().length() > 100){
    //            
    //            JOptionPane.showMessageDialog(this, "Pessoa autorizada deve ter no máximo 100 caracteres.", 
    //                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
    //            
            }else if (frmLimiteCredito.getText().isEmpty()){

                JOptionPane.showMessageDialog(this, "Informe o limite de credito.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if (frmLimiteCredito.getText().length() > 10.3){

                JOptionPane.showMessageDialog(this, "Limite de credito deve ter no máximo 10.3 caracteres.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            // Cadastro de pessoa se inicia a partir daqui.

            }else{

                if(novaPessoa == true){

                    if(sistema.Mensagem.showConfirmDialog(this,
                        "Deseja salvar esta pessoa?", "Confirmação") == 0){

                        if (tbEndereco.getRowCount() == 0){

                            JOptionPane.showMessageDialog(null, "Uma pessoa não pode ser adicionada "
                                    + "sem ao menos um endereço.");

                        }else{

                            // Validação

                            sistema.CNP val = new sistema.CNP();
                            cpf_cnpj = val.removerMascara(mskDocPrincipal.getText());
                            rg_ie = val.removerMascara(mskDocSecundario.getText());
                            cep_pes = val.removerMascara(mskCEP_Pes.getText());

                            if(cep_pes.equals("        ")){
                                cep_pes = "";
                            }

                            if(rdFis.isSelected()){

                                if(val.cpfValido(cpf_cnpj)){

                                    cadPessoa();
                                    mskDocPrincipal.setFocusable(false);

                                }else{

                                    JOptionPane.showMessageDialog(null, "CPF inválido.");

                                }

                            }else if(rdJud.isSelected()){

                                if(val.cnpjValido(cpf_cnpj)){

                                    cadPessoa();
                                    mskDocPrincipal.setFocusable(false);

                                }else{

                                    JOptionPane.showMessageDialog(null, "CNPJ inválido.");

                                }

                            }

                            // FIM VALIDAÇÃO DE CPF/CNPJ

                        }

                    }

                }else if (novaPessoa == false){

                    if(sistema.Mensagem.showConfirmDialog(this,
                        "Deseja realmente alterar esta pessoa?", "Confirmação") == 0){

                        // Validação

                        sistema.CNP val = new sistema.CNP();
                        cpf_cnpj = val.removerMascara(mskDocPrincipal.getText());
                        rg_ie = val.removerMascara(mskDocSecundario.getText());
                        cep_pes = val.removerMascara(mskCEP_Pes.getText());

                        if(cep_pes.equals("        ")){
                                cep_pes = "";
                        }

                        if(rdFis.isSelected()){

                            if(val.cpfValido(cpf_cnpj)){

                                alteraPessoa();
                                mskDocPrincipal.setFocusable(false);

                            }else{

                                JOptionPane.showMessageDialog(null, "CPF inválido.");

                            }

                        }else if(rdJud.isSelected()){

                            if(val.cnpjValido(cpf_cnpj)){

                                alteraPessoa();
                                mskDocPrincipal.setFocusable(false);

                            }else{

                                JOptionPane.showMessageDialog(null, "CNPJ inválido.");

                            }

                        }

                        // FIM VALIDAÇÃO DE CPF/CNPJ

                    }

                }

            }
        }
    }//GEN-LAST:event_btnSalvar_PesActionPerformed

    private void btnLimpar_PesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpar_PesActionPerformed
        
        /*
        Realiza a limpeza da tela, impossíbilitando te alterar uma pessoa, 
        ou acrescentar informações a mesma.
        */
        
        if(sistema.Mensagem.showConfirmDialog(this,
            "Deseja realmente limpar as informações?", "Confirmação") == 0){
                    
            limpaTudo();
                    
        }
        
    }//GEN-LAST:event_btnLimpar_PesActionPerformed

    private void rdJudMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdJudMouseClicked
        
        /*
        
        Sobre o tipo de pessoa.
        
        Quando o usuário selecionar a opção de pessoa jurídica, o Doc. Principal
        para se atribuir será o CNPJ, e o secundário a inscrição estadual.
        
        Caso o campo seja descelecionado, as informações voltam a forma nativa.
        
        */
        
        if(rdJud.isSelected()){
            
            lblDocPrincipal.setText("CNPJ:");
            lblDocSecundario.setText("Inscrição Estadual:");
            
            mskDocPrincipal.setMask("##.###.###/####-##");
            mskDocSecundario.setMask("###.###.###.###");
            
        }else if(!rdJud.isSelected()){
            
            lblDocPrincipal.setText("Doc. Principal:");
            lblDocSecundario.setText("Doc. Secundário:");
            
            mskDocPrincipal.setMask("");
            mskDocSecundario.setMask("");
            
        }
        
    }//GEN-LAST:event_rdJudMouseClicked
 
    private void rdFisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdFisMouseClicked
        
        /*
        
            Sobre o tipo de pessoa.

            Quando o usuário selecionar a opção de pessoa física, o Doc. Principal
            para se atribuir será o CPF, e o secundário o RG.

            Caso o campo seja descelecionado, as informações voltam a forma nativa.
        
        */
        
        if(rdFis.isSelected()){
            
            lblDocPrincipal.setText("CPF:");
            lblDocSecundario.setText("RG:");
            
            mskDocPrincipal.setMask("###.###.###-##");
            mskDocSecundario.setMask("##.###.###-#");
            
        }else if(!rdFis.isSelected()){
            
            lblDocPrincipal.setText("Doc. Principal:");
            lblDocSecundario.setText("Doc. Secundário:");
            
            mskDocPrincipal.setMask("");
            mskDocSecundario.setMask("");
            
        }
        
    }//GEN-LAST:event_rdFisMouseClicked

    private void btnSalvar_EndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvar_EndActionPerformed
        
        // Realiza verificações para inserir um endereço ao banco.
        
        if (cbxCliente.isSelected() == false && 
                cbxFornecedor.isSelected() == false && 
                cbxFuncionario.isSelected() == false){
            
            JOptionPane.showMessageDialog(this, "Selecione uma das classificações correspondentes.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
        }else if (rdFis.isSelected() == false &&
                rdJud.isSelected() == false){
            
            JOptionPane.showMessageDialog(this, "Selecione um tipo correspondente.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
        }else if(mskDocPrincipal.getText().isEmpty()){
            
            JOptionPane.showMessageDialog(this, "Informe o documento principal.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
        }else if(mskDocPrincipal.getText().length() > 18){
            
            JOptionPane.showMessageDialog(this, "Documento principal deve ter no máximo 18 caracteres.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
        }else if (mskDocSecundario.getText().isEmpty()){
            
            JOptionPane.showMessageDialog(this, "Informe o documento secundário.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
        }else if (mskDocSecundario.getText().length() > 15){
            
            JOptionPane.showMessageDialog(this, "Documento secundário deve ter no máximo 12 caracteres.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
        }else if (txtNome.getText().isEmpty()){
            
            JOptionPane.showMessageDialog(this, "Informe o nome.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
        }else if (txtNome.getText().length() > 100){
            
            JOptionPane.showMessageDialog(this, "Nome deve ter no máximo 100 caracteres.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
//        }else if (calDataNasc.getText().isEmpty()){
//            
//            JOptionPane.showMessageDialog(this, "Informe a data de nascimento.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
//        }else if (calDataNasc.getText().length() > 10){
//            
//            JOptionPane.showMessageDialog(this, "Data de nascimento deve ter no máximo 10 caracteres.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
//        }else if (txtFantasia.getText().isEmpty()){
//            
//            JOptionPane.showMessageDialog(this, "Informe a fantasia.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
//        }else if (txtFantasia.getText().length() > 50){
//            
//            JOptionPane.showMessageDialog(this, "Fantasia deve ter no máximo 50 caracteres.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
//        }else if (cbbEstadoCivil.getSelectedItem() == " "){
//            
//            JOptionPane.showMessageDialog(this, "Selecione um estado civil.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
//        }else if (mskCEP_Pes.getText().isEmpty()){
//            
//            JOptionPane.showMessageDialog(this, "Informe o CEP.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
//        }else if (mskCEP_Pes.getText().length() > 9){
//            
//            JOptionPane.showMessageDialog(this, "CEP deve ter no máximo 9 caracteres.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
//        }else if (txtPessoaAutorizada.getText().isEmpty()){
//            
//            JOptionPane.showMessageDialog(this, "Informe a pessoa autorizada.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
//        }else if (txtPessoaAutorizada.getText().length() > 100){
//            
//            JOptionPane.showMessageDialog(this, "Pessoa autorizada deve ter no máximo 100 caracteres.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
//        }else if (frmLimiteCredito.getText().isEmpty()){
//            
//            JOptionPane.showMessageDialog(this, "Informe o limite de credito.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
//        }else if (frmLimiteCredito.getText().length() > 10.3){
//            
//            JOptionPane.showMessageDialog(this, "Limite de credito deve ter no máximo 10.3 caracteres.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
        }else if(mskDocPrincipal.getText().isEmpty()){
            
            JOptionPane.showMessageDialog(this, "É necessario informar o documento principal "
                    + "para armazenar o endereço.\n"
                    + "Documento principal deve ter no máximo 18 caracteres.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
        }else if(mskDocPrincipal.getText().length() > 18){
            
            JOptionPane.showMessageDialog(this, "É necessario informar o documento principal "
                    + "para armazenar o endereço.\n"
                    + "Documento principal deve ter no máximo 18 caracteres.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
        
                // ENDEREÇO A PARTIR DAQUI
            
        }else if (txtRua.getText().isEmpty()){
            
            JOptionPane.showMessageDialog(this, "Informe a rua.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
        }else if (txtNum.getText().isEmpty()){
            
            JOptionPane.showMessageDialog(this, "Informe o número.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
        }else if (txtBairro.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Informe o bairro.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
            
        }else if (mskCEP_End.getText().isEmpty()){
            
            JOptionPane.showMessageDialog(this, "Informe o CEP.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
        }else if (mskCEP_End.getText().length() > 9){
            
            JOptionPane.showMessageDialog(this, "CEP deve ter no máximo 9 caracteres.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
        
        // Endereço a partir daqui.
            
        }else{
                
                if(novaPessoa == true){
                    
                    
                    if(sistema.Mensagem.showConfirmDialog(this,
                        "Deseja salvar esta pessoa?", "Confirmação") == 0){
                        
                        // Validação
                        
                        sistema.CNP val = new sistema.CNP();
                        cpf_cnpj = val.removerMascara(mskDocPrincipal.getText());
                        rg_ie = val.removerMascara(mskDocSecundario.getText());
                        cep_pes = val.removerMascara(mskCEP_Pes.getText());
                        cep_end = val.removerMascara(mskCEP_End.getText());
                        
                        if(cep_pes.equals("        ")){
                                cep_pes = "";
                        }
                        
                        if(rdFis.isSelected()){
                            
                            if(val.cpfValido(cpf_cnpj)){
                                
                                cadPessoa();
                                cadEndereco();
                                limpaEndereco();
                                mskDocPrincipal.setFocusable(false);
                                
                            }else{
                                
                                JOptionPane.showMessageDialog(null, "CPF inválido.");
                                
                            }
                            
                        }else if(rdJud.isSelected()){
                            
                            if(val.cnpjValido(cpf_cnpj)){
                                
                                cadPessoa();
                                cadEndereco();
                                limpaEndereco();
                                mskDocPrincipal.setFocusable(false);
                                
                            }else{
                                
                                JOptionPane.showMessageDialog(null, "CNPJ inválido.");
                                
                            }
                            
                        }
                        
                        // FIM VALIDAÇÃO DE CPF/CNPJ
                        
                    }
                    
                }else if (novaPessoa == false){
                    
                    sistema.CNP val = new sistema.CNP();
                    cpf_cnpj = val.removerMascara(mskDocPrincipal.getText());
                    rg_ie = val.removerMascara(mskDocSecundario.getText());
                    cep_pes = val.removerMascara(mskCEP_Pes.getText());
                    cep_end = val.removerMascara(mskCEP_End.getText());
                    
                    if(novoEndereco == true){
                        
                        if(sistema.Mensagem.showConfirmDialog(this,
                            "Deseja acrescentar um novo endereço?", "Confirmação") == 0){
                        
                            cadEndereco();
                            limpaEndereco();
                    
                        }
                        
                    }else if(novoEndereco == false){
                        
                        if(sistema.Mensagem.showConfirmDialog(this,
                            "Deseja atualizar este endereço?", "Confirmação") == 0){
                        
                            alteraEndereco(idEnd);
                            limpaEndereco();
                            
                        }
                        
                    }
                    
                }
                
        }
        
    }//GEN-LAST:event_btnSalvar_EndActionPerformed

    private void btnSalvar_EmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvar_EmailActionPerformed
        
        // Realiza verificações para acrescentar/alterar um email ao banco.
        
        if (cbxCliente.isSelected() == false && 
                cbxFornecedor.isSelected() == false && 
                cbxFuncionario.isSelected() == false){
            
            JOptionPane.showMessageDialog(this, "Selecione uma das classificações correspondentes.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
        }else if (rdFis.isSelected() == false &&
                rdJud.isSelected() == false){
            
            JOptionPane.showMessageDialog(this, "Selecione um tipo correspondente.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
        }else if(mskDocPrincipal.getText().isEmpty()){
            
            JOptionPane.showMessageDialog(this, "Informe o documento principal.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
        }else if(mskDocPrincipal.getText().length() > 18){
            
            JOptionPane.showMessageDialog(this, "Documento principal deve ter no máximo 18 caracteres.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
        }else if (mskDocSecundario.getText().isEmpty()){
            
            JOptionPane.showMessageDialog(this, "Informe o documento secundário.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
        }else if (mskDocSecundario.getText().length() > 15){
            
            JOptionPane.showMessageDialog(this, "Documento secundário deve ter no máximo 15 caracteres.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
        }else if (txtNome.getText().isEmpty()){
            
            JOptionPane.showMessageDialog(this, "Informe o nome.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
        }else if (txtNome.getText().length() > 100){
            
            JOptionPane.showMessageDialog(this, "Nome deve ter no máximo 100 caracteres.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
//        }else if (calDataNasc.getText().isEmpty()){
//            
//            JOptionPane.showMessageDialog(this, "Informe a data de nascimento.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
//        }else if (calDataNasc.getText().length() > 10){
//            
//            JOptionPane.showMessageDialog(this, "Data de nascimento deve ter no máximo 10 caracteres.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
//        }else if (txtFantasia.getText().isEmpty()){
//            
//            JOptionPane.showMessageDialog(this, "Informe a fantasia.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
//        }else if (txtFantasia.getText().length() > 50){
//            
//            JOptionPane.showMessageDialog(this, "Fantasia deve ter no máximo 50 caracteres.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
//        }else if (cbbEstadoCivil.getSelectedItem() == " "){
//            
//            JOptionPane.showMessageDialog(this, "Selecione um estado civil.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
//        }else if (mskCEP_Pes.getText().isEmpty()){
//            
//            JOptionPane.showMessageDialog(this, "Informe o CEP.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
//        }else if (mskCEP_Pes.getText().length() > 9){
//            
//            JOptionPane.showMessageDialog(this, "CEP deve ter no máximo 9 caracteres.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
//        }else if (txtPessoaAutorizada.getText().isEmpty()){
//            
//            JOptionPane.showMessageDialog(this, "Informe a pessoa autorizada.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
//        }else if (txtPessoaAutorizada.getText().length() > 100){
//            
//            JOptionPane.showMessageDialog(this, "Pessoa autorizada deve ter no máximo 100 caracteres.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
//        }else if (frmLimiteCredito.getText().isEmpty()){
//            
//            JOptionPane.showMessageDialog(this, "Informe o limite de credito.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
//        }else if (frmLimiteCredito.getText().length() > 10.3){
//            
//            JOptionPane.showMessageDialog(this, "Limite de credito deve ter no máximo 10.3 caracteres.", 
//                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            
        }else if(mskDocPrincipal.getText().isEmpty()){
            
            JOptionPane.showMessageDialog(this, "É necessario informar o documento principal "
                    + "para armazenar o endereço.\n"
                    + "Documento principal deve ter no máximo 18 caracteres.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
        }else if(mskDocPrincipal.getText().length() > 18){
            
            JOptionPane.showMessageDialog(this, "É necessario informar o documento principal "
                    + "para armazenar o endereço.\n"
                    + "Documento principal deve ter no máximo 18 caracteres.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            
            // Email a partir daqui
            
        }else if (txtEmail.getText().isEmpty()){
            
            JOptionPane.showMessageDialog(this, "Informe o email.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
        
        }else if (!txtEmail.getText().matches("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
                                            + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$")){
            
            JOptionPane.showMessageDialog(this, "Email inválido.", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
        
        // Email a partir daqui.
            
        }else{
            
            if(novaPessoa == true){
                
                if (tbEndereco.getRowCount() == 0){
                        
                        JOptionPane.showMessageDialog(null, "Uma pessoa/email não pode ser adicionada "
                                + "sem ao menos um endereço.");
                        
                }
                
            }else if (novaPessoa == false){
                
                sistema.CNP val = new sistema.CNP();
                cpf_cnpj = val.removerMascara(mskDocPrincipal.getText());
                rg_ie = val.removerMascara(mskDocSecundario.getText());
                cep_pes = val.removerMascara(mskCEP_Pes.getText());
                
                if(novoEmail == true){
                        
                    if(sistema.Mensagem.showConfirmDialog(this,
                        "Deseja acrescentar um novo email?", "Confirmação") == 0){
                        
                        cadEmail();
                        limpaEmail();
                        
                    }
                        
                }else if(novoEmail == false){
                        
                    if(sistema.Mensagem.showConfirmDialog(this,
                        "Deseja atualizar este email?", "Confirmação") == 0){
                        
                        alteraEmail(idEmail);
                        limpaEmail();
                        
                    }
                        
                }
                    
            }
            
        }
        
        
    }//GEN-LAST:event_btnSalvar_EmailActionPerformed

    private void btnSalvar_TelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvar_TelActionPerformed
        if(FrmLogin.usuario.verificarPermissao(this, 1)){
            // Realiza verificações para acrescentar/alterar um telefone ao banco.

            telefone = sistema.CNP.removerMascara(mskTelefone.getText(), "()-");

            if (cbxCliente.isSelected() == false && 
                    cbxFornecedor.isSelected() == false && 
                    cbxFuncionario.isSelected() == false){

                JOptionPane.showMessageDialog(this, "Selecione uma das classificações correspondentes.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if (rdFis.isSelected() == false &&
                    rdJud.isSelected() == false){

                JOptionPane.showMessageDialog(this, "Selecione um tipo correspondente.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if(mskDocPrincipal.getText().isEmpty()){

                JOptionPane.showMessageDialog(this, "Informe o documento principal.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if(mskDocPrincipal.getText().length() > 18){

                JOptionPane.showMessageDialog(this, "Documento principal deve ter no máximo 18 caracteres.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if (mskDocSecundario.getText().isEmpty()){

                JOptionPane.showMessageDialog(this, "Informe o documento secundário.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if (mskDocSecundario.getText().length() > 15){

                JOptionPane.showMessageDialog(this, "Documento secundário deve ter no máximo 15 caracteres.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if (txtNome.getText().isEmpty()){

                JOptionPane.showMessageDialog(this, "Informe o nome.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if (txtNome.getText().length() > 100){

                JOptionPane.showMessageDialog(this, "Nome deve ter no máximo 100 caracteres.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

//            }else if (calDataNasc.getText().isEmpty()){
//
//                JOptionPane.showMessageDialog(this, "Informe a data de nascimento.", 
//                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
//
//            }else if (calDataNasc.getText().length() > 10){
//
//                JOptionPane.showMessageDialog(this, "Data de nascimento deve ter no máximo 10 caracteres.", 
//                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
//
//            }else if (txtFantasia.getText().isEmpty()){
//
//                JOptionPane.showMessageDialog(this, "Informe a fantasia.", 
//                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
//
//            }else if (txtFantasia.getText().length() > 50){
//
//                JOptionPane.showMessageDialog(this, "Fantasia deve ter no máximo 50 caracteres.", 
//                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
//
//            }else if (cbbEstadoCivil.getSelectedItem() == " "){
//
//                JOptionPane.showMessageDialog(this, "Selecione um estado civil.", 
//                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
//
//            }else if (mskCEP_Pes.getText().isEmpty()){
//
//                JOptionPane.showMessageDialog(this, "Informe o CEP.", 
//                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
//
//            }else if (mskCEP_Pes.getText().length() > 9){
//
//                JOptionPane.showMessageDialog(this, "CEP deve ter no máximo 9 caracteres.", 
//                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
//
//            }else if (txtPessoaAutorizada.getText().isEmpty()){
//
//                JOptionPane.showMessageDialog(this, "Informe a pessoa autorizada.", 
//                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
//
//            }else if (txtPessoaAutorizada.getText().length() > 100){
//
//                JOptionPane.showMessageDialog(this, "Pessoa autorizada deve ter no máximo 100 caracteres.", 
//                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if (frmLimiteCredito.getText().isEmpty()){

                JOptionPane.showMessageDialog(this, "Informe o limite de credito.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if (frmLimiteCredito.getText().length() > 10.3){

                JOptionPane.showMessageDialog(this, "Limite de credito deve ter no máximo 10.3 caracteres.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if(mskDocPrincipal.getText().isEmpty()){

                JOptionPane.showMessageDialog(this, "É necessario informar o documento principal "
                        + "para armazenar o endereço.\n"
                        + "Documento principal deve ter no máximo 18 caracteres.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if(mskDocPrincipal.getText().length() > 18){

                JOptionPane.showMessageDialog(this, "É necessario informar o documento principal "
                        + "para armazenar o endereço.\n"
                        + "Documento principal deve ter no máximo 18 caracteres.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

                // Telefone a partir daqui

            }else if (mskTelefone.getText().isEmpty()){

                JOptionPane.showMessageDialog(this, "Informe o telefone.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            }else if (!telefone.matches("^[1-9]{2}[2-9][0-9]{3,4}[0-9]{4}$")){

                JOptionPane.showMessageDialog(this, "Telefone inválido.", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);

            // Telefone a partir daqui.

            }else{

                if(novaPessoa == true){

                    if (tbEndereco.getRowCount() == 0){

                            JOptionPane.showMessageDialog(null, "Uma pessoa/telefone não pode ser adicionada "
                                    + "sem ao menos um endereço.");

                    }

                }else if (novaPessoa == false){

                    sistema.CNP val = new sistema.CNP();
                    cpf_cnpj = val.removerMascara(mskDocPrincipal.getText());
                    rg_ie = val.removerMascara(mskDocSecundario.getText());
                    cep_pes = val.removerMascara(mskCEP_Pes.getText());

                    if(novoTelefone == true){

                        if(sistema.Mensagem.showConfirmDialog(this,
                            "Deseja acrescentar um novo telefone?", "Confirmação") == 0){

                            cadTelefone();
                            limpaTelefone();

                        }

                    }else if(novoTelefone == false){

                        if(sistema.Mensagem.showConfirmDialog(this,
                            "Deseja atualizar este telefone?", "Confirmação") == 0){

                            alteraTelefone(idTel);
                            limpaTelefone();

                        }

                    }

                }

            }
        }        
    }//GEN-LAST:event_btnSalvar_TelActionPerformed

    private void btnLimpa_EndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpa_EndActionPerformed
        limpaEndereco();
    }//GEN-LAST:event_btnLimpa_EndActionPerformed

    private void btnLimpar_EmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpar_EmailActionPerformed
        limpaEmail();
    }//GEN-LAST:event_btnLimpar_EmailActionPerformed

    private void btnLimpar_TelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpar_TelActionPerformed
        limpaTelefone();
    }//GEN-LAST:event_btnLimpar_TelActionPerformed

    private void btnRemover_EndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemover_EndActionPerformed
        
        // Remove um endereço já adicionado ao banco.
        
        if(novoEndereco){
            
            JOptionPane.showMessageDialog(this, 
                    "Selecione um endereço para remover.", "Atenção", 
                    JOptionPane.INFORMATION_MESSAGE);
            
        }else{
        
            if(sistema.Mensagem.showConfirmDialog(this,
                        "Deseja realmente remover este endereço?", "Confirmação") == 0){
                
                    sistema.CNP val = new sistema.CNP();
                    cpf_cnpj = val.removerMascara(mskDocPrincipal.getText());
                    
                    deletaEndereco(idEnd);
                    limpaEndereco();

            }
        
        }
        
    }//GEN-LAST:event_btnRemover_EndActionPerformed

    private void btnDeletar_PesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletar_PesActionPerformed
        
        // Remove uma pessoa já adicionada ao banco.
        
        if(novaPessoa){
            
            JOptionPane.showMessageDialog(this, 
                    "Consulte uma pessoa para remover.", "Atenção", 
                    JOptionPane.INFORMATION_MESSAGE);
            
            
        }else{
            
            if(sistema.Mensagem.showConfirmDialog(this,
                    "Deseja realmente remover esta pessoa?", "Confirmação") == 0){
                
                sistema.CNP val = new sistema.CNP();
                cpf_cnpj = val.removerMascara(mskDocPrincipal.getText());
                
                String sql = String.format("DELETE FROM pessoas WHERE doc_principal = '%s'", cpf_cnpj);

                gravarInf(sql);
                
                limpaTudo();
            }
            
        }
        
    }//GEN-LAST:event_btnDeletar_PesActionPerformed

    private void btnRemover_EmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemover_EmailActionPerformed
        
        // Remove um email já adicionado ao banco.
        
        if(novoEmail){
            
            JOptionPane.showMessageDialog(this, 
                    "Selecione um email para remover.", "Atenção", 
                    JOptionPane.INFORMATION_MESSAGE);
            
        }else{
        
            if(sistema.Mensagem.showConfirmDialog(this,
                        "Deseja realmente remover este email?", "Confirmação") == 0){
                    
                    sistema.CNP val = new sistema.CNP();
                    cpf_cnpj = val.removerMascara(mskDocPrincipal.getText());
                
                    deletaEmail(idEmail);
                    limpaEmail();

            }
        
        }
        
    }//GEN-LAST:event_btnRemover_EmailActionPerformed

    private void btnRemover_TelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemover_TelActionPerformed
        
    }//GEN-LAST:event_btnRemover_TelActionPerformed

    private void tbEnderecoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbEnderecoMouseClicked
        
        // Seleciona um endereço.
        
        if(evt.getClickCount() == 2){
            atribuirEnd();
            
            sistema.CNP val = new sistema.CNP();
            cpf_cnpj = val.removerMascara(mskDocPrincipal.getText());
            
            idEnd = qryEndereco.getCurrentFieldValueAsInteger("id");
            padEnd = qryEndereco.getCurrentFieldValueAsBoolean("padrao");
        }
    }//GEN-LAST:event_tbEnderecoMouseClicked

    private void tbEmailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbEmailMouseClicked
        
        // Seleciona um email.
        
        if(evt.getClickCount() == 2){
            atribuirEmail();
            
            sistema.CNP val = new sistema.CNP();
            cpf_cnpj = val.removerMascara(mskDocPrincipal.getText());
            
            idEmail = qryEmail.getCurrentFieldValueAsInteger("id");
            padEmail = qryEmail.getCurrentFieldValueAsBoolean("padrao");
        }
    }//GEN-LAST:event_tbEmailMouseClicked

    private void tbTelefoneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbTelefoneMouseClicked
        
        // Seleciona um telefone.
        
        if(evt.getClickCount() == 2){
            
            atribuirTel();
            
            sistema.CNP val = new sistema.CNP();
            cpf_cnpj = val.removerMascara(mskDocPrincipal.getText());
            
            idTel = qryTelefone.getCurrentFieldValueAsInteger("id");
            padTel = qryTelefone.getCurrentFieldValueAsBoolean("padrao");
            
        }
        
    }//GEN-LAST:event_tbTelefoneMouseClicked

    private void btnRemover_End1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemover_End1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRemover_End1ActionPerformed

    private void btnRemover_PesActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemover_PesActionPerformed1
        if(novaPessoa){
            
            JOptionPane.showMessageDialog(this, 
                    "Consulte uma pessoa para remover", "Atenção", 
                    JOptionPane.INFORMATION_MESSAGE);
            
            
        }else{
            
            if(sistema.Mensagem.showConfirmDialog(this,
                    "Deseja realmente remover esta pessoa?", "Confirmação") == 0){
                
                deletaPessoa();
                limpaTudo();
                
            }
            
        }
    }//GEN-LAST:event_btnRemover_PesActionPerformed1

    private void btnRemoverPesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverPesActionPerformed
        if(FrmLogin.usuario.verificarPermissao(this, 2)){
            // Remove uma pessoa já adicionada ao banco.

            if(novaPessoa){

                JOptionPane.showMessageDialog(this, 
                        "Consulte uma pessoa para remover", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);


            }else{

                if(sistema.Mensagem.showConfirmDialog(this,
                        "Deseja realmente remover esta pessoa?", "Confirmação") == 0){

                    deletaPessoa();
                    limpaTudo();

                }

            }
        }
    }//GEN-LAST:event_btnRemoverPesActionPerformed

    private void btnRemoverEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverEndActionPerformed
        
        // Remove um endereço já adicionado ao banco.
        
        if(novoEndereco){
            
            JOptionPane.showMessageDialog(this, 
                    "Selecione um endereço para remover.", "Atenção", 
                    JOptionPane.INFORMATION_MESSAGE);
            
        }else{
            
            if(padEnd){
                
                JOptionPane.showMessageDialog(this, 
                    "Endereço padrão não pode ser removido.", "Atenção", 
                    JOptionPane.INFORMATION_MESSAGE);
                
            }else{
                
                if(sistema.Mensagem.showConfirmDialog(this,
                        "Deseja realmente remover este endereço?", "Confirmação") == 0){
                    
                    deletaEndereco(idEnd);
                    limpaEndereco();

                }
                
            }
            
            
        
        }
        
    }//GEN-LAST:event_btnRemoverEndActionPerformed

    private void btnRemoverEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverEmailActionPerformed
        
        // Remove um email já adicionado ao banco.
        
        if(novoEmail){
            
            JOptionPane.showMessageDialog(this, 
                    "Selecione um email para remover.", "Atenção", 
                    JOptionPane.INFORMATION_MESSAGE);
            
        }else{
            
            if(padEmail){
            
            JOptionPane.showMessageDialog(this, 
                    "Email padrão não pode ser removido.", "Atenção", 
                    JOptionPane.INFORMATION_MESSAGE);
            
            }else if(sistema.Mensagem.showConfirmDialog(this,
                        "Deseja realmente remover este email?", "Confirmação") == 0){
                    
                    deletaEmail(idEmail);
                    limpaEmail();

            }
        
        }
        
    }//GEN-LAST:event_btnRemoverEmailActionPerformed

    private void btnRemoverTelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverTelActionPerformed
        
        // Remove um telefone já adicionado ao banco.
        
        if(novoTelefone){
            
            JOptionPane.showMessageDialog(this, 
                    "Selecione um telefone para remover.", "Atenção", 
                    JOptionPane.INFORMATION_MESSAGE);
            
        }else{
            
            if(padTel){
            
            JOptionPane.showMessageDialog(this, 
                    "Telefone padrão não pode ser removido.", "Atenção", 
                    JOptionPane.INFORMATION_MESSAGE);
            
            }else if(sistema.Mensagem.showConfirmDialog(this,
                        "Deseja realmente remover este telefone?", "Confirmação") == 0){
                    
                    deletaTelefone(idTel);
                    limpaTelefone();

            }
        
        }
        
    }//GEN-LAST:event_btnRemoverTelActionPerformed

    private void btnDefPad_EndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDefPad_EndActionPerformed
        
        // Define um endereço padrão.
        
        if(novoEndereco){
            
            JOptionPane.showMessageDialog(this, 
                    "Selecione um endereço para definir padrão.", "Atenção", 
                    JOptionPane.INFORMATION_MESSAGE);
            
        }else{
        
            if(sistema.Mensagem.showConfirmDialog(this,
                        "Deseja realmente definir este endereço como padrão?", "Confirmação") == 0){
                    
                    definePadraoEndereco(idEnd);
                    limpaEndereco();

            }
        
        }
    }//GEN-LAST:event_btnDefPad_EndActionPerformed

    private void btnDefPad_EmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDefPad_EmailActionPerformed
        
        // Define um email padrão.
        
        if(novoEmail){
            
            JOptionPane.showMessageDialog(this, 
                    "Selecione um email para definir padrão.", "Atenção", 
                    JOptionPane.INFORMATION_MESSAGE);
            
        }else{
        
            if(sistema.Mensagem.showConfirmDialog(this,
                        "Deseja realmente definir este email como padrão?", "Confirmação") == 0){
                    
                    definePadraoEmail(idEmail);
                    limpaEmail();

            }
        
        }
    }//GEN-LAST:event_btnDefPad_EmailActionPerformed

    private void btnDefPad_TelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDefPad_TelActionPerformed
        
        // Define um telefone padrão.
        
        if(novoTelefone){
            
            JOptionPane.showMessageDialog(this, 
                    "Selecione um telefone para definir padrão.", "Atenção", 
                    JOptionPane.INFORMATION_MESSAGE);
            
        }else{
        
            if(sistema.Mensagem.showConfirmDialog(this,
                        "Deseja realmente definir este telefone como padrão?", "Confirmação") == 0){
                    
                    definePadraoTelefone(idTel);
                    limpaTelefone();

            }
        
        }
    }//GEN-LAST:event_btnDefPad_TelActionPerformed

    private void mskCEP_PesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mskCEP_PesFocusLost
        
        // Mostra a cidade natal após o CEP ser informado e o campo perder o foco.
        
        sistema.Localidade local = new sistema.Localidade(principal.Principal.conexao);
//        sistema.CNP val = new sistema.CNP();
        
        cep_pes = sistema.CNP.removerMascara(mskCEP_Pes.getText());
        
        String[] inf;

        inf = local.getLocalidade(Integer.valueOf(cep_pes));
        
        if(inf == null){
            if(sistema.Mensagem.showConfirmDialog(
                    this, "CEP informado não cadastrado\n"
                            + "Deseja cadastrar este CEP?", "Confirmação") == 0){  
                
                cbbEstadoCivil.requestFocus();
                
                pessoa.iFrmCadCEP cadCEP = new pessoa.iFrmCadCEP(this, mskCEP_Pes.getText(), true);
                principal.FrmPrincipal.Desktop.add(cadCEP);
                cadCEP.setVisible(true);
            }else{
                mskCEP_Pes.setValue("");
            }
        }else{
            txtCidadeNatal.setText(inf[0]);
        }

    }//GEN-LAST:event_mskCEP_PesFocusLost

    private void cbDigitoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbDigitoMouseClicked
        
        if(cbDigito.isSelected()){
            mskTelefone.setValue("");
            mskTelefone.setMask("(##)####-####");
        }else if(!cbDigito.isSelected()){
            mskTelefone.setValue("");
            mskTelefone.setMask("(##)#####-####");
        }
        
    }//GEN-LAST:event_cbDigitoMouseClicked

    private void mskCEP_EndFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mskCEP_EndFocusLost
         
        // Mostra a cidade e o estado após o CEP ser informado e o campo perder o foco.
        
        sistema.Localidade local = new sistema.Localidade(principal.Principal.conexao);
        sistema.CNP val = new sistema.CNP();
        
        cep_end = val.removerMascara(mskCEP_End.getText());

        String[] inf;
        
        inf = local.getLocalidade(Integer.valueOf(cep_end));
        
        if(inf == null){
            if(sistema.Mensagem.showConfirmDialog(
                    this, "CEP informado não cadastrado\n"
                            + "Deseja cadastrar este CEP?", "Confirmação") == 0){
                
                pessoa.iFrmCadCEP cadCEP = new pessoa.iFrmCadCEP(this, mskCEP_End.getText(), false);
                principal.FrmPrincipal.Desktop.add(cadCEP);
                cadCEP.setVisible(true);                
            }else{
                mskCEP_End.setValue("");
            }
        }else{
            txtCidade.setText(inf[0]);
            txtEstado.setText(inf[1]);
        }
    }//GEN-LAST:event_mskCEP_EndFocusLost

    private void txtPessoaAutorizadaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPessoaAutorizadaFocusGained
        
    }//GEN-LAST:event_txtPessoaAutorizadaFocusGained

    private void btnSalvar_EndFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnSalvar_EndFocusGained
        
    }//GEN-LAST:event_btnSalvar_EndFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Tabelas;
    private javax.swing.JButton btnConsultar_Pes;
    private javax.swing.JButton btnDefPad_Email;
    private javax.swing.JButton btnDefPad_End;
    private javax.swing.JButton btnDefPad_Tel;
    private lib.jdb.control.jdbbuttoncancel.JDBButtonCancel btnLimpa_End;
    private lib.jdb.control.jdbbuttoncancel.JDBButtonCancel btnLimpar_Email;
    private lib.jdb.control.jdbbuttoncancel.JDBButtonCancel btnLimpar_Pes;
    private lib.jdb.control.jdbbuttoncancel.JDBButtonCancel btnLimpar_Tel;
    private javax.swing.JButton btnRemoverEmail;
    private javax.swing.JButton btnRemoverEnd;
    private javax.swing.JButton btnRemoverPes;
    private javax.swing.JButton btnRemoverTel;
    private lib.jdb.control.jdbbuttonsave.JDBButtonSave btnSalvar_Email;
    private lib.jdb.control.jdbbuttonsave.JDBButtonSave btnSalvar_End;
    private lib.jdb.control.jdbbuttonsave.JDBButtonSave btnSalvar_Pes;
    private lib.jdb.control.jdbbuttonsave.JDBButtonSave btnSalvar_Tel;
    private lib.jdb.control.jdbcalendar.JDBCalendar calDataNasc;
    private javax.swing.JCheckBox cbDigito;
    private javax.swing.JComboBox<String> cbbEstadoCivil;
    private lib.jdb.control.jdbcheckbox.JDBCheckBox cbxCliente;
    private lib.jdb.control.jdbcheckbox.JDBCheckBox cbxFornecedor;
    private lib.jdb.control.jdbcheckbox.JDBCheckBox cbxFuncionario;
    private javax.swing.JCheckBox chbAtivo;
    private javax.swing.JFormattedTextField frmLimiteCredito;
    private javax.swing.JLabel lblBairro;
    private javax.swing.JLabel lblCEP;
    private javax.swing.JLabel lblCEP1;
    private javax.swing.JLabel lblCidade;
    private javax.swing.JLabel lblCidadeNatal;
    private javax.swing.JLabel lblDataNasc;
    private javax.swing.JLabel lblDocPrincipal;
    private javax.swing.JLabel lblDocSecundario;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblEstadoCivil;
    private javax.swing.JLabel lblFantasia;
    private javax.swing.JLabel lblInc;
    private javax.swing.JLabel lblLimiteCredito;
    private javax.swing.JLabel lblMod;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblNum;
    private javax.swing.JLabel lblPesAutorizada;
    private javax.swing.JLabel lblRua;
    private javax.swing.JLabel lblTelefone;
    private lib.jdb.control.jdbmaskedtextfield.JDBMaskedTextField mskCEP_End;
    private lib.jdb.control.jdbmaskedtextfield.JDBMaskedTextField mskCEP_Pes;
    private lib.jdb.control.jdbmaskedtextfield.JDBMaskedTextField mskDocPrincipal;
    private lib.jdb.control.jdbmaskedtextfield.JDBMaskedTextField mskDocSecundario;
    private lib.jdb.control.jdbmaskedtextfield.JDBMaskedTextField mskTelefone;
    private javax.swing.JPanel pnClassificacao;
    private javax.swing.JPanel pnDatas;
    private javax.swing.JPanel pnEmail;
    private javax.swing.JPanel pnEndereco;
    private javax.swing.JPanel pnPessoa;
    private javax.swing.JPanel pnTelefone;
    private javax.swing.JPanel pnTipoFornecedor;
    private lib.jdb.control.jdbradiobutton.JDBRadioButton rdFis;
    private lib.jdb.control.jdbradiobutton.JDBRadioButton rdJud;
    private lib.jdb.control.jdbradiobutton.JDBRadioGroup rdgTipo;
    private javax.swing.JScrollPane scrlEmail;
    private javax.swing.JScrollPane scrlEnd;
    private javax.swing.JScrollPane scrlTelefone;
    private lib.jdb.control.jdbtable.JDBTable tbEmail;
    private lib.jdb.control.jdbtable.JDBTable tbEndereco;
    private lib.jdb.control.jdbtable.JDBTable tbTelefone;
    private javax.swing.JTextField txtBairro;
    private javax.swing.JTextField txtCidade;
    private lib.jdb.control.jdbtextfield.JDBTextField txtCidadeNatal;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEstado;
    private lib.jdb.control.jdbtextfield.JDBTextField txtFantasia;
    private lib.jdb.control.jdbtextfield.JDBTextField txtInc;
    private lib.jdb.control.jdbtextfield.JDBTextField txtMod;
    private lib.jdb.control.jdbtextfield.JDBTextField txtNome;
    private javax.swing.JTextField txtNum;
    private lib.jdb.control.jdbtextfield.JDBTextField txtPessoaAutorizada;
    private javax.swing.JTextField txtRua;
    // End of variables declaration//GEN-END:variables

    private boolean gravarInf(String sql){ // Grava as informações ao banco.
        JDBUpdate transacao = new JDBUpdate();
        transacao.setJDBConnection(principal.Principal.conexao.getConexao());

        transacao.setSQL(sql);
        transacao.setShowMessageOnError(false);
        
        boolean concluido = transacao.execUpdate();
        // Se a transação retornar erro:
        if(!concluido){
            //1062: Violação de primary key ou unique
            if(transacao.getErrorCode() == 1062){
                JOptionPane.showMessageDialog(this, 
                        "Pessoa já cadastrada", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);
            //1451: Violação de foreign key, contém relacionamento
            }else if(transacao.getErrorCode() == 1451){
                JOptionPane.showMessageDialog(this, 
                        "Pessoa com relacionamento, não pode ser excluída", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);                
            }
        }
        
        return concluido;
    }
    
    private void cadPessoa(){ // Realiza o cadastro de pessoas.
        
        String t = "1";
        String f = "0";
        
        sql = String.format ("INSERT INTO pessoas ("
                    + "cliente, "
                    + "fornecedor, "
                    + "funcionario, "
                    + "tipo, "
                    + "doc_principal, "
                    + "doc_secundario, "
                    + "nome, "
                    + "data_nascimento, "
                    + "fantasia, "
                    + "estado_civil, "
                    + "cep_cidade_natal, "
                    + "pessoa_autorizada, "
                    + "limite_credito, "
                    + "ativo)"
                    + " VALUES ('%s','%s','%s','%s','%s','%s','%s',"
                    + " %s,'%s','%s',%s,'%s','%s', '%s')",
                    cbxCliente.isSelected() ? t : f,
                    cbxFornecedor.isSelected() ? t : f,
                    cbxFuncionario.isSelected() ? t : f,
                    rdFis.isSelected() ? f : t,
                    cpf_cnpj,
                    rg_ie,
                    txtNome.getText(),
                    calDataNasc.getText().isEmpty()?"null":"'"+calDataNasc.getDateAsSQLDate()+"'",
                    txtFantasia.getText(),
                    cbbEstadoCivil.getSelectedItem(),
                    cep_pes.isEmpty()?"null":"'"+cep_pes+"'",
                    txtPessoaAutorizada.getText(),
                    Double.valueOf(frmLimiteCredito.getValue().toString()),
                    chbAtivo.isSelected()?"1":"0");

        if(gravarInf(sql)){
        
            // registro de log
            FrmLogin.log.gravar(FrmLogin.usuario.getNomeUsuario(),
                   this, cpf_cnpj, 1);
        
            novaPessoa = false;
        }
        
    }
    
    private void alteraPessoa(){ // Realiza a alteração das pessoas.
        
        String t = "1";
        String f = "0";
        
        sql = String.format ("UPDATE pessoas "
                    + "SET "
                    + "cliente='%s', "
                    + "fornecedor='%s', "
                    + "funcionario='%s', "
                    + "tipo='%s', "
                    + "doc_secundario='%s', "
                    + "nome='%s', "
                    + "data_nascimento=%s, "
                    + "fantasia='%s', "
                    + "estado_civil='%s', "
                    + "cep_cidade_natal=%s, "
                    + "pessoa_autorizada='%s', "
                    + "limite_credito='%s',"
                    + "ativo='%s' "
                    + "WHERE "
                    + "doc_principal='%s'",
                    cbxCliente.isSelected() ? t : f,
                    cbxFornecedor.isSelected() ? t : f,
                    cbxFuncionario.isSelected() ? t : f,
                    rdFis.isSelected() ? f : t,
                    rg_ie,
                    txtNome.getText(),
                    calDataNasc.getText().isEmpty()?"null":"'"+calDataNasc.getDateAsSQLDate()+"'",
                    txtFantasia.getText(),
                    cbbEstadoCivil.getSelectedItem(),
                    cep_pes.isEmpty()?"null":"'"+cep_pes+"'",
                    txtPessoaAutorizada.getText(),
                    Double.valueOf(frmLimiteCredito.getValue().toString()),
                    chbAtivo.isSelected()?"1":"0",
                    cpf_cnpj);

        if(gravarInf(sql)){
        
            // registro de log
            FrmLogin.log.gravar(FrmLogin.usuario.getNomeUsuario(),
                    this, cpf_cnpj, 2);
        }
        
    }
    
    private void deletaPessoa(){ // Deleta uma pessoa.
        
        sql = String.format("DELETE FROM "
                + "pessoas "
                + "WHERE "
                + "doc_principal = '%s'", 
                cpf_cnpj);

        if(gravarInf(sql)){
        
            // registro de log
            FrmLogin.log.gravar(FrmLogin.usuario.getNomeUsuario(),
                        this, cpf_cnpj, 3);
        }
        
    }
    
    private void cadEndereco(){ // Cadastra o endereço de uma pessoa.
        
        tipo = 0;
        
        if(tbEndereco.getRowCount() == 0){
            padrao = 1;
        }else{
            padrao = 0;
        }
        
        sql = String.format ("INSERT INTO contatos ("
                        + "tipo, "
                        + "padrao, "
                        + "doc_principal_pessoa, "
                        + "descricao)"
                        + " VALUES ('%s', '%s', '%s', '%s')",
                        tipo,
                        padrao,
                        cpf_cnpj,
                        txtRua.getText()+","+
                        txtNum.getText()+","+
                        txtBairro.getText()+","+
                        cep_end);
            
        gravarInf(sql);
            
        qryEndereco.setSQL("SELECT id, descricao, padrao, "
                    + "CASE\n" +
                    "WHEN padrao = true THEN 'Sim' ELSE 'Não'\n" +
                    "END AS 'desc_padrao' "
                    + "FROM contatos "
                    + "WHERE doc_principal_pessoa = '"+cpf_cnpj+"'"
                    + "AND tipo = '"+tipo+"'");
        qryEndereco.execQuery();
        
        novaPessoa = false;
        
    }
    
    private void alteraEndereco(int id){ // Altera o endereço de uma pessoa.
        
        tipo = 0;
        
        sql = String.format ("UPDATE contatos "
                        + "SET "
                        + "descricao='%s' "
                        + "WHERE "
                        + "id='%s'",
                        txtRua.getText()+","+
                        txtNum.getText()+","+
                        txtBairro.getText()+","+
                        cep_end,
                        id);
        
        gravarInf(sql);
        
        qryEndereco.setSQL("SELECT id, descricao, padrao, "
                    + "CASE\n" +
                    "WHEN padrao = true THEN 'Sim' ELSE 'Não'\n" +
                    "END AS 'desc_padrao' "
                    + "FROM contatos "
                    + "WHERE doc_principal_pessoa = '"+cpf_cnpj+"'"
                    + "AND tipo = '"+tipo+"'");
        qryEndereco.execQuery();
        
    }
    
    private void deletaEndereco(int id){ // Deleta um endereço de uma pessoa.
        
        tipo = 0;
        
        sql = String.format("DELETE FROM "
                + "contatos "
                + "WHERE "
                + "id = '%s'", 
                id);
                
        gravarInf(sql);
        
        qryEndereco.setSQL("SELECT id, descricao, padrao, "
                    + "CASE\n" +
                    "WHEN padrao = true THEN 'Sim' ELSE 'Não'\n" +
                    "END AS 'desc_padrao' "
                    + "FROM contatos "
                    + "WHERE doc_principal_pessoa = '"+cpf_cnpj+"'"
                    + "AND tipo = '"+tipo+"'");
        qryEndereco.execQuery();
        
    }
    
    private void cadTelefone(){ // Cadastra um telefone.
        
        tipo = 1;
        
        if(tbTelefone.getRowCount() == 0){
            padrao = 1;
        }else{
            padrao = 0;
        }
        
        sql = String.format ("INSERT INTO contatos ("
                        + " tipo, "
                        + " doc_principal_pessoa, "
                        + " padrao, "
                        + " descricao)"
                        + " VALUES ('%s', '%s', '%s', '%s')",
                        tipo,
                        cpf_cnpj,
                        padrao,
                        telefone);

        gravarInf(sql);
            
        qryTelefone.setSQL("SELECT id, descricao, padrao, "
                    + "CASE\n" +
                    "WHEN padrao = true THEN 'Sim' ELSE 'Não'\n" +
                    "END AS 'desc_padrao' "
                    + "FROM contatos "
                    + "WHERE doc_principal_pessoa = '"+cpf_cnpj+"'"
                    + "AND tipo = '"+tipo+"'");
        qryTelefone.execQuery();
            
        novaPessoa = false;
        
    }
    
    private void alteraTelefone(int id){ // Altera o telefone de uma pessoa.
        
        tipo = 1;
        
        sql = String.format ("UPDATE contatos "
                        + "SET "
                        + "descricao='%s' "
                        + "WHERE "
                        + "id='%s'",
                        telefone,
                        id);
        
        gravarInf(sql);
        
        qryTelefone.setSQL("SELECT id, descricao, padrao, "
                    + "CASE\n" +
                    "WHEN padrao = true THEN 'Sim' ELSE 'Não'\n" +
                    "END AS 'desc_padrao' "
                    + "FROM contatos "
                    + "WHERE doc_principal_pessoa = '"+cpf_cnpj+"'"
                    + "AND tipo = '"+tipo+"'");
        qryTelefone.execQuery();
        
    }
    
    private void deletaTelefone(int id){ // Deleta o telefone de uma pessoa
        
        tipo = 1;
        
        sql = String.format("DELETE FROM "
                + "contatos "
                + "WHERE "
                + "id = '%s'", 
                id);
                
        gravarInf(sql);
        
        qryTelefone.setSQL("SELECT id, descricao, padrao, "
                    + "CASE\n" +
                    "WHEN padrao = true THEN 'Sim' ELSE 'Não'\n" +
                    "END AS 'desc_padrao' "
                    + "FROM contatos "
                    + "WHERE doc_principal_pessoa = '"+cpf_cnpj+"'"
                    + "AND tipo = '"+tipo+"'");
        qryTelefone.execQuery();
        
    }
    
    private void cadEmail(){ // Cadastra o email de uma pessoa.
        
        tipo = 2;
        
        if(tbEmail.getRowCount() == 0){
            padrao = 1;
        }else{
            padrao = 0;
        }
        
        sql = String.format ("INSERT INTO contatos ("
                        + " tipo, "
                        + " doc_principal_pessoa, "
                        + " padrao, "
                        + " descricao)"
                        + " VALUES ('%s', '%s', '%s', '%s')",
                        tipo,
                        cpf_cnpj,
                        padrao,
                        txtEmail.getText());
        
        gravarInf(sql);
            
        qryEmail.setSQL("SELECT id, descricao, padrao, "
                    + "CASE\n" +
                    "WHEN padrao = true THEN 'Sim' ELSE 'Não'\n" +
                    "END AS 'desc_padrao' "
                    + "FROM contatos "
                    + "WHERE doc_principal_pessoa = '"+cpf_cnpj+"'"
                    + "AND tipo = '"+tipo+"'");
        qryEmail.execQuery();
        
        novaPessoa = false;
        
    }
    
    private void alteraEmail(int id){ // Altera o email de uma pessoa.
        
        tipo = 2;
        
        sql = String.format ("UPDATE contatos "
                        + "SET "
                        + "descricao='%s' "
                        + "WHERE "
                        + "id='%s'",
                        txtEmail.getText(),
                        id);
        
        gravarInf(sql);
        
        qryEmail.setSQL("SELECT id, descricao, padrao, "
                    + "CASE\n" +
                    "WHEN padrao = true THEN 'Sim' ELSE 'Não'\n" +
                    "END AS 'desc_padrao' "
                    + "FROM contatos "
                    + "WHERE doc_principal_pessoa = '"+cpf_cnpj+"'"
                    + "AND tipo = '"+tipo+"'");
        qryEmail.execQuery();
        
    }
    
    private void deletaEmail(int id){ // Altera o email de uma pessoa.
        
        tipo = 2;
        
        sql = String.format("DELETE FROM contatos WHERE id = '%s'", id);
                
        gravarInf(sql);
        
        qryEmail.setSQL("SELECT id, descricao, padrao, "
                    + "CASE\n" +
                    "WHEN padrao = true THEN 'Sim' ELSE 'Não'\n" +
                    "END AS 'desc_padrao' "
                    + "FROM contatos "
                    + "WHERE doc_principal_pessoa = '"+cpf_cnpj+"'"
                    + "AND tipo = '"+tipo+"'");
        qryEmail.execQuery();
        
    }
    
    private void limpaTudo(){ // Limpa todos os campos da janela.
        
        // Pessoa
        
        chbAtivo.setSelected(true);
        
        cbxCliente.setSelected(false);
        cbxFornecedor.setSelected(false);
        cbxFuncionario.setSelected(false);
        rdFis.setSelected(false);
        rdJud.setSelected(false);
        mskDocPrincipal.setValue("");
        mskDocSecundario.setValue("");
        txtNome.setText("");
        calDataNasc.setText("");
        txtFantasia.setText("");
        cbbEstadoCivil.setSelectedItem(" ");
        mskCEP_Pes.setValue("");
        txtCidadeNatal.setText("");
        txtPessoaAutorizada.setText("");
        frmLimiteCredito.setValue(0.0);
        txtInc.setText("");
        txtMod.setText("");
        lblDocPrincipal.setText("Doc. Principal:");
        lblDocSecundario.setText("Doc. Secundário:");
        
        mskDocPrincipal.setMask("");
        mskDocSecundario.setMask("");
        
        // Endereço
        
        txtRua.setText("");
        txtNum.setText("");
        txtBairro.setText("");
        mskCEP_End.setValue("");
        txtCidade.setText("");
        txtEstado.setText("");
        
        // Telefone
        
        mskTelefone.setValue("");
        mskTelefone.setMask("(##)#####-####");
        cbDigito.setSelected(false);
        
        // E-mail
        
        txtEmail.setText("");
        
        qryEndereco.setSQL("SELECT id, descricao, padrao, padrao as 'desc_padrao' FROM contatos "
                    + "WHERE id = '0'");
        qryEndereco.execQuery();
        
        qryTelefone.setSQL("SELECT id, descricao, padrao, padrao as 'desc_padrao' FROM contatos "
                    + "WHERE id = '0'");
        qryTelefone.execQuery();
        
        qryEmail.setSQL("SELECT id, descricao, padrao, padrao as 'desc_padrao' FROM contatos "
                    + "WHERE id = '0'");
        qryEmail.execQuery();
        
        mskDocPrincipal.setFocusable(true);
        
        novaPessoa = true;
        novoEndereco = true;
        novoEmail = true;
        novoTelefone = true;
        
    }
    
    public void limpaEndereco(){ // Limpa os campos de endereço.
        
        txtRua.setText("");
        txtNum.setText("");
        txtBairro.setText("");
        mskCEP_End.setValue("");
        txtCidade.setText("");
        txtEstado.setText("");
        
        novoEndereco = true;
        
    }
    
    public void limpaEmail(){ // Limpa os campos de email.
        
        txtEmail.setText("");
        
        novoEmail = true;
        
    }
    
    public void limpaTelefone(){ // Limpa os campos de telefone.
        
        mskTelefone.setValue("");
        mskTelefone.setMask("(##)#####-####");
        cbDigito.setSelected(false);
        
        
        novoTelefone = true;
        
    }
    
    public void atribuirCampos(){ // Atribui os campos selecionados na janela de consulta.
        
        // captura os valor da query resultante da pesquisa e atribui nos campos. Ex:
        // String nomeCampoFormulario = query.getCurrentFieldValueAsString("nomeCampoTabelaReferente");
        // elemento.setText(nomeCampoFormulario);
        boolean cliente, fornecedor, funcionario, tipo, ativo;
        int cep;
        String doc1, doc2, nome, fantasia, estado, pessoa_autorizada, inclusao, modificacao;
        Date data_nas;
        double limite_credito;
        // Pega o campo selecionado e passa para int/string
        
        cliente = qryAtribuiPes.getCurrentFieldValueAsBoolean("cliente");
        fornecedor = qryAtribuiPes.getCurrentFieldValueAsBoolean("fornecedor");
        funcionario = qryAtribuiPes.getCurrentFieldValueAsBoolean("funcionario");
        tipo = qryAtribuiPes.getCurrentFieldValueAsBoolean("tipo");
        doc1 = qryAtribuiPes.getCurrentFieldValueAsString("doc_principal");
        doc2 = qryAtribuiPes.getCurrentFieldValueAsString("doc_secundario");
        nome = qryAtribuiPes.getCurrentFieldValueAsString("nome");
        data_nas = qryAtribuiPes.getCurrentFieldValueAsSQLDate("data_nascimento");
        fantasia = qryAtribuiPes.getCurrentFieldValueAsString("fantasia");
        estado = qryAtribuiPes.getCurrentFieldValueAsString("estado_civil");
        cep = qryAtribuiPes.getCurrentFieldValueAsInteger("cep_cidade_natal");
        pessoa_autorizada = qryAtribuiPes.getCurrentFieldValueAsString("pessoa_autorizada");
        limite_credito = qryAtribuiPes.getCurrentFieldValueAsDouble("limite_credito");
        inclusao = qryAtribuiPes.getCurrentFieldValueAsString("data_inclusao");
        modificacao = qryAtribuiPes.getCurrentFieldValueAsString("data_modificacao");
        ativo = qryAtribuiPes.getCurrentFieldValueAsBoolean("ativo");
        
        chbAtivo.setSelected(ativo);
        // Aplica os campos selecionados de acordo com o seu local
        
        
        cbxCliente.setSelected(cliente);
        cbxFornecedor.setSelected(fornecedor);
        cbxFuncionario.setSelected(funcionario);
        
//        if (tipo){
//            rdFis.setSelected(true);
//            rdJud.setSelected(false);
//        }else{
//            rdFis.setSelected(false);
//            rdJud.setSelected(true);
//        }

        rdFis.setSelected(!tipo);
        rdJud.setSelected(tipo);
        
        if(rdFis.isSelected()){
            mskDocPrincipal.setMask("###.###.###-##");
            mskDocSecundario.setMask("##.###.###-#");
        }else if(rdJud.isSelected()){
            mskDocPrincipal.setMask("##.###.###/####-##");
            mskDocSecundario.setMask("###.###.###.###");
        }
        
        mskDocPrincipal.setText(doc1);
        mskDocSecundario.setText(doc2);
        txtNome.setText(nome);
        
        if(data_nas != null){
            calDataNasc.setDateAsSQLDate(data_nas);
        }else{
            calDataNasc.setText("");
        }
        txtFantasia.setText(fantasia);
        cbbEstadoCivil.setSelectedItem(estado);
        
        if(cep != 0){
            mskCEP_Pes.setText(String.valueOf(cep));
        }else{
            mskCEP_Pes.setText("");
        }
        
        txtPessoaAutorizada.setText(pessoa_autorizada);
        frmLimiteCredito.setValue(limite_credito);
        txtInc.setText(inclusao);
        txtMod.setText(modificacao);
        
//        sistema.CNP val = new sistema.CNP();
        cpf_cnpj = sistema.CNP.removerMascara(mskDocPrincipal.getText());
        rg_ie = sistema.CNP.removerMascara(mskDocSecundario.getText());
        
        qryEndereco.setSQL("SELECT id, descricao, padrao, "
                    + "CASE\n" +
                    "WHEN padrao = true THEN 'Sim' ELSE 'Não'\n" +
                    "END AS 'desc_padrao' "
                    + " FROM contatos "
                    + "WHERE doc_principal_pessoa = '"+cpf_cnpj+"'"
                    + "AND tipo = '0'");
        qryEndereco.execQuery();
        
        qryTelefone.setSQL("SELECT id, descricao, padrao, "
                    + "CASE\n" +
                    "WHEN padrao = true THEN 'Sim' ELSE 'Não'\n" +
                    "END AS 'desc_padrao' "
                    + " FROM contatos "
                    + "WHERE doc_principal_pessoa = '"+cpf_cnpj+"'"
                    + "AND tipo = '1'");
        qryTelefone.execQuery();
        
        qryEmail.setSQL("SELECT id, descricao, padrao, "
                    + "CASE\n" +
                    "WHEN padrao = true THEN 'Sim' ELSE 'Não'\n" +
                    "END AS 'desc_padrao' "
                    + " FROM contatos "
                    + "WHERE doc_principal_pessoa = '"+cpf_cnpj+"'"
                    + "AND tipo = '2'");
        qryEmail.execQuery();
        
        sistema.Localidade local = new sistema.Localidade(principal.Principal.conexao);
        
        if(cep != 0){
            String[] inf;
            inf = local.getLocalidade(Integer.valueOf(cep));
            txtCidadeNatal.setText(inf[0]);
        }else{
            txtCidadeNatal.setText("");
        }
        
        mskDocPrincipal.setFocusable(false);
        novaPessoa = false;
        
    }
    
    public void atribuirEnd(){ // Atribui os campos de endereço selecionado na tabela.
        
        
        // captura os valor da query resultante da pesquisa e atribui nos campos. Ex:
        // String nomeCampoFormulario = query.getCurrentFieldValueAsString("nomeCampoTabelaReferente");
        // elemento.setText(nomeCampoFormulario);
        
        
        sistema.Localidade local = new sistema.Localidade(principal.Principal.conexao);
        String[] end = local.getLocalidade(qryEndereco.getCurrentFieldValueAsString("descricao"));
        
        // Pega o campo selecionado e passa para int/string
        
        txtRua.setText(end[0]);
        txtNum.setText(end[1]);
        txtBairro.setText(end[2]);
        mskCEP_End.setText(end[3]);
        txtCidade.setText(end[4]);
        txtEstado.setText(end[5]);
        
        novoEndereco = false;
        
    }
    
    public void atribuirEmail(){ // Atribui os campos de email selecionados na tabela.
        
        // captura os valor da query resultante da pesquisa e atribui nos campos. Ex:
        // String nomeCampoFormulario = query.getCurrentFieldValueAsString("nomeCampoTabelaReferente");
        // elemento.setText(nomeCampoFormulario);
        
        String mail;
        mail = qryEmail.getCurrentFieldValue("descricao");
        
        // Pega o campo selecionado e passa para int/string
        
        txtEmail.setText(mail);
        
        novoEmail = false;
        
    }
    
    public void atribuirTel(){ // Atribui os campos de telefone selecionados na tabela.
        
        // captura os valor da query resultante da pesquisa e atribui nos campos. Ex:
        // String nomeCampoFormulario = query.getCurrentFieldValueAsString("nomeCampoTabelaReferente");
        // elemento.setText(nomeCampoFormulario);
        
        String tel;
        tel = qryTelefone.getCurrentFieldValue("descricao");
        
        // Pega o campo selecionado e passa para int/string
        
        if(tel.length() > 9){
            mskTelefone.setMask("(##)#####-####");
        }
        
        mskTelefone.setText(tel);
        novoTelefone = false;
        
    }
    
    public void definePadraoEndereco(int id){ // Define um endereço padrão.
        
        sql = String.format ("UPDATE contatos "
                        + "SET "
                        + "padrao = '0' "
                        + "WHERE "
                        + "padrao = '1' "
                        + "AND tipo = 0 "
                        + "AND doc_principal_pessoa = '%s'",
                        cpf_cnpj);
        
        gravarInf(sql);
        
        sql = String.format ("UPDATE contatos "
                        + "SET "
                        + "padrao = '1' "
                        + "WHERE "
                        + "id = '%s'",
                        id);
        
        gravarInf(sql);
        
        qryEndereco.setSQL("SELECT id, descricao, padrao, "
                    + "CASE\n" +
                    "WHEN padrao = true THEN 'Sim' ELSE 'Não'\n" +
                    "END AS 'desc_padrao' "
                    + " FROM contatos "
                    + "WHERE doc_principal_pessoa = '"+cpf_cnpj+"'"
                    + "AND tipo = '0'");
        qryEndereco.execQuery();
        
    }
    
    public void definePadraoEmail(int id){ // Define um email padrão.
        
        sql = String.format ("UPDATE contatos "
                        + "SET "
                        + "padrao = '0' "
                        + "WHERE "
                        + "padrao = '1' "
                        + "AND tipo = '2' "
                        + "AND doc_principal_pessoa = '%s'",
                        cpf_cnpj);
        
        gravarInf(sql);
        
        sql = String.format ("UPDATE contatos "
                        + "SET "
                        + "padrao = '1' "
                        + "WHERE "
                        + "id = '%s'",
                        id);
        
        gravarInf(sql);
        
        qryEmail.setSQL("SELECT id, descricao, padrao, "
                    + "CASE\n" +
                    "WHEN padrao = true THEN 'Sim' ELSE 'Não'\n" +
                    "END AS 'desc_padrao' "
                    + " FROM contatos "
                    + "WHERE doc_principal_pessoa = '"+cpf_cnpj+"'"
                    + "AND tipo = '2'");
        qryEmail.execQuery();
        
    }
    
    public void definePadraoTelefone(int id){ // Define um telefone padrão.
        
        sql = String.format ("UPDATE contatos "
                        + "SET "
                        + "padrao = '0' "
                        + "WHERE "
                        + "padrao = '1' "
                        + "AND tipo = '1' "
                        + "AND doc_principal_pessoa = '%s'",
                        cpf_cnpj);
        
        gravarInf(sql);
        
        sql = String.format ("UPDATE contatos "
                        + "SET "
                        + "padrao = '1' "
                        + "WHERE "
                        + "id = '%s'",
                        id);
        
        gravarInf(sql);
        
        qryTelefone.setSQL("SELECT id, descricao, padrao, "
                    + "CASE\n" +
                    "WHEN padrao = true THEN 'Sim' ELSE 'Não'\n" +
                    "END AS 'desc_padrao' "
                    + " FROM contatos "
                    + "WHERE doc_principal_pessoa = '"+cpf_cnpj+"'"
                    + "AND tipo = '1'");
        qryTelefone.execQuery();
        
    }
    
    public void recuperarEndereco(boolean pessoa){
        sistema.Localidade local = new sistema.Localidade(principal.Principal.conexao);

        if(pessoa){
            cep_pes = sistema.CNP.removerMascara(mskCEP_Pes.getText());
        }else
            cep_pes = sistema.CNP.removerMascara(mskCEP_End.getText());

        String[] inf;

        inf = local.getLocalidade(Integer.valueOf(cep_pes));

        if(inf != null){
            if(pessoa){
                txtCidadeNatal.setText(inf[0]);
            }else{
                txtCidade.setText(inf[0]);
                txtEstado.setText(inf[1]);
            }
        }
    }
    
}