/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package financeiro;

import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import lib.jdb.jdbquery.JDBQuery;
import lib.jdb.jdbupdate.JDBUpdate;
import principal.FrmLogin;

/**
 *
 * @author patri
 */
public class iFrmCaixa extends javax.swing.JInternalFrame {
    JDBQuery qryCaixa, qryItensCaixa, qryCaixaTransf, qryTemp;
    int idCaixa, idItemCaixa;

    /**
     * Creates new form iFrmCaixa
     */
    public iFrmCaixa() {
        qryCaixa = new JDBQuery();
        qryItensCaixa = new JDBQuery();
        qryCaixaTransf = new JDBQuery();
        qryTemp = new JDBQuery();
        
        JDBQuery[] qry = {qryCaixa, qryItensCaixa, qryCaixaTransf, qryTemp}; 
        
        for(JDBQuery q: qry){
            q.setJDBConnection(principal.Principal.conexao.getConexao());
            q.setConcurUpdatable(false);
            q.setLanguage("pt");
            q.setDecimalFormat("0.00");
            q.setTimeStampFormat("dd/MM/yyyy HH:mm:ss");
        }
        
        initComponents();
        
        cbxCaixaTransf.setJDBListQuery(qryCaixaTransf);
        cbxCaixaTransf.setKeyListField("id");
        cbxCaixaTransf.setInvisibleFields("id tipo");
//        carregarCaixaTransf();
        
        tbCaixa.setJDBQuery(qryItensCaixa);
        tbCaixa.setEditable(false);
        tbCaixa.setInvisibleFields("id id_caixa valor movimento especie");
        tbCaixa.setFieldsTitle("data", "DATA");
        tbCaixa.setFieldsTitle("descricao", "DESCRIÇÃO");
        tbCaixa.setFieldsTitle("credito", "CRÉDITO");
        tbCaixa.setFieldsTitle("debito", "DÉBITO");
        tbCaixa.setFieldsTitle("desc_especie", "ESPÉCIE");
        tbCaixa.setFieldsWidth("credito", 20);
        tbCaixa.setFieldsWidth("debito", 20);
        tbCaixa.setFieldsWidth("desc_especie", 10);
//        carregarItensCaixa();
        
        DecimalFormat decimal = new DecimalFormat("######0.00");        
        NumberFormatter numFormatter = new NumberFormatter(decimal);
        numFormatter.setFormat(decimal);
        numFormatter.setAllowsInvalid(false);
        DefaultFormatterFactory dfFactory = new DefaultFormatterFactory(numFormatter);
        
        txtValorTransf.setFormatterFactory(dfFactory);
        txtSaldo.setFormatterFactory(dfFactory);
        txtSaldoDH.setFormatterFactory(dfFactory);
        txtSaldoCH.setFormatterFactory(dfFactory);
        txtSaldoCT.setFormatterFactory(dfFactory);
        
        limpar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Painel = new javax.swing.JPanel();
        pnCodigo = new javax.swing.JPanel();
        txtID = new lib.jdb.control.jdbtextfield.JDBTextField();
        lblDataAbertura = new javax.swing.JLabel();
        lblDataFecha = new javax.swing.JLabel();
        lblSaldo = new javax.swing.JLabel();
        scrlCaixa = new javax.swing.JScrollPane();
        tbCaixa = new lib.jdb.control.jdbtable.JDBTable();
        pnCaixa = new javax.swing.JPanel();
        lblValor = new javax.swing.JLabel();
        lblCaixa = new javax.swing.JLabel();
        btnAbrirCaixa = new javax.swing.JButton();
        btnFecharCaixa = new javax.swing.JButton();
        btnTranferirValor = new javax.swing.JButton();
        cbxCaixaTransf = new lib.jdb.control.jdblistcombobox.JDBListComboBox();
        txtValorTransf = new javax.swing.JFormattedTextField();
        btnSaldoInicial = new javax.swing.JButton();
        cbxEspecie = new javax.swing.JComboBox();
        btnConsultar = new javax.swing.JButton();
        txtDataAbertura = new javax.swing.JTextField();
        txtDataFechamento = new javax.swing.JTextField();
        txtSaldo = new javax.swing.JFormattedTextField();
        txtDescricao = new javax.swing.JTextField();
        chbCofre = new javax.swing.JCheckBox();
        btnAtualizar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        txtSaldoDH = new javax.swing.JFormattedTextField();
        txtSaldoCH = new javax.swing.JFormattedTextField();
        txtSaldoCT = new javax.swing.JFormattedTextField();
        lblSaldo1 = new javax.swing.JLabel();
        lblSaldo2 = new javax.swing.JLabel();
        lblSaldo3 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Caixa");

        Painel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)));

        pnCodigo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "Código", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        txtID.setFocusable(false);
        txtID.setFont(principal.FrmLogin.fontePadrao);

        javax.swing.GroupLayout pnCodigoLayout = new javax.swing.GroupLayout(pnCodigo);
        pnCodigo.setLayout(pnCodigoLayout);
        pnCodigoLayout.setHorizontalGroup(
            pnCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCodigoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnCodigoLayout.setVerticalGroup(
            pnCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCodigoLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        lblDataAbertura.setFont(principal.FrmLogin.fontePadrao);
        lblDataAbertura.setText("Data de Abertura:");

        lblDataFecha.setFont(principal.FrmLogin.fontePadrao);
        lblDataFecha.setText("Data de Fechamento:");

        lblSaldo.setFont(principal.FrmLogin.fontePadrao);
        lblSaldo.setText("Saldo Geral:");

        scrlCaixa.setFont(principal.FrmLogin.fontePadrao);

        tbCaixa.setEditable(false);
        scrlCaixa.setViewportView(tbCaixa);

        pnCaixa.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        lblValor.setFont(principal.FrmLogin.fontePadrao);
        lblValor.setText("Valor:");

        lblCaixa.setFont(principal.FrmLogin.fontePadrao);
        lblCaixa.setText("Caixa:");

        btnAbrirCaixa.setFont(principal.FrmLogin.fontePadrao);
        btnAbrirCaixa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/folder.png"))); // NOI18N
        btnAbrirCaixa.setText("Abrir Caixa");
        btnAbrirCaixa.setNextFocusableComponent(btnFecharCaixa);
        btnAbrirCaixa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirCaixaActionPerformed(evt);
            }
        });

        btnFecharCaixa.setFont(principal.FrmLogin.fontePadrao);
        btnFecharCaixa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/folder_close.png"))); // NOI18N
        btnFecharCaixa.setText("Fechar Caixa");
        btnFecharCaixa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharCaixaActionPerformed(evt);
            }
        });

        btnTranferirValor.setFont(principal.FrmLogin.fontePadrao);
        btnTranferirValor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/money.png"))); // NOI18N
        btnTranferirValor.setMnemonic('t');
        btnTranferirValor.setText("Transferir Valor");
        btnTranferirValor.setNextFocusableComponent(txtID);
        btnTranferirValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTranferirValorActionPerformed(evt);
            }
        });

        txtValorTransf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));

        btnSaldoInicial.setFont(principal.FrmLogin.fontePadrao);
        btnSaldoInicial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/money.png"))); // NOI18N
        btnSaldoInicial.setText("Saldo inicial");
        btnSaldoInicial.setNextFocusableComponent(txtID);
        btnSaldoInicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaldoInicialActionPerformed(evt);
            }
        });

        cbxEspecie.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "dinheiro", "cheque", "cartão" }));

        javax.swing.GroupLayout pnCaixaLayout = new javax.swing.GroupLayout(pnCaixa);
        pnCaixa.setLayout(pnCaixaLayout);
        pnCaixaLayout.setHorizontalGroup(
            pnCaixaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCaixaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnCaixaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnFecharCaixa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAbrirCaixa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(pnCaixaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnCaixaLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(pnCaixaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblValor)
                            .addComponent(txtValorTransf, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnCaixaLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSaldoInicial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnCaixaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnCaixaLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnCaixaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnCaixaLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnTranferirValor))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnCaixaLayout.createSequentialGroup()
                                .addComponent(lblCaixa)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(cbxCaixaTransf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnCaixaLayout.setVerticalGroup(
            pnCaixaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCaixaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnCaixaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnCaixaLayout.createSequentialGroup()
                        .addGroup(pnCaixaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblValor)
                            .addComponent(lblCaixa))
                        .addGap(33, 33, 33))
                    .addGroup(pnCaixaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAbrirCaixa)
                        .addComponent(txtValorTransf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbxCaixaTransf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbxEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(pnCaixaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFecharCaixa)
                    .addComponent(btnTranferirValor)
                    .addComponent(btnSaldoInicial))
                .addContainerGap())
        );

        btnConsultar.setFont(principal.FrmLogin.fontePadrao);
        btnConsultar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/look.png"))); // NOI18N
        btnConsultar.setMnemonic('c');
        btnConsultar.setText("Consultar");
        btnConsultar.setNextFocusableComponent(btnAbrirCaixa);
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        txtDataAbertura.setFocusable(false);

        txtDataFechamento.setFocusable(false);

        txtSaldo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtSaldo.setFocusable(false);

        chbCofre.setText("Cofre");

        btnAtualizar.setMnemonic('a');
        btnAtualizar.setText("Atualizar");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        btnLimpar.setMnemonic('l');
        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        txtSaldoDH.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtSaldoDH.setFocusable(false);

        txtSaldoCH.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtSaldoCH.setFocusable(false);

        txtSaldoCT.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtSaldoCT.setFocusable(false);

        lblSaldo1.setFont(principal.FrmLogin.fontePadrao);
        lblSaldo1.setText("Dinheiro:");

        lblSaldo2.setFont(principal.FrmLogin.fontePadrao);
        lblSaldo2.setText("Cheque:");

        lblSaldo3.setFont(principal.FrmLogin.fontePadrao);
        lblSaldo3.setText("Cartão:");

        javax.swing.GroupLayout PainelLayout = new javax.swing.GroupLayout(Painel);
        Painel.setLayout(PainelLayout);
        PainelLayout.setHorizontalGroup(
            PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDataFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtDataFechamento)
                    .addComponent(pnCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtSaldo)
                    .addComponent(txtDataAbertura)
                    .addComponent(btnAtualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLimpar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PainelLayout.createSequentialGroup()
                        .addComponent(lblSaldo3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSaldoCT, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDataAbertura)
                            .addComponent(lblSaldo))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PainelLayout.createSequentialGroup()
                        .addComponent(lblSaldo1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSaldoDH, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PainelLayout.createSequentialGroup()
                        .addComponent(lblSaldo2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSaldoCH, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnCaixa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addComponent(txtDescricao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chbCofre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnConsultar))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PainelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(scrlCaixa, javax.swing.GroupLayout.PREFERRED_SIZE, 709, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );
        PainelLayout.setVerticalGroup(
            PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnConsultar)
                            .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chbCofre))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scrlCaixa, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addComponent(pnCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDataAbertura)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDataAbertura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDataFecha)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDataFechamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSaldo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSaldoDH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSaldo1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSaldoCH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSaldo2))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSaldoCT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSaldo3))
                        .addGap(18, 18, 18)
                        .addComponent(btnAtualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLimpar))
                    .addComponent(pnCaixa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(Painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(Painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        limpar();
        
        pesquisa.iFrmPesCaixa Caixa = new pesquisa.iFrmPesCaixa(this, qryCaixa);
        principal.FrmPrincipal.Desktop.add(Caixa);
        Caixa.setVisible(true);
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void btnFecharCaixaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharCaixaActionPerformed
        if(chbCofre.isSelected()){
            if(FrmLogin.usuario.verificarPermissao(this, "caixaCofre", 1)){
                fecharCaixa();
            }
        }else{
            if(FrmLogin.usuario.verificarPermissao(this, 1)){
                fecharCaixa();
            }
        }
    }//GEN-LAST:event_btnFecharCaixaActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        carregarCaixaTransf();
        
        carregarItensCaixa();
        
        calcularSaldoCaixa();
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        limpar();
        
        mudarStatusPnCaixa(true);
        
        btnAbrirCaixa.requestFocus();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnAbrirCaixaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirCaixaActionPerformed
        if(chbCofre.isSelected()){
            if(FrmLogin.usuario.verificarPermissao(this, "caixaCofre", 1)){
                abrirCaixa();
            }
        }else{
            if(FrmLogin.usuario.verificarPermissao(this, 1)){
                abrirCaixa();
            }
        }
    }//GEN-LAST:event_btnAbrirCaixaActionPerformed

    private void btnSaldoInicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaldoInicialActionPerformed
        if(chbCofre.isSelected()){
            if(FrmLogin.usuario.verificarPermissao(this, "caixaCofre", 1)){
                lancarSaldoInicial();
            }
        }else{
            if(FrmLogin.usuario.verificarPermissao(this, 1)){
                lancarSaldoInicial();
            }
        }
    }//GEN-LAST:event_btnSaldoInicialActionPerformed

    private void btnTranferirValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTranferirValorActionPerformed
        if(chbCofre.isSelected()){
            if(FrmLogin.usuario.verificarPermissao(this, "caixaCofre", 1)){
                transferirValorCaixa();
            }
        }else{
            if(FrmLogin.usuario.verificarPermissao(this, 1)){
                transferirValorCaixa();
            }
        }
    }//GEN-LAST:event_btnTranferirValorActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Painel;
    private javax.swing.JButton btnAbrirCaixa;
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnFecharCaixa;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnSaldoInicial;
    private javax.swing.JButton btnTranferirValor;
    private lib.jdb.control.jdblistcombobox.JDBListComboBox cbxCaixaTransf;
    private javax.swing.JComboBox cbxEspecie;
    private javax.swing.JCheckBox chbCofre;
    private javax.swing.JLabel lblCaixa;
    private javax.swing.JLabel lblDataAbertura;
    private javax.swing.JLabel lblDataFecha;
    private javax.swing.JLabel lblSaldo;
    private javax.swing.JLabel lblSaldo1;
    private javax.swing.JLabel lblSaldo2;
    private javax.swing.JLabel lblSaldo3;
    private javax.swing.JLabel lblValor;
    private javax.swing.JPanel pnCaixa;
    private javax.swing.JPanel pnCodigo;
    private javax.swing.JScrollPane scrlCaixa;
    private lib.jdb.control.jdbtable.JDBTable tbCaixa;
    private javax.swing.JTextField txtDataAbertura;
    private javax.swing.JTextField txtDataFechamento;
    private javax.swing.JTextField txtDescricao;
    private lib.jdb.control.jdbtextfield.JDBTextField txtID;
    private javax.swing.JFormattedTextField txtSaldo;
    private javax.swing.JFormattedTextField txtSaldoCH;
    private javax.swing.JFormattedTextField txtSaldoCT;
    private javax.swing.JFormattedTextField txtSaldoDH;
    private javax.swing.JFormattedTextField txtValorTransf;
    // End of variables declaration//GEN-END:variables

    public void atribuirCampor(){
        idCaixa = qryCaixa.getCurrentFieldValueAsInteger("id");
        txtID.setText(String.valueOf(idCaixa));
        txtDataAbertura.setText(qryCaixa.getCurrentFieldValueAsString("data_abertura"));
        txtDataFechamento.setText(qryCaixa.getCurrentFieldValueAsString("data_fechamento"));
        txtSaldo.setValue(qryCaixa.getCurrentFieldValueAsDouble("saldo_final"));
        txtDescricao.setText(qryCaixa.getCurrentFieldValueAsString("descricao"));
        chbCofre.setSelected(qryCaixa.getCurrentFieldValueAsBoolean("tipo"));
        
        carregarCaixaTransf();
        
        carregarItensCaixa();
        
        calcularSaldoCaixa();
        
        mudarStatusPnCaixa(qryCaixa.getCurrentFieldValueAsString("data_fechamento") == null);
        
        txtDescricao.setFocusable(false);
        chbCofre.setEnabled(false);
    }
    
    private void mudarStatusPnCaixa(boolean status){
        for(int i=0; i < pnCaixa.getComponentCount(); i++){
            pnCaixa.getComponent(i).setEnabled(status);
        }
    }
    
    private void limpar(){
        idCaixa = 0;
        idItemCaixa = 0;
        
        txtID.setText("");
        txtDescricao.setText("");
        txtSaldo.setValue(0.0);
        txtSaldoDH.setValue(0.0);
        txtSaldoCH.setValue(0.0);
        txtSaldoCT.setValue(0.0);
        txtDataAbertura.setText("");
        txtDataFechamento.setText("");
        chbCofre.setSelected(false);
        
        txtDescricao.setFocusable(true);
        chbCofre.setEnabled(true);
        
        carregarItensCaixa();
        
        limparCamposTransf();
    }
    
    private void limparCamposTransf(){
        txtValorTransf.setValue(0.0);
        
        carregarCaixaTransf();
        
        cbxEspecie.setSelectedIndex(0);
        
        if(qryCaixaTransf.getRow() > 0){
            cbxCaixaTransf.setSelectedIndex(0);
        }
    }
    
    private void carregarItensCaixa(){
        qryItensCaixa.setSQL(
                "SELECT "
                    + "id, "
                    + "id_caixa, "
                    + "data, "
                    + "descricao, "
                    + "valor, "
                    + "movimento, "
                    + "credito, "
                    + "debito,"
                    + "especie,"
                    + "desc_especie "
                + "FROM "
                    + "vw_itens_caixa "
                + "WHERE "
                    + "id_caixa = " + idCaixa);
        qryItensCaixa.execQuery();
    }

    private void carregarCaixaTransf(){
        qryCaixaTransf.setSQL(
                "SELECT "
                    + "id, "
                    + "descricao,"
                    + "tipo, "
                    + "desc_tipo "
                + "FROM vw_caixa_tipo "
                + "WHERE data_fechamento IS NULL "
                    + "AND id <> " + idCaixa);
        qryCaixaTransf.execQuery();
    }
    
    private void calcularSaldoCaixa(){
        double saldo = 0.0, dh = 0.0, ch = 0.0, ct = 0.0, valor = 0.0;
        
        qryItensCaixa.first();
        if(qryItensCaixa.getRow() == 1){
            
            do{
                valor = qryItensCaixa.getCurrentFieldValueAsDouble("valor");
                if(!qryItensCaixa.getCurrentFieldValueAsBoolean("movimento")){
                    valor *= -1;
                }
                
                saldo += valor;
                
                switch(qryItensCaixa.getCurrentFieldValueAsInteger("especie")){
                    case 0:
                        dh += valor;
                    break;
                    case 1:
                        ch += valor;
                    break;
                    case 2:
                        ct += valor;
                    break;
                }
            }while(qryItensCaixa.next() != -1);
        }
        
        txtSaldo.setValue(Math.abs(saldo));
        txtSaldoDH.setValue(Math.abs(dh));
        txtSaldoCH.setValue(Math.abs(ch));
        txtSaldoCT.setValue(Math.abs(ct));
    }
    
        private void enviarTransacao(String sql){
        JDBUpdate transacao = new JDBUpdate();
        transacao.setJDBConnection(principal.Principal.conexao.getConexao());

        transacao.setSQL(sql);
        transacao.setShowMessageOnError(false);
        
        // Se a transação retornar erro:
        if(!transacao.execUpdate()){
            //1451: Violação de foreign key, contém relacionamento
            if(transacao.getErrorCode() == 1451){
                JOptionPane.showMessageDialog(this, 
                        "Categoria de produto com relacionamento, não pode ser excluída", "Atenção", 
                        JOptionPane.INFORMATION_MESSAGE);                
            }
        }
    }

    private void abrirCaixa(){
        if(idCaixa == 0){
            if(txtDescricao.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Informe uma descrição para o caixa", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
                txtDescricao.requestFocus();
            }else{
                if(sistema.Mensagem.showConfirmDialog(this, 
                        "Deseja realmente abrir um novo caixa " 
                                + (chbCofre.isSelected()?"do tipo COFRE":""), 
                        "Confirmação") == 0){

                    String sql = String.format(
                            "INSERT INTO caixas("
                                + "descricao, "
                                + "tipo, "
                                + "data_abertura) "
                            + "VALUES ("
                                + "'%s','%s','%s')",
                            txtDescricao.getText(),
                            (chbCofre.isSelected()?"1":"0"),
                            sistema.Data.getAtualSQL());

                    enviarTransacao(sql);

                    qryTemp.setSQL("SELECT LAST_INSERT_ID()");
                    qryTemp.execQuery();

                    idCaixa = qryTemp.getCurrentFieldValueAsInteger(1);
                    txtID.setText(String.valueOf(idCaixa));

                    qryCaixa.setSQL(
                            "SELECT "
                                + "id, "
                                + "descricao, "
                                + "tipo, "
                                + "desc_tipo, "
                                + "data_abertura, "
                                + "data_fechamento, "
                                + "saldo_final, "
                                + "data_inclusao, "
                                + "data_modificacao "
                            + "FROM vw_caixa_tipo "
                            + "WHERE id = " + idCaixa);
                    qryCaixa.execQuery();

                    txtDataAbertura.setText(qryCaixa.getCurrentFieldValueAsString("data_abertura"));
                    
                    chbCofre.setEnabled(false);
                    
                    // registro de log
                    String tarefa = chbCofre.isSelected()?"caixaCofre":"iFrmCaixa"; 
                    FrmLogin.log.gravar(FrmLogin.usuario.getNomeUsuario(),
                            tarefa, String.valueOf(idCaixa), "Aberto caixa");
                }
            }
        }else{
            JOptionPane.showMessageDialog(this, "Limpe o caixa para abrir um novo", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            btnLimpar.requestFocus();
        }
    }
    
    private void fecharCaixa(){
        if(idCaixa != 0){
            if(qryCaixa.getCurrentFieldValue("data_fechamento") == null){
                calcularSaldoCaixa();
                DecimalFormat df = new DecimalFormat("#.00");
                String total = df.format(Double.valueOf(txtSaldo.getValue().toString()));
                
                if(!total.equals(df.format(0.00))){
                    JOptionPane.showMessageDialog(this, 
                            "Somente é permitido fechar o caixa \n"
                            + "quando seu saldo estiver zerado. \n"
                            + "Faça transferência de seus valores para outro caixa", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    txtValorTransf.requestFocus();
                }else if(sistema.Mensagem.showConfirmDialog(this, 
                        "Deseja realmente fechar o caixa?", "Confirmação") == 0){

                    calcularSaldoCaixa();

                    Double saldo = Double.valueOf(txtSaldo.getValue().toString());

    //                System.out.println("Saldo: " + saldo + " data: " + sistema.Data.getAtualSQL());
                    String sql = String.format(
                            "UPDATE caixas SET "
                                + "data_fechamento = '%s', "
                                + "saldo_final = '%s' "
                            + "WHERE id = %s",
                            sistema.Data.getAtualSQL(),
                            saldo,
                            qryCaixa.getCurrentFieldValueAsInteger("id"));
                    enviarTransacao(sql);

                    // registro de log
                    String tarefa = qryCaixa.getCurrentFieldValueAsBoolean("tipo")?
                            "caixaCofre":"iFrmCaixa"; 
                    FrmLogin.log.gravar(FrmLogin.usuario.getNomeUsuario(),
                            tarefa, qryCaixa.getCurrentFieldValueAsString("id"), 
                            "Fechado caixa");

                    limpar();

                }
            }else{
                JOptionPane.showMessageDialog(this, "Consulte um caixa aberto para fechar", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
                btnConsultar.requestFocus();
            }
        }else{
            JOptionPane.showMessageDialog(this, "Consulte um caixa para fechar", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            btnConsultar.requestFocus();
        }
    }
    
    private void lancarSaldoInicial(){
        if(idCaixa != 0){
            if(qryCaixa.getCurrentFieldValue("data_fechamento") == null){
                if(Double.valueOf(txtValorTransf.getValue().toString()) != 0.0){

                    boolean saldoInicial = false;
                    String descSaldoInicial = "Saldo inicial";

                    // procurando se existe saldo inicial lançado,
                    // somente é possivel lançar um saldo inicial em um caixa aberto.
                    qryItensCaixa.first();
                    if(qryItensCaixa.getRow() == 1){

                        do{
                            if(qryItensCaixa.getCurrentFieldValueAsString("descricao").contains(descSaldoInicial)){
                                saldoInicial = true;

                                break;
                            }
                        }while(qryItensCaixa.next() != -1);
                    }

                    if(!saldoInicial){
                        String sql = String.format(
                                "INSERT INTO itens_caixa("
                                    + "id_caixa, "
                                    + "descricao, "
                                    + "valor, "
                                    + "movimento) "
                                + "VALUES ("
                                    + "'%s','%s','%s','%s')",
                                idCaixa, 
                                descSaldoInicial,
                                txtValorTransf.getValue(),
                                1);
                        enviarTransacao(sql);

                        // registro de log
                        String tarefa = qryCaixa.getCurrentFieldValueAsBoolean("tipo")?
                                "caixaCofre":"iFrmCaixa"; 
                        FrmLogin.log.gravar(FrmLogin.usuario.getNomeUsuario(),
                                tarefa, qryCaixa.getCurrentFieldValueAsString("id"), 
                                "Lançado saldo inicial");

                        carregarItensCaixa();

                        calcularSaldoCaixa();
                    }else{
                        JOptionPane.showMessageDialog(this, "Já existe um lançamento de saldo inicial no caixa", 
                                "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    }

                    limparCamposTransf();

                }else{
                    JOptionPane.showMessageDialog(this, "Valor informado inválido", 
                            "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    txtValorTransf.requestFocus();
                }
            }else{
                JOptionPane.showMessageDialog(this, "Consulte um caixa aberto", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
                btnConsultar.requestFocus();
            }
        }else{
            JOptionPane.showMessageDialog(this, "Consulte um caixa para efetuar esta tarefa", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            btnConsultar.requestFocus();
        }
        
    }
    
    private void transferirValorCaixa(){
        if(idCaixa != 0){
            calcularSaldoCaixa();
            if(qryCaixa.getCurrentFieldValue("data_fechamento") == null){
                if(cbxCaixaTransf.getSelectedIndex() == 0){
                    JOptionPane.showMessageDialog(this, "Caixa selecionado inválido", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    cbxCaixaTransf.requestFocus();
                }else if(Double.valueOf(txtValorTransf.getValue().toString()) == 0){
                    JOptionPane.showMessageDialog(this, "Valor de transferência inválido", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    txtValorTransf.requestFocus();
                }else if(cbxEspecie.getSelectedIndex() == 0 &&
                        (Double.valueOf(txtValorTransf.getValue().toString()) > 
                        Double.valueOf(txtSaldoDH.getValue().toString())) ){
                    JOptionPane.showMessageDialog(this, 
                             "Valor de transferência informado maior que saldo em dinheiro do caixa", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    txtValorTransf.requestFocus();
                }else if(cbxEspecie.getSelectedIndex() == 1 &&
                        (Double.valueOf(txtValorTransf.getValue().toString()) > 
                        Double.valueOf(txtSaldoCH.getValue().toString())) ){
                    JOptionPane.showMessageDialog(this, 
                             "Valor de transferência informado maior que saldo em cheque do caixa", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    txtValorTransf.requestFocus();
                }else if(cbxEspecie.getSelectedIndex() == 2 &&
                        (Double.valueOf(txtValorTransf.getValue().toString()) > 
                        Double.valueOf(txtSaldoCT.getValue().toString())) ){
                    JOptionPane.showMessageDialog(this, 
                             "Valor de transferência informado maior que saldo em cartão do caixa", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    txtValorTransf.requestFocus();
                }else if(chbCofre.isSelected() && cbxEspecie.getSelectedIndex() != 0){
                    JOptionPane.showMessageDialog(this, 
                             "Transferência em caixa tipo cofre somente em dinheiro", 
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    cbxEspecie.requestFocus();
                }else{
                    if(sistema.Mensagem.showConfirmDialog(this, 
                            "Deseja realmente transferir o valor informado para o caixa: " 
                                    + qryCaixaTransf.getCurrentFieldValueAsString("descricao"), 
                            "Confirmação") == 0){
                        // entrada de transferência no caixa designado.
                        String sql = String.format(
                                    "INSERT INTO itens_caixa("
                                        + "id_caixa, "
                                        + "descricao, "
                                        + "valor, "
                                        + "especie, "
                                        + "movimento) "
                                    + "VALUES ("
                                        + "'%s','%s','%s','%s','%s')",
                                    cbxCaixaTransf.getKeyListValue(), 
                                    String.format(
                                            "Transferência do caixa %s(%s)", 
                                            idCaixa, 
                                            txtDescricao.getText()),
                                    txtValorTransf.getValue(),
                                    cbxEspecie.getSelectedIndex(),
                                    1);
                        enviarTransacao(sql);
                        
                        // se o caixa de transferência for tipo cofre e 
                        // a espécie for ch ou cartão:
                        // é feita a entrada da transferência(código acima) 
                        // e é efetuado a saida desse valor transferido.
                        // Caixas tipo cofre trabalham somente com espécie em dinheiro,
                        // cheque e cartões estão lançados no controle de cheque e cartão,
                        // quando estas entradas forem pagas, entrarão no caixa cofre como dinheiro.
                        if(qryCaixaTransf.getCurrentFieldValueAsBoolean("tipo") &&
                                cbxEspecie.getSelectedIndex() != 0){
                            sql = String.format(
                                        "INSERT INTO itens_caixa("
                                            + "id_caixa, "
                                            + "descricao, "
                                            + "valor, "
                                            + "especie, "
                                            + "movimento) "
                                        + "VALUES ("
                                            + "'%s','%s','%s','%s','%s')",
                                        cbxCaixaTransf.getKeyListValue(), 
                                        String.format(
                                                "Saída ref. tranf. ch ou cartão do caixa %s(%s)", 
                                                idCaixa, 
                                                txtDescricao.getText()),
                                        txtValorTransf.getValue(),
                                        cbxEspecie.getSelectedIndex(),
                                        0);
                            enviarTransacao(sql);
                        }

                        //saida de transferência no caixa corrente.
                        sql = String.format(
                                    "INSERT INTO itens_caixa("
                                        + "id_caixa, "
                                        + "descricao, "
                                        + "valor, "
                                        + "especie, "
                                        + "movimento) "
                                    + "VALUES ("
                                        + "'%s','%s','%s','%s','%s')",
                                    idCaixa, 
                                    String.format(
                                            "Transferido para caixa %s(%s)",
                                            cbxCaixaTransf.getKeyListValue(),
                                            qryCaixaTransf.getCurrentFieldValueAsString("descricao")),
                                    txtValorTransf.getValue(),
                                    cbxEspecie.getSelectedIndex(),
                                    0);
                        enviarTransacao(sql);

                        // registro de log
                        String tarefa = qryCaixa.getCurrentFieldValueAsBoolean("tipo")?
                                "caixaCofre":"iFrmCaixa"; 
                        FrmLogin.log.gravar(FrmLogin.usuario.getNomeUsuario(),
                                tarefa, qryCaixa.getCurrentFieldValueAsString("id"), 
                                "Transferido valor para outro caixa");

                        limparCamposTransf();

                        carregarItensCaixa();

                        calcularSaldoCaixa();
                    }

                    limparCamposTransf();
                }
            }else{
                JOptionPane.showMessageDialog(this, "Consulte um caixa aberto", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
                btnConsultar.requestFocus();
            }
        }else{
            JOptionPane.showMessageDialog(this, "Consulte um caixa para fazer esta tarefa", 
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
            btnConsultar.requestFocus();
        }

    }
}

