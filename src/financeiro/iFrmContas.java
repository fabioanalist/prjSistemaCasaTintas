/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package financeiro;

import java.text.DecimalFormat;
import java.util.LinkedHashMap;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import lib.jdb.jdbquery.JDBQuery;
import lib.jdb.jdbupdate.JDBUpdate;
import principal.FrmLogin;

/**
 *
 * @author patri
 */
public class iFrmContas extends javax.swing.JInternalFrame {
    private JDBQuery qryContasPagar, qryContasReceber, qryLancamentos, qryCaixa, qryTemp;
    private String docPessoa, sqlLancContaReceber, sqlLancContaPagar, sqlComplemento, 
            sqlCaixaContaReceber, sqlCaixaContaPagar;
    private boolean pesquisaContasPagar, pesquisaContasReceber, pesquisaCaixa, consultadoConta;
    private int idCaixa;

    /**
     * Creates new form iFrmContasReceber
     */
    public iFrmContas(boolean tipo) { 
        
        sqlLancContaReceber = 
                "SELECT "
                    + "id, "
                    + "id_conta_receber, "
                    + "id_venda, "
                    + "doc_principal_cliente, "
                    + "id_item_caixa, "
                    + "valor, "
                    + "id_forma_pagamento, "
                    + "data_vencimento, "
                    + "data_pagamento, "
                    + "data_inclusao, "
                    + "data_modificacao "
                + "FROM "
                    + "vw_lancamentos_conta_receber_pessoa";
        
        sqlLancContaPagar = 
                "SELECT "
                    + "id, "
                    + "id_conta_pagar, "
                    + "id_compra, "
                    + "doc_principal_fornecedor, "
                    + "id_item_caixa, "
                    + "valor, "
                    + "NULL AS id_forma_pagamento, " 
                    + "data_vencimento, "
                    + "data_pagamento, "
                    + "data_inclusao, "
                    + "data_modificacao "
                + "FROM "
                    + "vw_lancamentos_conta_pagar_pessoa";
        
        sqlCaixaContaReceber = 
                "SELECT id, descricao, tipo FROM vw_caixa_consulta_conta_receber";
        
        sqlCaixaContaPagar = 
                "SELECT id, descricao, tipo FROM vw_caixa_consulta_conta_pagar";
        
        qryContasPagar = new JDBQuery();
        qryContasReceber = new JDBQuery();
        qryLancamentos = new JDBQuery();
        qryCaixa = new JDBQuery();
        qryTemp = new JDBQuery();
        
        JDBQuery[] qry = {qryContasPagar, qryContasReceber, qryLancamentos, 
            qryCaixa, qryTemp}; 
        
        for(JDBQuery q: qry){
            q.setJDBConnection(principal.Principal.conexao.getConexao());
            q.setConcurUpdatable(false);
            q.setLanguage("pt");
            q.setDecimalFormat("0.00");
            q.setTimeStampFormat("dd/MM/yyyy HH:mm:ss");
            q.setDateFormat("dd/MM/yyyy");
        }
        
        initComponents();
        
        tblLancamentos.setJDBQuery(qryLancamentos);
        tblLancamentos.setFieldsTitle("id", "CÓDIGO");
        tblLancamentos.setFieldsTitle("valor", "VALOR");
        tblLancamentos.setFieldsTitle("data_vencimento", "VENCIMENTO");
        tblLancamentos.setFieldsTitle("data_pagamento", "PAGAMENTO");
        
        cbxTipo.setSelectedIndex(tipo?1:0);
        
        grpOpcoes.add(rdbAberto);
        grpOpcoes.add(rdbFechado);
        grpOpcoes.add(rdbTodos);
        
        btnPagar.setEnabled(false);
        cbxEspecie.setEnabled(false);
        
        DecimalFormat decimal = new DecimalFormat("######0.00");        
        NumberFormatter numFormatter = new NumberFormatter(decimal);
        numFormatter.setFormat(decimal);
        numFormatter.setAllowsInvalid(false);
        DefaultFormatterFactory dfFactory = new DefaultFormatterFactory(numFormatter);
        
        txtValorTotal.setFormatterFactory(dfFactory);
        txtValorParcela.setFormatterFactory(dfFactory);
        txtPagarValor.setFormatterFactory(dfFactory);
        
        limpar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpOpcoes = new javax.swing.ButtonGroup();
        Painel = new javax.swing.JPanel();
        scrlCliente = new javax.swing.JScrollPane();
        tblLancamentos = new lib.jdb.control.jdbtable.JDBTable();
        pnCodigo = new javax.swing.JPanel();
        txtId = new lib.jdb.control.jdbtextfield.JDBTextField();
        pnCodigoVendaCompra = new javax.swing.JPanel();
        txtIdVendaCompra = new lib.jdb.control.jdbtextfield.JDBTextField();
        pnCodigoCaixa = new javax.swing.JPanel();
        txtIdItemCaixa = new lib.jdb.control.jdbtextfield.JDBTextField();
        pnPagar = new javax.swing.JPanel();
        lblDataVenc = new javax.swing.JLabel();
        lblValorPago = new javax.swing.JLabel();
        btnPagar = new lib.jdb.control.jdbbuttonsave.JDBButtonSave();
        pnDatas = new javax.swing.JPanel();
        lblInc = new javax.swing.JLabel();
        txtInc = new lib.jdb.control.jdbtextfield.JDBTextField();
        lblMod = new javax.swing.JLabel();
        txtMod = new lib.jdb.control.jdbtextfield.JDBTextField();
        txtPagarValor = new javax.swing.JFormattedTextField();
        txtValorParcela = new javax.swing.JFormattedTextField();
        lblValor = new javax.swing.JLabel();
        lblFormaPagamento = new javax.swing.JLabel();
        lblDataPag = new javax.swing.JLabel();
        txtCaixa = new javax.swing.JTextField();
        btnConsultarCaixa = new javax.swing.JButton();
        lblValor1 = new javax.swing.JLabel();
        cbxEspecie = new javax.swing.JComboBox();
        txtDataVenc = new javax.swing.JTextField();
        txtDataPagto = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDadosAdicionais = new javax.swing.JTextArea();
        lblFormaPagamento2 = new javax.swing.JLabel();
        btnConsultar = new javax.swing.JButton();
        cbxTipo = new javax.swing.JComboBox();
        txtNomePessoa = new javax.swing.JTextField();
        btnLimpar = new lib.jdb.control.jdbbuttoncancel.JDBButtonCancel();
        pnOpc = new javax.swing.JPanel();
        rdbAberto = new lib.jdb.control.jdbradiobutton.JDBRadioButton();
        rdbFechado = new lib.jdb.control.jdbradiobutton.JDBRadioButton();
        rdbTodos = new lib.jdb.control.jdbradiobutton.JDBRadioButton();
        txtValorTotal = new javax.swing.JFormattedTextField();
        lblFormaPagamento1 = new javax.swing.JLabel();
        btnLimparParcela = new lib.jdb.control.jdbbuttoncancel.JDBButtonCancel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Contas");

        Painel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)));

        scrlCliente.setFont(principal.FrmLogin.fontePadrao);

        tblLancamentos.setEditable(false);
        tblLancamentos.setToolTipText("Duplo clique para selecionar");
        tblLancamentos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLancamentosMouseClicked(evt);
            }
        });
        scrlCliente.setViewportView(tblLancamentos);

        pnCodigo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "Código", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        txtId.setFocusable(false);
        txtId.setFont(principal.FrmLogin.fontePadrao);

        javax.swing.GroupLayout pnCodigoLayout = new javax.swing.GroupLayout(pnCodigo);
        pnCodigo.setLayout(pnCodigoLayout);
        pnCodigoLayout.setHorizontalGroup(
            pnCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCodigoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtId, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnCodigoLayout.setVerticalGroup(
            pnCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCodigoLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        pnCodigoVendaCompra.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "Código de Venda/Compra", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        txtIdVendaCompra.setFocusable(false);
        txtIdVendaCompra.setFont(principal.FrmLogin.fontePadrao);

        javax.swing.GroupLayout pnCodigoVendaCompraLayout = new javax.swing.GroupLayout(pnCodigoVendaCompra);
        pnCodigoVendaCompra.setLayout(pnCodigoVendaCompraLayout);
        pnCodigoVendaCompraLayout.setHorizontalGroup(
            pnCodigoVendaCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCodigoVendaCompraLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtIdVendaCompra, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnCodigoVendaCompraLayout.setVerticalGroup(
            pnCodigoVendaCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCodigoVendaCompraLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(txtIdVendaCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        pnCodigoCaixa.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "Código de item de Caixa", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        txtIdItemCaixa.setFocusable(false);
        txtIdItemCaixa.setFont(principal.FrmLogin.fontePadrao);

        javax.swing.GroupLayout pnCodigoCaixaLayout = new javax.swing.GroupLayout(pnCodigoCaixa);
        pnCodigoCaixa.setLayout(pnCodigoCaixaLayout);
        pnCodigoCaixaLayout.setHorizontalGroup(
            pnCodigoCaixaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCodigoCaixaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtIdItemCaixa, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnCodigoCaixaLayout.setVerticalGroup(
            pnCodigoCaixaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCodigoCaixaLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(txtIdItemCaixa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        pnPagar.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        lblDataVenc.setFont(principal.FrmLogin.fontePadrao);
        lblDataVenc.setText("Data de Vencimento:");

        lblValorPago.setFont(principal.FrmLogin.fontePadrao);
        lblValorPago.setText("Pagar Valor");

        btnPagar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/money.png"))); // NOI18N
        btnPagar.setMnemonic('p');
        btnPagar.setFont(principal.FrmLogin.fontePadrao);
        btnPagar.setText("Pagar");
        btnPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagarActionPerformed(evt);
            }
        });

        pnDatas.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "Datas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        lblInc.setFont(principal.FrmLogin.fontePadrao);
        lblInc.setText("Inclusão:");

        lblMod.setFont(principal.FrmLogin.fontePadrao);
        lblMod.setText("Modificação:");

        javax.swing.GroupLayout pnDatasLayout = new javax.swing.GroupLayout(pnDatas);
        pnDatas.setLayout(pnDatasLayout);
        pnDatasLayout.setHorizontalGroup(
            pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDatasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblInc)
                    .addComponent(txtInc, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMod)
                    .addComponent(txtMod, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnDatasLayout.setVerticalGroup(
            pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnDatasLayout.createSequentialGroup()
                .addGroup(pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnDatasLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblInc))
                    .addGroup(pnDatasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblMod)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnDatasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtInc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        txtPagarValor.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));

        txtValorParcela.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));
        txtValorParcela.setFocusable(false);

        lblValor.setFont(principal.FrmLogin.fontePadrao);
        lblValor.setText("Valor:");

        lblFormaPagamento.setFont(principal.FrmLogin.fontePadrao);
        lblFormaPagamento.setText("Espécie");

        lblDataPag.setFont(principal.FrmLogin.fontePadrao);
        lblDataPag.setText("Data de Pagamento:");

        txtCaixa.setToolTipText("Somente caixas abertos no dia corrente e do tipo normal podem ser usados nas vendas");
        txtCaixa.setFocusable(false);

        btnConsultarCaixa.setFont(principal.FrmLogin.fontePadrao);
        btnConsultarCaixa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/look.png"))); // NOI18N
        btnConsultarCaixa.setMnemonic('c');
        btnConsultarCaixa.setText("Pesquisar");
        btnConsultarCaixa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarCaixaActionPerformed(evt);
            }
        });

        lblValor1.setFont(principal.FrmLogin.fontePadrao);
        lblValor1.setText("Caixa:");

        cbxEspecie.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "dinheiro", "cheque", "cartão" }));

        txtDataVenc.setFocusable(false);

        txtDataPagto.setFocusable(false);

        txtDadosAdicionais.setColumns(20);
        txtDadosAdicionais.setRows(5);
        jScrollPane1.setViewportView(txtDadosAdicionais);

        lblFormaPagamento2.setFont(principal.FrmLogin.fontePadrao);
        lblFormaPagamento2.setText("Dados adicionais");

        javax.swing.GroupLayout pnPagarLayout = new javax.swing.GroupLayout(pnPagar);
        pnPagar.setLayout(pnPagarLayout);
        pnPagarLayout.setHorizontalGroup(
            pnPagarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnPagarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnPagarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnPagarLayout.createSequentialGroup()
                        .addGroup(pnPagarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDataPag)
                            .addGroup(pnPagarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtDataPagto, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                                .addComponent(lblDataVenc, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtDataVenc, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(lblFormaPagamento2))
                        .addGap(20, 20, 20)
                        .addGroup(pnPagarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnPagarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblValor)
                                .addComponent(txtValorParcela)
                                .addComponent(cbxEspecie, 0, 145, Short.MAX_VALUE))
                            .addComponent(lblFormaPagamento)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE))
                .addGroup(pnPagarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnPagarLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(pnPagarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnPagarLayout.createSequentialGroup()
                                .addComponent(txtPagarValor, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnPagar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnPagarLayout.createSequentialGroup()
                                .addGroup(pnPagarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblValorPago)
                                    .addComponent(lblValor1)
                                    .addGroup(pnPagarLayout.createSequentialGroup()
                                        .addComponent(txtCaixa, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnConsultarCaixa)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnPagarLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(pnDatas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnPagarLayout.setVerticalGroup(
            pnPagarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnPagarLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnPagarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblValor)
                    .addComponent(lblDataVenc)
                    .addComponent(lblValor1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnPagarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtValorParcela)
                    .addComponent(txtCaixa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConsultarCaixa)
                    .addComponent(txtDataVenc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(pnPagarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDataPag)
                    .addComponent(lblFormaPagamento)
                    .addGroup(pnPagarLayout.createSequentialGroup()
                        .addComponent(lblValorPago)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnPagarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDataPagto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxEspecie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPagarValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPagar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(11, 11, 11)
                .addGroup(pnPagarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnDatas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnPagarLayout.createSequentialGroup()
                        .addComponent(lblFormaPagamento2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnConsultar.setFont(principal.FrmLogin.fontePadrao);
        btnConsultar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/look.png"))); // NOI18N
        btnConsultar.setMnemonic('c');
        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        cbxTipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Contas a pagar", "Contas a receber" }));
        cbxTipo.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cbxTipoPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        txtNomePessoa.setFocusable(false);

        btnLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/return2.png"))); // NOI18N
        btnLimpar.setMnemonic('l');
        btnLimpar.setFont(principal.FrmLogin.fontePadrao);
        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        pnOpc.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        rdbAberto.setFont(principal.FrmLogin.fontePadrao);
        rdbAberto.setText("Aberto");
        rdbAberto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbAbertoActionPerformed(evt);
            }
        });

        rdbFechado.setFont(principal.FrmLogin.fontePadrao);
        rdbFechado.setText("Fechado");
        rdbFechado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbFechadoActionPerformed(evt);
            }
        });

        rdbTodos.setFont(principal.FrmLogin.fontePadrao);
        rdbTodos.setText("Todos");
        rdbTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbTodosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnOpcLayout = new javax.swing.GroupLayout(pnOpc);
        pnOpc.setLayout(pnOpcLayout);
        pnOpcLayout.setHorizontalGroup(
            pnOpcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnOpcLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdbAberto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbFechado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdbTodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnOpcLayout.setVerticalGroup(
            pnOpcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnOpcLayout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(pnOpcLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbAberto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdbFechado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdbTodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        txtValorTotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0.00#"))));

        lblFormaPagamento1.setFont(principal.FrmLogin.fontePadrao);
        lblFormaPagamento1.setText("Valor total:");

        btnLimparParcela.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/return2.png"))); // NOI18N
        btnLimparParcela.setMnemonic('l');
        btnLimparParcela.setFont(principal.FrmLogin.fontePadrao);
        btnLimparParcela.setText("Limpar");
        btnLimparParcela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparParcelaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PainelLayout = new javax.swing.GroupLayout(Painel);
        Painel.setLayout(PainelLayout);
        PainelLayout.setHorizontalGroup(
            PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrlCliente)
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addComponent(pnCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pnCodigoVendaCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pnCodigoCaixa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnLimparParcela, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))
                    .addGroup(PainelLayout.createSequentialGroup()
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addComponent(txtNomePessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbxTipo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(PainelLayout.createSequentialGroup()
                                .addComponent(pnOpc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblFormaPagamento1))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnLimpar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnConsultar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(pnPagar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        PainelLayout.setVerticalGroup(
            PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PainelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConsultar)
                    .addComponent(cbxTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomePessoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(pnOpc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(PainelLayout.createSequentialGroup()
                            .addComponent(lblFormaPagamento1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrlCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnCodigoVendaCompra, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnCodigo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnCodigoCaixa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimparParcela, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnPagar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        String permissao = cbxTipo.getSelectedIndex() == 0?
                "iFrmContasPagar":"iFrmContasReceber";
        if(FrmLogin.usuario.verificarPermissao(this, permissao, 0)){

            limpar();

            // se é contas a pagar
            if(cbxTipo.getSelectedIndex() == 0){
                pesquisaContasPagar = true;
                pesquisaContasReceber = false;

                // campos para combobox sendo texto visual e o nome campo do banco referente.
                LinkedHashMap<String, String> combo = new LinkedHashMap<>();
                combo.put("Nome", "nome");
                combo.put("Documento","doc");
                combo.put("Nome fantasia","fantasia");

                // titulos para as colunas da tabela, sendo texto visual e nome campo do banco referente.
                LinkedHashMap<String, String> titulo = new LinkedHashMap<>();
                titulo.put("DOCUMENTO", "doc");
                titulo.put("NOME", "nome");
                titulo.put("NOME FANTASIA", "fantasia");

                // campos que deseja deixar invisível, pode-se omitir.
                String[] invisivel = null;

                // tamanho das colunas visíveis, pode-se omitir.
        //        int[] tamanho = {200, 400};

                pesquisa.iFrmPesquisa ctaPagar;
                ctaPagar = new pesquisa.iFrmPesquisa(this,
                        "Pesquisa de Contas a pagar",
                        principal.Principal.conexao.getConexao(),
                        qryContasPagar,
                        "doc",
                        combo,
                        titulo,
                        "SELECT doc, nome, fantasia FROM vw_contas_pagar_pesquisa",
                        invisivel,
                        null);


                principal.FrmPrincipal.Desktop.add(ctaPagar);
                ctaPagar.setVisible(true);
            // senão é contas a receber
            }else{
                pesquisaContasReceber = true;
                pesquisaContasPagar = false;

                // campos para combobox sendo texto visual e o nome campo do banco referente.
                LinkedHashMap<String, String> combo = new LinkedHashMap<>();
                combo.put("Nome", "nome");
                combo.put("Documento","doc");
                combo.put("Nome fantasia","fantasia");

                // titulos para as colunas da tabela, sendo texto visual e nome campo do banco referente.
                LinkedHashMap<String, String> titulo = new LinkedHashMap<>();
                titulo.put("DOCUMENTO", "doc");
                titulo.put("NOME", "nome");
                titulo.put("NOME FANTASIA", "fantasia");

                // campos que deseja deixar invisível, pode-se omitir.
                String[] invisivel = null;

                // tamanho das colunas visíveis, pode-se omitir.
        //        int[] tamanho = {200, 400};

                pesquisa.iFrmPesquisa ctaReceber;
                ctaReceber = new pesquisa.iFrmPesquisa(this,
                        "Pesquisa de Contas a receber",
                        principal.Principal.conexao.getConexao(),
                        qryContasReceber,
                        "doc",
                        combo,
                        titulo,
                        "SELECT doc, nome, fantasia FROM vw_contas_receber_pesquisa",
                        invisivel,
                        null);


                principal.FrmPrincipal.Desktop.add(ctaReceber);
                ctaReceber.setVisible(true);
            }
        }
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void cbxTipoPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cbxTipoPopupMenuWillBecomeInvisible
        limpar();
    }//GEN-LAST:event_cbxTipoPopupMenuWillBecomeInvisible

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        limpar();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void rdbFechadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbFechadoActionPerformed
        if(consultadoConta){
            if(cbxTipo.getSelectedIndex() == 0){
                qryLancamentos.setSQL(sqlLancContaPagar + sqlComplemento + 
                        " AND data_pagamento IS NOT NULL ORDER BY data_pagamento");
                
                qryLancamentos.execQuery();
            }else{
                qryLancamentos.setSQL(sqlLancContaReceber + sqlComplemento + 
                        " AND data_pagamento IS NOT NULL ORDER BY data_pagamento");
                
                qryLancamentos.execQuery();
            }
            
            txtValorTotal.setValue(somarValoresTabela());
            
            btnPagar.setEnabled(false);
            cbxEspecie.setEnabled(false);
        }
    }//GEN-LAST:event_rdbFechadoActionPerformed

    private void rdbAbertoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbAbertoActionPerformed
        exibirAberto();
    }//GEN-LAST:event_rdbAbertoActionPerformed

    private void rdbTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbTodosActionPerformed
        txtValorTotal.setValue(0.0);
        btnPagar.setEnabled(false);
        cbxEspecie.setEnabled(false);
        
        if(consultadoConta){
            if(cbxTipo.getSelectedIndex() == 0){
                carregarQryLancCtaPagar();
            }else{
                carregarQryLancCtaReceber();
            }
        }
    }//GEN-LAST:event_rdbTodosActionPerformed

    private void tblLancamentosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLancamentosMouseClicked
        if(evt.getClickCount() == 2){
            carregarParcela();
        }
    }//GEN-LAST:event_tblLancamentosMouseClicked

    private void btnLimparParcelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparParcelaActionPerformed
        limparCamposParcela(false);
    }//GEN-LAST:event_btnLimparParcelaActionPerformed

    private void btnConsultarCaixaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarCaixaActionPerformed
        carregarCaixa();
    }//GEN-LAST:event_btnConsultarCaixaActionPerformed

    private void btnPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagarActionPerformed
        String permissao = cbxTipo.getSelectedIndex() == 0?
                "iFrmContasPagar":"iFrmContasReceber";
        if(FrmLogin.usuario.verificarPermissao(this, permissao, 1)){

            // pagamento de conta receber por valor, quando:
            // for informado um valor em txtPagarValor,
            // for conta a receber
            if(Double.valueOf(txtPagarValor.getValue().toString()) != 0.0 &&
                    cbxTipo.getSelectedIndex() == 1){
                if(qryLancamentos.getRow() < 1){
                    JOptionPane.showMessageDialog(this, "Selecione um cliente com contas em aberto",
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    btnConsultarCaixa.requestFocus();
                }else if(txtCaixa.getText().isEmpty()){
                    JOptionPane.showMessageDialog(this, "Selecione um caixa para pagar",
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    btnConsultarCaixa.requestFocus();
                }else{
                    pagarPorValor();
                }
            // pagamento por parcela específica
            }else if(!txtId.getText().isEmpty()){
                if(idCaixa == 0){
                    JOptionPane.showMessageDialog(this, "Selecione um caixa para pagar",
                        "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    btnConsultarCaixa.requestFocus();
                }else{
                    // se contas a pagar
                    if(cbxTipo.getSelectedIndex() == 0){
                        pagarContaPagar();

                    // senão se contas a receber
                    }else{
                        pagarContaReceber();
                    }
                }
            }else{
                JOptionPane.showMessageDialog(this, "Selecione uma conta para pagar",
                    "Atenção", JOptionPane.INFORMATION_MESSAGE);
                btnConsultar.requestFocus();
            }
        }
    }//GEN-LAST:event_btnPagarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Painel;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnConsultarCaixa;
    private lib.jdb.control.jdbbuttoncancel.JDBButtonCancel btnLimpar;
    private lib.jdb.control.jdbbuttoncancel.JDBButtonCancel btnLimparParcela;
    private lib.jdb.control.jdbbuttonsave.JDBButtonSave btnPagar;
    private javax.swing.JComboBox cbxEspecie;
    private javax.swing.JComboBox cbxTipo;
    private javax.swing.ButtonGroup grpOpcoes;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDataPag;
    private javax.swing.JLabel lblDataVenc;
    private javax.swing.JLabel lblFormaPagamento;
    private javax.swing.JLabel lblFormaPagamento1;
    private javax.swing.JLabel lblFormaPagamento2;
    private javax.swing.JLabel lblInc;
    private javax.swing.JLabel lblMod;
    private javax.swing.JLabel lblValor;
    private javax.swing.JLabel lblValor1;
    private javax.swing.JLabel lblValorPago;
    private javax.swing.JPanel pnCodigo;
    private javax.swing.JPanel pnCodigoCaixa;
    private javax.swing.JPanel pnCodigoVendaCompra;
    private javax.swing.JPanel pnDatas;
    private javax.swing.JPanel pnOpc;
    private javax.swing.JPanel pnPagar;
    private lib.jdb.control.jdbradiobutton.JDBRadioButton rdbAberto;
    private lib.jdb.control.jdbradiobutton.JDBRadioButton rdbFechado;
    private lib.jdb.control.jdbradiobutton.JDBRadioButton rdbTodos;
    private javax.swing.JScrollPane scrlCliente;
    private lib.jdb.control.jdbtable.JDBTable tblLancamentos;
    private javax.swing.JTextField txtCaixa;
    private javax.swing.JTextArea txtDadosAdicionais;
    private javax.swing.JTextField txtDataPagto;
    private javax.swing.JTextField txtDataVenc;
    private lib.jdb.control.jdbtextfield.JDBTextField txtId;
    private lib.jdb.control.jdbtextfield.JDBTextField txtIdItemCaixa;
    private lib.jdb.control.jdbtextfield.JDBTextField txtIdVendaCompra;
    private lib.jdb.control.jdbtextfield.JDBTextField txtInc;
    private lib.jdb.control.jdbtextfield.JDBTextField txtMod;
    private javax.swing.JTextField txtNomePessoa;
    private javax.swing.JFormattedTextField txtPagarValor;
    private javax.swing.JFormattedTextField txtValorParcela;
    private javax.swing.JFormattedTextField txtValorTotal;
    // End of variables declaration//GEN-END:variables

    public void atribuirCampos(){
        if(pesquisaContasPagar){
            docPessoa = qryContasPagar.getCurrentFieldValueAsString("doc");
            txtNomePessoa.setText(qryContasPagar.getCurrentFieldValueAsString("nome"));
            
            carregarQryLancCtaPagar();
            
            pesquisaContasPagar = false;
        }else if(pesquisaContasReceber){
            docPessoa = qryContasReceber.getCurrentFieldValueAsString("doc");
            txtNomePessoa.setText(qryContasReceber.getCurrentFieldValueAsString("nome"));
            
            carregarQryLancCtaReceber();
            
            pesquisaContasReceber = false;
        }else if(pesquisaCaixa){
            idCaixa = qryCaixa.getCurrentFieldValueAsInteger("id");
            txtCaixa.setText(qryCaixa.getCurrentFieldValueAsString("descricao"));
            
            pesquisaCaixa = false;
        }
        
        consultadoConta = true;
        
    }

    private void limpar(){
        docPessoa = "";
        
        consultadoConta = false;
        
        pesquisaContasPagar = false;
        pesquisaContasReceber = false;
        pesquisaCaixa = false;
        
        rdbTodos.setSelected(true);
        
        txtValorTotal.setValue(0.0);
        
        txtNomePessoa.setText("");
        
        limparCamposParcela(true);
    }
    
    private void limparCamposParcela(boolean atualizarQry){
        idCaixa = 0;
        
        txtId.setText("");
        txtIdItemCaixa.setText("");
        txtIdVendaCompra.setText("");
        
        txtDataVenc.setText("");
        txtDataPagto.setText("");
        
        txtCaixa.setText("");
        txtInc.setText("");
        txtMod.setText("");
        
        txtValorParcela.setValue(0.0);
        txtPagarValor.setValue(0.0);
        
        txtDadosAdicionais.setText("");
        
        txtPagarValor.setFocusable(true);
        
        if(cbxTipo.getSelectedIndex() == 0){
            cbxEspecie.removeAllItems();
            cbxEspecie.addItem("dinheiro");
            
            if(atualizarQry){
                carregarQryLancCtaPagar();
            }
            
            txtPagarValor.setFocusable(false);
        }else{
            cbxEspecie.removeAllItems();
            cbxEspecie.addItem("dinheiro");
            cbxEspecie.addItem("cheque");
            cbxEspecie.addItem("cartão");
            
            if(atualizarQry){
                carregarQryLancCtaReceber();
            }
            
            txtPagarValor.setFocusable(true);
        }
        
        cbxEspecie.setSelectedIndex(0);
    }
    
    private void carregarQryLancCtaReceber(){
        sqlComplemento = String.format(" WHERE doc_principal_cliente = '%s'", docPessoa);
        qryLancamentos.setSQL(sqlLancContaReceber + sqlComplemento);
        
        tblLancamentos.setInvisibleFields("id_conta_receber id_venda doc_principal_cliente "
                + "id_item_caixa id_forma_pagamento data_inclusao data_modificacao");        
        
        qryLancamentos.execQuery();
    }

    private void carregarQryLancCtaPagar(){
        sqlComplemento = String.format(" WHERE doc_principal_fornecedor = '%s'", docPessoa);
        qryLancamentos.setSQL(sqlLancContaPagar + sqlComplemento);
        
        tblLancamentos.setInvisibleFields("id_conta_pagar id_compra doc_principal_fornecedor "
                + "id_item_caixa id_forma_pagamento data_inclusao data_modificacao");        
        
        qryLancamentos.execQuery();
    }
    
    private double somarValoresTabela(){
        double soma = 0;
        
        qryLancamentos.first();
        if(qryLancamentos.getRow() == 1){
            do{
                soma += qryLancamentos.getCurrentFieldValueAsDouble("valor");
            }while(qryLancamentos.next() != -1);
        }
        
        return soma;
    }
    
    private void carregarCaixa(){
        pesquisaCaixa = true;
        pesquisaContasPagar = false;
        pesquisaContasReceber = false;
        
        String sql;
        if(cbxTipo.getSelectedIndex() == 0){
            sql = sqlCaixaContaPagar;
        }else{
            sql = sqlCaixaContaReceber;
        }
        
        // campos para combobox sendo texto visual e o nome campo do banco referente.
        LinkedHashMap<String, String> combo = new LinkedHashMap<>();
        combo.put("Descrição", "descricao");
        combo.put("Código", "id");
        
        // titulos para as colunas da tabela, sendo texto visual e nome campo do banco referente.
        LinkedHashMap<String, String> titulo = new LinkedHashMap<>();
        titulo.put("CÓDIGO", "id");
        titulo.put("DESCRIÇÃO", "descricao");

        // campos que deseja deixar invisível, pode-se omitir.
        String[] invisivel = {"tipo"};

        // tamanho das colunas visíveis, pode-se omitir.
        int[] tamanho = null;
        
        pesquisa.iFrmPesquisa caixa;
        caixa = new pesquisa.iFrmPesquisa(this,
                "Pesquisa de Caixas",
                principal.Principal.conexao.getConexao(),
                qryCaixa,
                "id",
                combo,
                titulo,
                sql,
                invisivel,
                tamanho);

        
        principal.FrmPrincipal.Desktop.add(caixa);
        caixa.setVisible(true);                        
    }
    
    private void carregarParcela(){
        int idItemCaixa;
        
        txtPagarValor.setFocusable(false);

        txtId.setText(qryLancamentos.getCurrentFieldValueAsString(1));
        txtIdVendaCompra.setText(qryLancamentos.getCurrentFieldValueAsString(3));
        txtValorParcela.setValue(qryLancamentos.getCurrentFieldValueAsDouble(6));
        txtDataVenc.setText(qryLancamentos.getCurrentFieldValueAsString(8));
        txtInc.setText(qryLancamentos.getCurrentFieldValueAsString(10));
        txtMod.setText(qryLancamentos.getCurrentFieldValueAsString(11));   

        if(qryLancamentos.getCurrentFieldValueAsString(5) == null){
            idItemCaixa = 0;
        }else{
            idItemCaixa = qryLancamentos.getCurrentFieldValueAsInteger(5);
        }
        txtIdItemCaixa.setText(String.valueOf(idItemCaixa));
        cbxEspecie.setSelectedIndex(carregarEspecieParcela(idItemCaixa));

        if(qryLancamentos.getCurrentFieldValueAsSQLDate(9) == null){
            txtDataPagto.setText("");
        }else{
            txtDataPagto.setText(qryLancamentos.getCurrentFieldValueAsString(9));
        }
    }
    
    private int carregarEspecieParcela(int id){
        qryTemp.setSQL("SELECT especie FROM vw_itens_caixa WHERE id = " + id);
        qryTemp.execQuery();
        
        if(qryTemp.getRow() == 1){
            if(qryTemp.getCurrentFieldValueAsInteger(1) != 4){
                return qryTemp.getCurrentFieldValueAsInteger(1); 
            }
        }
        
        return 0;
    }
    
    private void pagarContaPagar(){
        if(txtDataPagto.getText().isEmpty()){
            if(sistema.Mensagem.showConfirmDialog(this, 
                    "Deseja realmente realizar o pagamento desta conta?", 
                    "Confirmação") == 0){

                String sql = String.format(
                        "INSERT INTO itens_caixa("
                            + "id_caixa, "
                            + "descricao, "
                            + "valor, "
                            + "movimento) "
                        + "VALUES ("
                            + "'%s','%s','%s','%s')",
                        idCaixa,
                        String.format("Conta a pagar %s(%s)", 
                                txtId.getText(), 
                                txtNomePessoa.getText()),
                        txtValorParcela.getValue(),
                        0);
                enviarTransacao(sql);

                qryTemp.setSQL("SELECT LAST_INSERT_ID()");
                qryTemp.execQuery();

                int idItemcaixa = qryTemp.getCurrentFieldValueAsInteger(1);

                sql = String.format(
                        "UPDATE lancamentos_conta_pagar "
                        + "SET "
                            + "data_pagamento=now(), "
                            + "id_item_caixa='%s'"
                        + "WHERE id='%s'",
                        idItemcaixa,
                        txtId.getText() );
                enviarTransacao(sql);
                
                // log sistema
                FrmLogin.log.gravar(
                    FrmLogin.usuario.getNomeUsuario(), "iFrmContasPagar", 
                        txtId.getText(), "Pago conta");
                
                exibirAberto();
                
            }
        }
        
        limparCamposParcela(false);
    }
    
    private void pagarContaReceber(){
        if(txtDataPagto.getText().isEmpty()){
            
            // pagamento de conta receber por parcela específica.
            if(sistema.Mensagem.showConfirmDialog(this, 
                    "Deseja realmente realizar o pagamento desta conta?", 
                    "Confirmação") == 0){

                // entrada de caixa(itens_caixa) ref. pgto de conta a receber.
                String sql = String.format(
                        "INSERT INTO itens_caixa("
                            + "id_caixa, "
                            + "descricao, "
                            + "valor, "
                            + "especie, "
                            + "movimento) "
                        + "VALUES ("
                            + "'%s','%s','%s','%s','%s')",
                        idCaixa,
                        String.format("Conta a receber %s(%s)", 
                                txtId.getText(), 
                                txtNomePessoa.getText()),
                        txtValorParcela.getValue(),
                        cbxEspecie.getSelectedIndex(),
                        1);
                enviarTransacao(sql);

                // recuperando id_item_caixa.
                qryTemp.setSQL("SELECT LAST_INSERT_ID()");
                qryTemp.execQuery();

                int idItemcaixa = qryTemp.getCurrentFieldValueAsInteger(1);

                // modificação de lancamentos conta receber, atribuindo data de 
                // pagamento e id_item_caixa
                sql = String.format(
                        "UPDATE lancamentos_conta_receber "
                        + "SET "
                            + "data_pagamento=now(), "
                            + "id_item_caixa = '%s'"
                        + "WHERE id = %s",
                        idItemcaixa,
                        txtId.getText() );
                enviarTransacao(sql);

                // se a entrada é cheque ou cartão
                if(cbxEspecie.getSelectedIndex() != 0){

                    // lança a saida de caixa, para abater a entrada, 
                    // quando em caixa tipo cofre.
                    if(qryCaixa.getCurrentFieldValueAsBoolean("tipo")){
                        sql = String.format(
                                "INSERT INTO itens_caixa("
                                    + "id_caixa, "
                                    + "descricao, "
                                    + "valor, "
                                    + "especie, "
                                    + "movimento) "
                                + "VALUES ("
                                    + "'%s','%s','%s','%s','%s')",
                                idCaixa,
                                String.format("Saída ref. Conta a pagar %s(%s)", 
                                        txtId.getText(), 
                                        txtNomePessoa.getText()),
                                txtValorParcela.getValue(),
                                cbxEspecie.getSelectedIndex(),
                                0);
                        enviarTransacao(sql);
                    }

                    // criando entrada em controle ch ct e lancamentos controle ch e cartão
                    sql = String.format(
                            "INSERT INTO controle_cheque_cartao("
                                + "doc_principal_pessoa, id_conta_receber, "
                                + "dados_adicionais, valor_total, quantidade_parcelas) "
                            + "VALUES ("
                                + "'%s','%s','%s','%s','%s')",
                                docPessoa,
                                qryLancamentos.getCurrentFieldValueAsInteger("id_conta_receber"),
                                txtDadosAdicionais.getText(),
                                txtValorParcela.getValue(),
                                1);
                    enviarTransacao(sql);

                    qryTemp.setSQL(String.format("SELECT LAST_INSERT_ID()"));
                    qryTemp.execQuery();

                    int idControlCHCT = qryTemp.getCurrentFieldValueAsInteger(1);

                    sql = String.format(
                            "INSERT INTO lancamentos_controle_cheque_cartao("
                                + "numero_parcela, id_controle_cheque_cartao, "
                                + "valor_parcela, data_vencimento) "
                            + "VALUES ("
                                + "'%s','%s','%s',now())",
                            1, 
                            idControlCHCT,
                            txtValorParcela.getValue() );
                    enviarTransacao(sql);
                }
                
                // log sistema
                FrmLogin.log.gravar(
                    FrmLogin.usuario.getNomeUsuario(), "iFrmContasReceber",
                        txtId.getText(),"Pago conta");

                exibirAberto();
            }
        }
        
        limparCamposParcela(false);
    }
    
    private void enviarTransacao(String sql){
        JDBUpdate transacao = new JDBUpdate();
        transacao.setJDBConnection(principal.Principal.conexao.getConexao());

        transacao.setSQL(sql);
        transacao.setShowMessageOnError(true);
        
        transacao.execUpdate();
    }
    
    private void exibirAberto(){
        if(consultadoConta){
            if(cbxTipo.getSelectedIndex() == 0){
                qryLancamentos.setSQL(sqlLancContaPagar + sqlComplemento + 
                        " AND data_pagamento IS NULL");
                
                qryLancamentos.execQuery();
            }else{
                qryLancamentos.setSQL(sqlLancContaReceber + sqlComplemento + 
                        " AND data_pagamento IS NULL");
                
                qryLancamentos.execQuery();
            }
            
            txtValorTotal.setValue(somarValoresTabela());
            
            btnPagar.setEnabled(true);
            cbxEspecie.setEnabled(true);
        }
    }
    
    private void pagarPorValor(){
        double valorPago, valorTotal;
        valorPago = Double.valueOf(txtPagarValor.getValue().toString());
        valorTotal = Double.valueOf(txtValorTotal.getValue().toString());

        if(valorPago > valorTotal){
            JOptionPane.showMessageDialog(this, 
                    "Valor informado maior que \n"
                    + "valor total em aberto na conta.\n"
                    + "Atribuindo valor total em pagar valor.", "Atenção", 
                    JOptionPane.INFORMATION_MESSAGE);
            txtPagarValor.setValue(valorTotal);
            txtPagarValor.requestFocus();
        }else{

            if(sistema.Mensagem.showConfirmDialog(this, String.format(
                    "Deseja realmente pagar o valor de %.2f em %s nesta conta",
                        valorPago, cbxEspecie.getSelectedItem()), 
                    "Atenção") == 0){
                double restante = valorPago;
                DecimalFormat df = new DecimalFormat("#.00");
                String verRestante, sql, complDadosAdic = "";

                // laço passando por todos os registros da qry
                qryLancamentos.first();
                do{

                    // se o valor da parcela for menor ou igual ao restante
                    if(qryLancamentos.getCurrentFieldValueAsDouble("valor") <= restante){
                        // entrada de caixa(itens_caixa) ref. pgto de conta a receber.
                        sql = String.format(
                                "INSERT INTO itens_caixa("
                                    + "id_caixa, "
                                    + "descricao, "
                                    + "valor, "
                                    + "especie, "
                                    + "movimento) "
                                + "VALUES ("
                                    + "'%s','%s','%s','%s','%s')",
                                idCaixa,
                                String.format("Conta a receber %s(%s)", 
                                        qryLancamentos.getCurrentFieldValueAsString("id"), 
                                        txtNomePessoa.getText()),
                                qryLancamentos.getCurrentFieldValueAsDouble("valor"),
                                cbxEspecie.getSelectedIndex(),
                                1);
                        enviarTransacao(sql);

                        // recuperando id_item_caixa.
                        qryTemp.setSQL("SELECT LAST_INSERT_ID()");
                        qryTemp.execQuery();

                        int idItemcaixa = qryTemp.getCurrentFieldValueAsInteger(1);

                        // modificação de lancamentos conta receber, atribuindo data de 
                        // pagamento e id_item_caixa
                        sql = String.format(
                                "UPDATE lancamentos_conta_receber "
                                + "SET "
                                    + "data_pagamento=now(), "
                                    + "id_item_caixa = '%s' "
                                + "WHERE id = %s",
                                idItemcaixa,
                                qryLancamentos.getCurrentFieldValueAsString("id") );
                        enviarTransacao(sql);

                        // se a entrada é cheque ou cartão
                        if(cbxEspecie.getSelectedIndex() != 0){

                            // lança a saida de caixa, para abater a entrada, 
                            // quando em caixa tipo cofre.
                            if(qryCaixa.getCurrentFieldValueAsBoolean("tipo")){
                                sql = String.format(
                                        "INSERT INTO itens_caixa("
                                            + "id_caixa, "
                                            + "descricao, "
                                            + "valor, "
                                            + "especie, "
                                            + "movimento) "
                                        + "VALUES ("
                                            + "'%s','%s','%s','%s','%s')",
                                        idCaixa,
                                        String.format("Saída ref. Conta a pagar %s(%s)", 
                                                qryLancamentos.getCurrentFieldValueAsString("id"), 
                                                txtNomePessoa.getText()),
                                        qryLancamentos.getCurrentFieldValueAsDouble("valor"),
                                        cbxEspecie.getSelectedIndex(),
                                        0);
                                enviarTransacao(sql);
                            }

                            complDadosAdic += 
                                    qryLancamentos.getCurrentFieldValueAsString(
                                            "id_conta_receber") + " "; 
                        }

                        restante -= qryLancamentos.getCurrentFieldValueAsDouble("valor");
                    // se o valor da parcela for maior que o restante
                    }else{
                        // entrada de caixa(itens_caixa) ref. pgto de conta a receber.
                        sql = String.format(
                                "INSERT INTO itens_caixa("
                                    + "id_caixa, "
                                    + "descricao, "
                                    + "valor, "
                                    + "especie, "
                                    + "movimento) "
                                + "VALUES ("
                                    + "'%s','%s','%s','%s','%s')",
                                idCaixa,
                                String.format("Conta a receber %s(%s)", 
                                        qryLancamentos.getCurrentFieldValueAsString("id"), 
                                        txtNomePessoa.getText()),
                                restante,
                                cbxEspecie.getSelectedIndex(),
                                1);
                        enviarTransacao(sql);

                        // recuperando id_item_caixa.
                        qryTemp.setSQL("SELECT LAST_INSERT_ID()");
                        qryTemp.execQuery();

                        int idItemcaixa = qryTemp.getCurrentFieldValueAsInteger(1);

                        // modificação de lancamentos conta receber, atribuindo data de 
                        // pagamento e id_item_caixa
                        double valorNovaParcela = 
                                qryLancamentos.getCurrentFieldValueAsDouble("valor") - 
                                restante;

                        sql = String.format(
                                "UPDATE lancamentos_conta_receber "
                                + "SET "
                                    + "data_pagamento=now(), "
                                    + "valor = '%s', "
                                    + "id_item_caixa = '%s' "
                                + "WHERE id = %s",
                                restante,
                                idItemcaixa,
                                qryLancamentos.getCurrentFieldValueAsString("id") );
                        enviarTransacao(sql);

                        // se a entrada é cheque ou cartão
                        if(cbxEspecie.getSelectedIndex() != 0){

                            // lança a saida de caixa, para abater a entrada, 
                            // quando em caixa tipo cofre.
                            if(qryCaixa.getCurrentFieldValueAsBoolean("tipo")){
                                sql = String.format(
                                        "INSERT INTO itens_caixa("
                                            + "id_caixa, "
                                            + "descricao, "
                                            + "valor, "
                                            + "especie, "
                                            + "movimento) "
                                        + "VALUES ("
                                            + "'%s','%s','%s','%s','%s')",
                                        idCaixa,
                                        String.format("Saída ref. Conta a pagar %s(%s)", 
                                                qryLancamentos.getCurrentFieldValueAsString("id"), 
                                                txtNomePessoa.getText()),
                                        restante,
                                        cbxEspecie.getSelectedIndex(),
                                        0);
                                enviarTransacao(sql);
                            }

                            complDadosAdic += 
                                    qryLancamentos.getCurrentFieldValueAsString(
                                            "id") + ","; 
                        }

                        if(!df.format(valorNovaParcela).equals(df.format(0.0))){
                            sql = String.format(
                                    "INSERT INTO lancamentos_conta_receber("
                                        + "id_conta_receber, "
                                        + "valor, "
                                        + "id_forma_pagamento, "
                                        + "data_vencimento) "
                                    + "VALUES ("
                                        + "'%s','%s','%s','%s')",
                                    qryLancamentos.getCurrentFieldValueAsInteger("id_conta_receber"),
                                    valorNovaParcela,
                                    qryLancamentos.getCurrentFieldValueAsInteger("id_forma_pagamento"),
                                    qryLancamentos.getCurrentFieldValueAsSQLDate("data_vencimento") );
                            enviarTransacao(sql);
                        }

                        restante = 0.0;
                    }

                    verRestante = df.format(restante);
                    if(verRestante.equals(df.format(0.00))){
                        break;
                    }
                }while(qryLancamentos.next() != -1);
                qryLancamentos.first();

                // se a entrada é cheque ou cartão
                if(cbxEspecie.getSelectedIndex() != 0){

                    // criando entrada em controle ch ct e lancamentos controle ch e cartão
                    sql = String.format(
                            "INSERT INTO controle_cheque_cartao("
                                + "doc_principal_pessoa, id_conta_receber, "
                                + "dados_adicionais, valor_total, quantidade_parcelas) "
                            + "VALUES ("
                                + "'%s','%s','%s','%s','%s')",
                                docPessoa,
                                qryLancamentos.getCurrentFieldValueAsInteger("id_conta_receber"),
                                txtDadosAdicionais.getText() + " cod. lanç. conta receber: " + complDadosAdic,
                                valorPago,
                                1);
                    enviarTransacao(sql);

                    qryTemp.setSQL(String.format("SELECT LAST_INSERT_ID()"));
                    qryTemp.execQuery();

                    int idControlCHCT = qryTemp.getCurrentFieldValueAsInteger(1);

                    sql = String.format(
                            "INSERT INTO lancamentos_controle_cheque_cartao("
                                + "numero_parcela, id_controle_cheque_cartao, "
                                + "valor_parcela, data_vencimento) "
                            + "VALUES ("
                                + "'%s','%s','%s',now())",
                            1, 
                            idControlCHCT,
                            valorPago );
                    enviarTransacao(sql);
                }

                // log sistema
                FrmLogin.log.gravar(
                        FrmLogin.usuario.getNomeUsuario(), "iFrmContasReceber", "Pago conta por valor");

                exibirAberto();

                limparCamposParcela(false);
            }
        }
    }
}

